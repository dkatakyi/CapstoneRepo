
OccupancyDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f6c  08006f6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006f6c  08006f6c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f6c  08006f6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  20000074  08006fe8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  08006fe8  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a017  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003600  00000000  00000000  0003a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  0003d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  0003eb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004678  00000000  00000000  0003feb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ce9  00000000  00000000  00044528  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000998cb  00000000  00000000  00057211  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0adc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  000f0b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d68 	.word	0x08006d68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006d68 	.word	0x08006d68

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 ffc5 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f89d 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f945 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f919 	bl	8000894 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000662:	f000 f8e7 	bl	8000834 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  lcd_IO_init();
 8000666:	f000 fca5 	bl	8000fb4 <lcd_IO_init>

  lcd_init();
 800066a:	f000 fce7 	bl	800103c <lcd_init>

  //uint8_t room_str[40];
  uint16_t roomSz = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	80fb      	strh	r3, [r7, #6]

//  CMD2LCD(0xC0);

//  char2LCD("there");

  printString("\x1b[2J");
 8000672:	4833      	ldr	r0, [pc, #204]	; (8000740 <main+0xf4>)
 8000674:	f000 fc3c 	bl	8000ef0 <printString>

  printString("\x1b[0;0H");
 8000678:	4832      	ldr	r0, [pc, #200]	; (8000744 <main+0xf8>)
 800067a:	f000 fc39 	bl	8000ef0 <printString>


	CMD2LCD(0x01);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fcb4 	bl	8000fec <CMD2LCD>
	char2LCD("use inputs");
 8000684:	4830      	ldr	r0, [pc, #192]	; (8000748 <main+0xfc>)
 8000686:	f000 fd31 	bl	80010ec <char2LCD>
	CMD2LCD(0xC0);
 800068a:	20c0      	movs	r0, #192	; 0xc0
 800068c:	f000 fcae 	bl	8000fec <CMD2LCD>
	char2LCD("room size: ");
 8000690:	482e      	ldr	r0, [pc, #184]	; (800074c <main+0x100>)
 8000692:	f000 fd2b 	bl	80010ec <char2LCD>
	POT_Select();
 8000696:	f000 ff47 	bl	8001528 <POT_Select>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800069a:	e011      	b.n	80006c0 <main+0x74>
	{
		CMD2LCD(0xCB);
 800069c:	20cb      	movs	r0, #203	; 0xcb
 800069e:	f000 fca5 	bl	8000fec <CMD2LCD>
//			else if(roomSz < 0xFFF)
//			{
//				strcpy((char *)room_str, "cl110");
//			}

		strcpy((char *)room_str, roomSelect(ADC_Read()));
 80006a2:	f000 ff5d 	bl	8001560 <ADC_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc5a 	bl	8000f64 <roomSelect>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4826      	ldr	r0, [pc, #152]	; (8000750 <main+0x104>)
 80006b6:	f005 ff67 	bl	8006588 <strcpy>
		char2LCD((char *)room_str);
 80006ba:	4825      	ldr	r0, [pc, #148]	; (8000750 <main+0x104>)
 80006bc:	f000 fd16 	bl	80010ec <char2LCD>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80006c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c4:	4823      	ldr	r0, [pc, #140]	; (8000754 <main+0x108>)
 80006c6:	f001 fe55 	bl	8002374 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1e5      	bne.n	800069c <main+0x50>
//		HAL_Delay(300);
//		CMD2LCD(0xCB);
//		char2LCD("2");
//		HAL_Delay(300);
	}
	CMD2LCD(0x01);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 fc8b 	bl	8000fec <CMD2LCD>
//	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d6:	f003 f83d 	bl	8003754 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structQueue */
  structQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &structQueue_attributes);
 80006da:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <main+0x10c>)
 80006dc:	2106      	movs	r1, #6
 80006de:	2001      	movs	r0, #1
 80006e0:	f003 f976 	bl	80039d0 <osMessageQueueNew>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <main+0x110>)
 80006e8:	601a      	str	r2, [r3, #0]

  /* creation of rawQueue */
  rawQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &rawQueue_attributes);
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <main+0x114>)
 80006ec:	2106      	movs	r1, #6
 80006ee:	2001      	movs	r0, #1
 80006f0:	f003 f96e 	bl	80039d0 <osMessageQueueNew>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x118>)
 80006f8:	601a      	str	r2, [r3, #0]

  /* creation of roomQueue */
  roomQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &roomQueue_attributes);
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <main+0x11c>)
 80006fc:	2102      	movs	r1, #2
 80006fe:	2001      	movs	r0, #1
 8000700:	f003 f966 	bl	80039d0 <osMessageQueueNew>
 8000704:	4602      	mov	r2, r0
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0x120>)
 8000708:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calcTask */
  calcTaskHandle = osThreadNew(StartCalcTask, NULL, &calcTask_attributes);
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <main+0x124>)
 800070c:	2100      	movs	r1, #0
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <main+0x128>)
 8000710:	f003 f886 	bl	8003820 <osThreadNew>
 8000714:	4602      	mov	r2, r0
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <main+0x12c>)
 8000718:	601a      	str	r2, [r3, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <main+0x130>)
 800071c:	2100      	movs	r1, #0
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <main+0x134>)
 8000720:	f003 f87e 	bl	8003820 <osThreadNew>
 8000724:	4602      	mov	r2, r0
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <main+0x138>)
 8000728:	601a      	str	r2, [r3, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartLcdTask, NULL, &lcdTask_attributes);
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <main+0x13c>)
 800072c:	2100      	movs	r1, #0
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <main+0x140>)
 8000730:	f003 f876 	bl	8003820 <osThreadNew>
 8000734:	4602      	mov	r2, r0
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <main+0x144>)
 8000738:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800073a:	f003 f83d 	bl	80037b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073e:	e7fe      	b.n	800073e <main+0xf2>
 8000740:	08006dc4 	.word	0x08006dc4
 8000744:	08006dcc 	.word	0x08006dcc
 8000748:	08006dd4 	.word	0x08006dd4
 800074c:	08006de0 	.word	0x08006de0
 8000750:	200019ec 	.word	0x200019ec
 8000754:	40011000 	.word	0x40011000
 8000758:	08006ed8 	.word	0x08006ed8
 800075c:	200019a8 	.word	0x200019a8
 8000760:	08006ef0 	.word	0x08006ef0
 8000764:	200019a4 	.word	0x200019a4
 8000768:	08006f08 	.word	0x08006f08
 800076c:	200019b4 	.word	0x200019b4
 8000770:	08006e6c 	.word	0x08006e6c
 8000774:	080009e9 	.word	0x080009e9
 8000778:	200019b0 	.word	0x200019b0
 800077c:	08006e90 	.word	0x08006e90
 8000780:	08000a85 	.word	0x08000a85
 8000784:	200019ac 	.word	0x200019ac
 8000788:	08006eb4 	.word	0x08006eb4
 800078c:	08000b1d 	.word	0x08000b1d
 8000790:	200019e8 	.word	0x200019e8

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	2228      	movs	r2, #40	; 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fec7 	bl	8006536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fdfb 	bl	80023d4 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80007e4:	f000 fa12 	bl	8000c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f002 f866 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800080e:	f000 f9fd 	bl	8000c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000812:	2302      	movs	r3, #2
 8000814:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fa25 	bl	8002c6c <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000828:	f000 f9f0 	bl	8000c0c <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_ADC1_Init+0x58>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_ADC1_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC1_Init+0x58>)
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ADC1_Init+0x58>)
 8000854:	2201      	movs	r2, #1
 8000856:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_ADC1_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_ADC1_Init+0x58>)
 8000860:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000864:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_ADC1_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_ADC1_Init+0x58>)
 800086e:	2201      	movs	r2, #1
 8000870:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_ADC1_Init+0x58>)
 8000874:	f000 ff08 	bl	8001688 <HAL_ADC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800087e:	f000 f9c5 	bl	8000c0c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200019b8 	.word	0x200019b8
 8000890:	40012400 	.word	0x40012400

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f002 fd8a 	bl	80033e4 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f999 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20001a14 	.word	0x20001a14
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <MX_GPIO_Init+0xf0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a35      	ldr	r2, [pc, #212]	; (80009d8 <MX_GPIO_Init+0xf0>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <MX_GPIO_Init+0xf0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_GPIO_Init+0xf0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <MX_GPIO_Init+0xf0>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_GPIO_Init+0xf0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_GPIO_Init+0xf0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <MX_GPIO_Init+0xf0>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_GPIO_Init+0xf0>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000944:	2200      	movs	r2, #0
 8000946:	21ff      	movs	r1, #255	; 0xff
 8000948:	4824      	ldr	r0, [pc, #144]	; (80009dc <MX_GPIO_Init+0xf4>)
 800094a:	f001 fd2a 	bl	80023a2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <MX_GPIO_Init+0xf8>)
 8000954:	f001 fd25 	bl	80023a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2123      	movs	r1, #35	; 0x23
 800095c:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_GPIO_Init+0xfc>)
 800095e:	f001 fd20 	bl	80023a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4619      	mov	r1, r3
 8000976:	4819      	ldr	r0, [pc, #100]	; (80009dc <MX_GPIO_Init+0xf4>)
 8000978:	f001 fba2 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800097c:	23ff      	movs	r3, #255	; 0xff
 800097e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2302      	movs	r3, #2
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	4812      	ldr	r0, [pc, #72]	; (80009dc <MX_GPIO_Init+0xf4>)
 8000994:	f001 fb94 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000998:	2320      	movs	r3, #32
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_GPIO_Init+0xf8>)
 80009b0:	f001 fb86 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80009b4:	2323      	movs	r3, #35	; 0x23
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_GPIO_Init+0xfc>)
 80009cc:	f001 fb78 	bl	80020c0 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40011000 	.word	0x40011000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <StartCalcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalcTask */
void StartCalcTask(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t data = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
	struct DataStruct dc;
	dc.temp = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	813b      	strh	r3, [r7, #8]
	dc.CO2 = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	817b      	strh	r3, [r7, #10]
	dc.dB = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		TEMP_Select();
 8000a00:	f000 fd5a 	bl	80014b8 <TEMP_Select>
		dc.temp = TempConversion(ADC_Read());
 8000a04:	f000 fdac 	bl	8001560 <ADC_Read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fd02 	bl	8001414 <TempConversion>
 8000a10:	4603      	mov	r3, r0
 8000a12:	813b      	strh	r3, [r7, #8]

		CO2_Select();
 8000a14:	f000 fd32 	bl	800147c <CO2_Select>
		dc.CO2 = CO2Conversion(ADC_Read());
 8000a18:	f000 fda2 	bl	8001560 <ADC_Read>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fcd8 	bl	80013d4 <CO2Conversion>
 8000a24:	4603      	mov	r3, r0
 8000a26:	817b      	strh	r3, [r7, #10]

		NOISE_Select();
 8000a28:	f000 fd62 	bl	80014f0 <NOISE_Select>
		dc.dB = NoiseConversion(ADC_Read());
 8000a2c:	f000 fd98 	bl	8001560 <ADC_Read>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fd00 	bl	8001438 <NoiseConversion>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	81bb      	strh	r3, [r7, #12]

//		dc.CO2 += 5;
//		dc.dB += 10;

		if(osMessageQueuePut(rawQueueHandle, &dc, 1U, 0U) != osOK)
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <StartCalcTask+0x94>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	f107 0108 	add.w	r1, r7, #8
 8000a44:	2300      	movs	r3, #0
 8000a46:	2201      	movs	r2, #1
 8000a48:	f003 f848 	bl	8003adc <osMessageQueuePut>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <StartCalcTask+0x6e>
		{
			Error_Handler();
 8000a52:	f000 f8db 	bl	8000c0c <Error_Handler>
		}

		//DataFormat()
		//OccupancyCalculation()

		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U) != osOK)
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <StartCalcTask+0x98>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	f107 0108 	add.w	r1, r7, #8
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2201      	movs	r2, #1
 8000a62:	f003 f83b 	bl	8003adc <osMessageQueuePut>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <StartCalcTask+0x88>
		{
			Error_Handler();
 8000a6c:	f000 f8ce 	bl	8000c0c <Error_Handler>
		}

		osDelay(500);
 8000a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a74:	f002 ff7e 	bl	8003974 <osDelay>
		TEMP_Select();
 8000a78:	e7c2      	b.n	8000a00 <StartCalcTask+0x18>
 8000a7a:	bf00      	nop
 8000a7c:	200019a4 	.word	0x200019a4
 8000a80:	200019a8 	.word	0x200019a8

08000a84 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint8_t data_str[40];
	struct DataStruct dc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <StartSendTask+0x88>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	f107 0108 	add.w	r1, r7, #8
 8000a94:	2300      	movs	r3, #0
 8000a96:	2200      	movs	r2, #0
 8000a98:	f003 f894 	bl	8003bc4 <osMessageQueueGet>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d12f      	bne.n	8000b02 <StartSendTask+0x7e>
		{
			sprintf((char *)data_str, "%d", dc.temp);
 8000aa2:	893b      	ldrh	r3, [r7, #8]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4919      	ldr	r1, [pc, #100]	; (8000b10 <StartSendTask+0x8c>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 fd4b 	bl	8006548 <siprintf>
			printString((char *)data_str);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fa1a 	bl	8000ef0 <printString>
			printString(" ");
 8000abc:	4815      	ldr	r0, [pc, #84]	; (8000b14 <StartSendTask+0x90>)
 8000abe:	f000 fa17 	bl	8000ef0 <printString>
			sprintf((char *)data_str, "%d", dc.CO2);
 8000ac2:	897b      	ldrh	r3, [r7, #10]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4911      	ldr	r1, [pc, #68]	; (8000b10 <StartSendTask+0x8c>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f005 fd3b 	bl	8006548 <siprintf>
			printString((char *)data_str);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fa0a 	bl	8000ef0 <printString>
			printString(" ");
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <StartSendTask+0x90>)
 8000ade:	f000 fa07 	bl	8000ef0 <printString>
			sprintf((char *)data_str, "%d", dc.dB);
 8000ae2:	89bb      	ldrh	r3, [r7, #12]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4909      	ldr	r1, [pc, #36]	; (8000b10 <StartSendTask+0x8c>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 fd2b 	bl	8006548 <siprintf>
			printString((char *)data_str);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f9fa 	bl	8000ef0 <printString>
			printString("\r\n");
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <StartSendTask+0x94>)
 8000afe:	f000 f9f7 	bl	8000ef0 <printString>
		}
		osDelay(1000);
 8000b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b06:	f002 ff35 	bl	8003974 <osDelay>
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000b0a:	e7bf      	b.n	8000a8c <StartSendTask+0x8>
 8000b0c:	200019a8 	.word	0x200019a8
 8000b10:	08006dec 	.word	0x08006dec
 8000b14:	08006df0 	.word	0x08006df0
 8000b18:	08006df4 	.word	0x08006df4

08000b1c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	uint8_t raw_str[40];
	uint16_t roomSz = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	87fb      	strh	r3, [r7, #62]	; 0x3e
	struct DataStruct rc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <StartLcdTask+0xb0>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	f107 010c 	add.w	r1, r7, #12
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	f003 f846 	bl	8003bc4 <osMessageQueueGet>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d141      	bne.n	8000bc2 <StartLcdTask+0xa6>
//				CMD2LCD(0x80);
//				char2LCD("rs:");
//				char2LCD((char *)raw_str);
//			}

			CMD2LCD(0x80);
 8000b3e:	2080      	movs	r0, #128	; 0x80
 8000b40:	f000 fa54 	bl	8000fec <CMD2LCD>
			char2LCD("rs:");
 8000b44:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <StartLcdTask+0xb4>)
 8000b46:	f000 fad1 	bl	80010ec <char2LCD>
			char2LCD((char *)room_str);
 8000b4a:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <StartLcdTask+0xb8>)
 8000b4c:	f000 face 	bl	80010ec <char2LCD>

			sprintf((char *)raw_str, "%d", rc.temp);
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	461a      	mov	r2, r3
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	491f      	ldr	r1, [pc, #124]	; (8000bd8 <StartLcdTask+0xbc>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 fcf4 	bl	8006548 <siprintf>
			CMD2LCD(0x89);
 8000b60:	2089      	movs	r0, #137	; 0x89
 8000b62:	f000 fa43 	bl	8000fec <CMD2LCD>
			char2LCD("tmp:");
 8000b66:	481d      	ldr	r0, [pc, #116]	; (8000bdc <StartLcdTask+0xc0>)
 8000b68:	f000 fac0 	bl	80010ec <char2LCD>
			char2LCD((char *)raw_str);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fabb 	bl	80010ec <char2LCD>

			sprintf((char *)raw_str, "%d", rc.CO2);
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <StartLcdTask+0xbc>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f005 fce1 	bl	8006548 <siprintf>
			CMD2LCD(0xC0);
 8000b86:	20c0      	movs	r0, #192	; 0xc0
 8000b88:	f000 fa30 	bl	8000fec <CMD2LCD>
			char2LCD("co2:");
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <StartLcdTask+0xc4>)
 8000b8e:	f000 faad 	bl	80010ec <char2LCD>
			char2LCD((char *)raw_str);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 faa8 	bl	80010ec <char2LCD>

			sprintf((char *)raw_str, "%d", rc.dB);
 8000b9c:	8a3b      	ldrh	r3, [r7, #16]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <StartLcdTask+0xbc>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fcce 	bl	8006548 <siprintf>
			CMD2LCD(0xC9);
 8000bac:	20c9      	movs	r0, #201	; 0xc9
 8000bae:	f000 fa1d 	bl	8000fec <CMD2LCD>
			char2LCD("nl:");
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <StartLcdTask+0xc8>)
 8000bb4:	f000 fa9a 	bl	80010ec <char2LCD>
			char2LCD((char *)raw_str);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fa95 	bl	80010ec <char2LCD>

		}
		osDelay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f002 fed6 	bl	8003974 <osDelay>
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000bc8:	e7ae      	b.n	8000b28 <StartLcdTask+0xc>
 8000bca:	bf00      	nop
 8000bcc:	200019a4 	.word	0x200019a4
 8000bd0:	08006df8 	.word	0x08006df8
 8000bd4:	200019ec 	.word	0x200019ec
 8000bd8:	08006dec 	.word	0x08006dec
 8000bdc:	08006dfc 	.word	0x08006dfc
 8000be0:	08006e04 	.word	0x08006e04
 8000be4:	08006e0c 	.word	0x08006e0c

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfa:	f000 fd07 	bl	800160c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40000800 	.word	0x40000800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x60>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_MspInit+0x60>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <HAL_ADC_MspInit+0x6c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d121      	bne.n	8000ce0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_MspInit+0x70>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <HAL_ADC_MspInit+0x70>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_ADC_MspInit+0x70>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_ADC_MspInit+0x70>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0x70>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_ADC_MspInit+0x70>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000ccc:	23d2      	movs	r3, #210	; 0xd2
 8000cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_ADC_MspInit+0x74>)
 8000cdc:	f001 f9f0 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40012400 	.word	0x40012400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x88>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d12f      	bne.n	8000d74 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1e:	61d3      	str	r3, [r2, #28]
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d44:	2304      	movs	r3, #4
 8000d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d58:	f001 f9b2 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d70:	f001 f9a6 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	201e      	movs	r0, #30
 8000d9e:	f001 f964 	bl	800206a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000da2:	201e      	movs	r0, #30
 8000da4:	f001 f97d 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_InitTick+0x9c>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_InitTick+0x9c>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	61d3      	str	r3, [r2, #28]
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_InitTick+0x9c>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc0:	f107 0210 	add.w	r2, r7, #16
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 ff00 	bl	8002bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dd0:	f001 fed6 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8000dd4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <HAL_InitTick+0xa0>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0c9b      	lsrs	r3, r3, #18
 8000de0:	3b01      	subs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_InitTick+0xa4>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_InitTick+0xa8>)
 8000de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_InitTick+0xa4>)
 8000dec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_InitTick+0xa4>)
 8000df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_InitTick+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_InitTick+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_InitTick+0xa4>)
 8000e06:	f002 f8a3 	bl	8002f50 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d104      	bne.n	8000e1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <HAL_InitTick+0xa4>)
 8000e12:	f002 f8f5 	bl	8003000 <HAL_TIM_Base_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3730      	adds	r7, #48	; 0x30
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	20001a54 	.word	0x20001a54
 8000e30:	40000800 	.word	0x40000800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <HardFault_Handler+0x4>

08000e46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <BusFault_Handler+0x4>

08000e52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <UsageFault_Handler+0x4>

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM4_IRQHandler+0x10>)
 8000e6a:	f002 f91b 	bl	80030a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20001a54 	.word	0x20001a54

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f005 fb10 	bl	80064cc <__errno>
 8000eac:	4602      	mov	r2, r0
 8000eae:	230c      	movs	r3, #12
 8000eb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20005000 	.word	0x20005000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	20000090 	.word	0x20000090
 8000ee0:	20001ae8 	.word	0x20001ae8

08000ee4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <printString>:
 */

#include "CommMod.h"

void printString(const char* mess)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	; 0x78
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef st;
	uint8_t cliBufferTX[100];

	while(huart2.gState == HAL_UART_STATE_BUSY_TX){}
 8000efc:	bf00      	nop
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <printString+0x70>)
 8000f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b21      	cmp	r3, #33	; 0x21
 8000f08:	d0f9      	beq.n	8000efe <printString+0xe>

	for(const char* p = mess; *p; ++p)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	673b      	str	r3, [r7, #112]	; 0x70
 8000f0e:	e00d      	b.n	8000f2c <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 8000f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f12:	7819      	ldrb	r1, [r3, #0]
 8000f14:	f107 0208 	add.w	r2, r7, #8
 8000f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f1a:	4413      	add	r3, r2
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
		i++;
 8000f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f22:	3301      	adds	r3, #1
 8000f24:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 8000f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f28:	3301      	adds	r3, #1
 8000f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8000f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ed      	bne.n	8000f10 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart2, cliBufferTX, i, 1000);
 8000f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f107 0108 	add.w	r1, r7, #8
 8000f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <printString+0x70>)
 8000f42:	f002 fa9c 	bl	800347e <HAL_UART_Transmit>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 8000f4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <printString+0x68>
	{
		Error_Handler();
 8000f54:	f7ff fe5a 	bl	8000c0c <Error_Handler>
	}

}
 8000f58:	bf00      	nop
 8000f5a:	3778      	adds	r7, #120	; 0x78
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20001a14 	.word	0x20001a14

08000f64 <roomSelect>:
 */

#include "UserInput.h"

char * roomSelect(uint16_t pot)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	if(pot < 0x555)
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	f240 5254 	movw	r2, #1364	; 0x554
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d801      	bhi.n	8000f7c <roomSelect+0x18>
	{
		return "ed435";
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <roomSelect+0x40>)
 8000f7a:	e00e      	b.n	8000f9a <roomSelect+0x36>
	}
	else if(pot < 0xAAA)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d801      	bhi.n	8000f8a <roomSelect+0x26>
	{
		return "ed486";
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <roomSelect+0x44>)
 8000f88:	e007      	b.n	8000f9a <roomSelect+0x36>
	}
	else if(pot < 0xFFF)
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d801      	bhi.n	8000f98 <roomSelect+0x34>
	{
		return "cl110";
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <roomSelect+0x48>)
 8000f96:	e000      	b.n	8000f9a <roomSelect+0x36>
	}
	else
	{
		return "err";
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <roomSelect+0x4c>)
	}
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	08006e10 	.word	0x08006e10
 8000fa8:	08006e18 	.word	0x08006e18
 8000fac:	08006e20 	.word	0x08006e20
 8000fb0:	08006e28 	.word	0x08006e28

08000fb4 <lcd_IO_init>:
#include "stm32f1xx.h"
#include "lcd.h"


void lcd_IO_init (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

	//Enable peripheral clocks for ports B and C

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <lcd_IO_init+0x28>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <lcd_IO_init+0x28>)
 8000fbe:	f043 0318 	orr.w	r3, r3, #24
 8000fc2:	6193      	str	r3, [r2, #24]

	//Set the config and mode bits for Port B bit 0, 1, and 5 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOB->CRL = 0x44344433;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <lcd_IO_init+0x2c>)
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <lcd_IO_init+0x30>)
 8000fc8:	601a      	str	r2, [r3, #0]

	//Set the config and mode bits for Port C bits 7 down to 0 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOC->CRL = 0x33333333;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <lcd_IO_init+0x34>)
 8000fcc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000fd0:	601a      	str	r2, [r3, #0]

}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	44344433 	.word	0x44344433
 8000fe8:	40011000 	.word	0x40011000

08000fec <CMD2LCD>:

void CMD2LCD(uint8_t data)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = LCD_CM_ENA;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <CMD2LCD+0x44>)
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <CMD2LCD+0x48>)
 8000ffa:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <CMD2LCD+0x4c>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <CMD2LCD+0x4c>)
 8001002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001006:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <CMD2LCD+0x4c>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	490a      	ldr	r1, [pc, #40]	; (8001038 <CMD2LCD+0x4c>)
 8001010:	4313      	orrs	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]

	HAL_Delay(2);
 8001014:	2002      	movs	r0, #2
 8001016:	f000 fb15 	bl	8001644 <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_CM_DIS;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <CMD2LCD+0x44>)
 800101c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001020:	611a      	str	r2, [r3, #16]

	HAL_Delay(14);
 8001022:	200e      	movs	r0, #14
 8001024:	f000 fb0e 	bl	8001644 <HAL_Delay>
	//delay(80000);

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010c00 	.word	0x40010c00
 8001034:	00210002 	.word	0x00210002
 8001038:	40011000 	.word	0x40011000

0800103c <lcd_init>:

void lcd_init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	for(int j = 0; j < 3; j++)
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	e008      	b.n	800105a <lcd_init+0x1e>
	{
		CMD2LCD(0X38);
 8001048:	2038      	movs	r0, #56	; 0x38
 800104a:	f7ff ffcf 	bl	8000fec <CMD2LCD>
		HAL_Delay(5);
 800104e:	2005      	movs	r0, #5
 8001050:	f000 faf8 	bl	8001644 <HAL_Delay>
	for(int j = 0; j < 3; j++)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	ddf3      	ble.n	8001048 <lcd_init+0xc>
		//delay(24600);
	}

	CMD2LCD(0X38);
 8001060:	2038      	movs	r0, #56	; 0x38
 8001062:	f7ff ffc3 	bl	8000fec <CMD2LCD>
	HAL_Delay(5);
 8001066:	2005      	movs	r0, #5
 8001068:	f000 faec 	bl	8001644 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X0F);
 800106c:	200f      	movs	r0, #15
 800106e:	f7ff ffbd 	bl	8000fec <CMD2LCD>
	HAL_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f000 fae6 	bl	8001644 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X01);
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff ffb7 	bl	8000fec <CMD2LCD>
	HAL_Delay(5);
 800107e:	2005      	movs	r0, #5
 8001080:	f000 fae0 	bl	8001644 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X06);
 8001084:	2006      	movs	r0, #6
 8001086:	f7ff ffb1 	bl	8000fec <CMD2LCD>
	HAL_Delay(5);
 800108a:	2005      	movs	r0, #5
 800108c:	f000 fada 	bl	8001644 <HAL_Delay>
	//delay(24600);

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <DAT2LCD>:

void DAT2LCD(uint8_t data)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = LCD_DM_ENA;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <DAT2LCD+0x44>)
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <DAT2LCD+0x48>)
 80010a6:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <DAT2LCD+0x4c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <DAT2LCD+0x4c>)
 80010ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010b2:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <DAT2LCD+0x4c>)
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	490a      	ldr	r1, [pc, #40]	; (80010e4 <DAT2LCD+0x4c>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
	HAL_Delay(2);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f000 fabf 	bl	8001644 <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_DM_DIS;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <DAT2LCD+0x44>)
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <DAT2LCD+0x50>)
 80010ca:	611a      	str	r2, [r3, #16]
	HAL_Delay(14);
 80010cc:	200e      	movs	r0, #14
 80010ce:	f000 fab9 	bl	8001644 <HAL_Delay>
	//delay(80000);

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	00200003 	.word	0x00200003
 80010e4:	40011000 	.word	0x40011000
 80010e8:	00220001 	.word	0x00220001

080010ec <char2LCD>:
		break;
	}
}

void char2LCD(char * val)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	//toLower()

	int i = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 80010f8:	e160      	b.n	80013bc <char2LCD+0x2d0>
	{
		switch(val[i]){
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3b20      	subs	r3, #32
 8001104:	2b5a      	cmp	r3, #90	; 0x5a
 8001106:	f200 8155 	bhi.w	80013b4 <char2LCD+0x2c8>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <char2LCD+0x24>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	0800139d 	.word	0x0800139d
 8001114:	080013b5 	.word	0x080013b5
 8001118:	080013b5 	.word	0x080013b5
 800111c:	080013b5 	.word	0x080013b5
 8001120:	080013b5 	.word	0x080013b5
 8001124:	080013b5 	.word	0x080013b5
 8001128:	080013b5 	.word	0x080013b5
 800112c:	080013b5 	.word	0x080013b5
 8001130:	080013b5 	.word	0x080013b5
 8001134:	080013b5 	.word	0x080013b5
 8001138:	080013b5 	.word	0x080013b5
 800113c:	080013b5 	.word	0x080013b5
 8001140:	080013b5 	.word	0x080013b5
 8001144:	080013b5 	.word	0x080013b5
 8001148:	080013a5 	.word	0x080013a5
 800114c:	080013b5 	.word	0x080013b5
 8001150:	0800127d 	.word	0x0800127d
 8001154:	08001285 	.word	0x08001285
 8001158:	0800128d 	.word	0x0800128d
 800115c:	08001295 	.word	0x08001295
 8001160:	0800129d 	.word	0x0800129d
 8001164:	080012a5 	.word	0x080012a5
 8001168:	080012ad 	.word	0x080012ad
 800116c:	080012b5 	.word	0x080012b5
 8001170:	080012bd 	.word	0x080012bd
 8001174:	080012c5 	.word	0x080012c5
 8001178:	080013ad 	.word	0x080013ad
 800117c:	080013b5 	.word	0x080013b5
 8001180:	080013b5 	.word	0x080013b5
 8001184:	080013b5 	.word	0x080013b5
 8001188:	080013b5 	.word	0x080013b5
 800118c:	080013b5 	.word	0x080013b5
 8001190:	080013b5 	.word	0x080013b5
 8001194:	080013b5 	.word	0x080013b5
 8001198:	080013b5 	.word	0x080013b5
 800119c:	080013b5 	.word	0x080013b5
 80011a0:	080013b5 	.word	0x080013b5
 80011a4:	080013b5 	.word	0x080013b5
 80011a8:	080013b5 	.word	0x080013b5
 80011ac:	080013b5 	.word	0x080013b5
 80011b0:	080013b5 	.word	0x080013b5
 80011b4:	080013b5 	.word	0x080013b5
 80011b8:	080013b5 	.word	0x080013b5
 80011bc:	080013b5 	.word	0x080013b5
 80011c0:	080013b5 	.word	0x080013b5
 80011c4:	080013b5 	.word	0x080013b5
 80011c8:	080013b5 	.word	0x080013b5
 80011cc:	080013b5 	.word	0x080013b5
 80011d0:	080013b5 	.word	0x080013b5
 80011d4:	080013b5 	.word	0x080013b5
 80011d8:	080013b5 	.word	0x080013b5
 80011dc:	080013b5 	.word	0x080013b5
 80011e0:	080013b5 	.word	0x080013b5
 80011e4:	080013b5 	.word	0x080013b5
 80011e8:	080013b5 	.word	0x080013b5
 80011ec:	080013b5 	.word	0x080013b5
 80011f0:	080013b5 	.word	0x080013b5
 80011f4:	080013b5 	.word	0x080013b5
 80011f8:	080013b5 	.word	0x080013b5
 80011fc:	080013b5 	.word	0x080013b5
 8001200:	080013b5 	.word	0x080013b5
 8001204:	080013b5 	.word	0x080013b5
 8001208:	080013b5 	.word	0x080013b5
 800120c:	080013b5 	.word	0x080013b5
 8001210:	080013b5 	.word	0x080013b5
 8001214:	080012cd 	.word	0x080012cd
 8001218:	080012d5 	.word	0x080012d5
 800121c:	080012dd 	.word	0x080012dd
 8001220:	080012e5 	.word	0x080012e5
 8001224:	080012ed 	.word	0x080012ed
 8001228:	080012f5 	.word	0x080012f5
 800122c:	080012fd 	.word	0x080012fd
 8001230:	08001305 	.word	0x08001305
 8001234:	0800130d 	.word	0x0800130d
 8001238:	08001315 	.word	0x08001315
 800123c:	0800131d 	.word	0x0800131d
 8001240:	08001325 	.word	0x08001325
 8001244:	0800132d 	.word	0x0800132d
 8001248:	08001335 	.word	0x08001335
 800124c:	0800133d 	.word	0x0800133d
 8001250:	08001345 	.word	0x08001345
 8001254:	0800134d 	.word	0x0800134d
 8001258:	08001355 	.word	0x08001355
 800125c:	0800135d 	.word	0x0800135d
 8001260:	08001365 	.word	0x08001365
 8001264:	0800136d 	.word	0x0800136d
 8001268:	08001375 	.word	0x08001375
 800126c:	0800137d 	.word	0x0800137d
 8001270:	08001385 	.word	0x08001385
 8001274:	0800138d 	.word	0x0800138d
 8001278:	08001395 	.word	0x08001395
		case '0':
			DAT2LCD(0x30);
 800127c:	2030      	movs	r0, #48	; 0x30
 800127e:	f7ff ff0b 	bl	8001098 <DAT2LCD>
			break;
 8001282:	e098      	b.n	80013b6 <char2LCD+0x2ca>

		case '1':
			DAT2LCD(0x31);
 8001284:	2031      	movs	r0, #49	; 0x31
 8001286:	f7ff ff07 	bl	8001098 <DAT2LCD>
			break;
 800128a:	e094      	b.n	80013b6 <char2LCD+0x2ca>

		case '2':
			DAT2LCD(0x32);
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f7ff ff03 	bl	8001098 <DAT2LCD>
			break;
 8001292:	e090      	b.n	80013b6 <char2LCD+0x2ca>

		case '3':
			DAT2LCD(0x33);
 8001294:	2033      	movs	r0, #51	; 0x33
 8001296:	f7ff feff 	bl	8001098 <DAT2LCD>
			break;
 800129a:	e08c      	b.n	80013b6 <char2LCD+0x2ca>

		case '4':
			DAT2LCD(0x34);
 800129c:	2034      	movs	r0, #52	; 0x34
 800129e:	f7ff fefb 	bl	8001098 <DAT2LCD>
			break;
 80012a2:	e088      	b.n	80013b6 <char2LCD+0x2ca>

		case '5':
			DAT2LCD(0x35);
 80012a4:	2035      	movs	r0, #53	; 0x35
 80012a6:	f7ff fef7 	bl	8001098 <DAT2LCD>
			break;
 80012aa:	e084      	b.n	80013b6 <char2LCD+0x2ca>

		case '6':
			DAT2LCD(0x36);
 80012ac:	2036      	movs	r0, #54	; 0x36
 80012ae:	f7ff fef3 	bl	8001098 <DAT2LCD>
			break;
 80012b2:	e080      	b.n	80013b6 <char2LCD+0x2ca>

		case '7':
			DAT2LCD(0x37);
 80012b4:	2037      	movs	r0, #55	; 0x37
 80012b6:	f7ff feef 	bl	8001098 <DAT2LCD>
			break;
 80012ba:	e07c      	b.n	80013b6 <char2LCD+0x2ca>

		case '8':
			DAT2LCD(0x38);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f7ff feeb 	bl	8001098 <DAT2LCD>
			break;
 80012c2:	e078      	b.n	80013b6 <char2LCD+0x2ca>

		case '9':
			DAT2LCD(0x39);
 80012c4:	2039      	movs	r0, #57	; 0x39
 80012c6:	f7ff fee7 	bl	8001098 <DAT2LCD>
			break;
 80012ca:	e074      	b.n	80013b6 <char2LCD+0x2ca>

		case 'a':
			DAT2LCD(0x41);
 80012cc:	2041      	movs	r0, #65	; 0x41
 80012ce:	f7ff fee3 	bl	8001098 <DAT2LCD>
			break;
 80012d2:	e070      	b.n	80013b6 <char2LCD+0x2ca>

		case 'b':
			DAT2LCD(0x42);
 80012d4:	2042      	movs	r0, #66	; 0x42
 80012d6:	f7ff fedf 	bl	8001098 <DAT2LCD>
			break;
 80012da:	e06c      	b.n	80013b6 <char2LCD+0x2ca>

		case 'c':
			DAT2LCD(0x43);
 80012dc:	2043      	movs	r0, #67	; 0x43
 80012de:	f7ff fedb 	bl	8001098 <DAT2LCD>
			break;
 80012e2:	e068      	b.n	80013b6 <char2LCD+0x2ca>

		case 'd':
			DAT2LCD(0x44);
 80012e4:	2044      	movs	r0, #68	; 0x44
 80012e6:	f7ff fed7 	bl	8001098 <DAT2LCD>
			break;
 80012ea:	e064      	b.n	80013b6 <char2LCD+0x2ca>

		case 'e':
			DAT2LCD(0x45);
 80012ec:	2045      	movs	r0, #69	; 0x45
 80012ee:	f7ff fed3 	bl	8001098 <DAT2LCD>
			break;
 80012f2:	e060      	b.n	80013b6 <char2LCD+0x2ca>

		case 'f':
			DAT2LCD(0x46);
 80012f4:	2046      	movs	r0, #70	; 0x46
 80012f6:	f7ff fecf 	bl	8001098 <DAT2LCD>
			break;
 80012fa:	e05c      	b.n	80013b6 <char2LCD+0x2ca>

		case 'g':
			DAT2LCD(0x47);
 80012fc:	2047      	movs	r0, #71	; 0x47
 80012fe:	f7ff fecb 	bl	8001098 <DAT2LCD>
			break;
 8001302:	e058      	b.n	80013b6 <char2LCD+0x2ca>

		case 'h':
			DAT2LCD(0x48);
 8001304:	2048      	movs	r0, #72	; 0x48
 8001306:	f7ff fec7 	bl	8001098 <DAT2LCD>
			break;
 800130a:	e054      	b.n	80013b6 <char2LCD+0x2ca>

		case 'i':
			DAT2LCD(0x49);
 800130c:	2049      	movs	r0, #73	; 0x49
 800130e:	f7ff fec3 	bl	8001098 <DAT2LCD>
			break;
 8001312:	e050      	b.n	80013b6 <char2LCD+0x2ca>

		case 'j':
			DAT2LCD(0x4A);
 8001314:	204a      	movs	r0, #74	; 0x4a
 8001316:	f7ff febf 	bl	8001098 <DAT2LCD>
			break;
 800131a:	e04c      	b.n	80013b6 <char2LCD+0x2ca>

		case 'k':
			DAT2LCD(0x4B);
 800131c:	204b      	movs	r0, #75	; 0x4b
 800131e:	f7ff febb 	bl	8001098 <DAT2LCD>
			break;
 8001322:	e048      	b.n	80013b6 <char2LCD+0x2ca>

		case 'l':
			DAT2LCD(0x4C);
 8001324:	204c      	movs	r0, #76	; 0x4c
 8001326:	f7ff feb7 	bl	8001098 <DAT2LCD>
			break;
 800132a:	e044      	b.n	80013b6 <char2LCD+0x2ca>

		case 'm':
			DAT2LCD(0x4D);
 800132c:	204d      	movs	r0, #77	; 0x4d
 800132e:	f7ff feb3 	bl	8001098 <DAT2LCD>
			break;
 8001332:	e040      	b.n	80013b6 <char2LCD+0x2ca>

		case 'n':
			DAT2LCD(0x4E);
 8001334:	204e      	movs	r0, #78	; 0x4e
 8001336:	f7ff feaf 	bl	8001098 <DAT2LCD>
			break;
 800133a:	e03c      	b.n	80013b6 <char2LCD+0x2ca>

		case 'o':
			DAT2LCD(0x4F);
 800133c:	204f      	movs	r0, #79	; 0x4f
 800133e:	f7ff feab 	bl	8001098 <DAT2LCD>
			break;
 8001342:	e038      	b.n	80013b6 <char2LCD+0x2ca>

		case 'p':
			DAT2LCD(0x50);
 8001344:	2050      	movs	r0, #80	; 0x50
 8001346:	f7ff fea7 	bl	8001098 <DAT2LCD>
			break;
 800134a:	e034      	b.n	80013b6 <char2LCD+0x2ca>

		case 'q':
			DAT2LCD(0x51);
 800134c:	2051      	movs	r0, #81	; 0x51
 800134e:	f7ff fea3 	bl	8001098 <DAT2LCD>
			break;
 8001352:	e030      	b.n	80013b6 <char2LCD+0x2ca>

		case 'r':
			DAT2LCD(0x52);
 8001354:	2052      	movs	r0, #82	; 0x52
 8001356:	f7ff fe9f 	bl	8001098 <DAT2LCD>
			break;
 800135a:	e02c      	b.n	80013b6 <char2LCD+0x2ca>

		case 's':
			DAT2LCD(0x53);
 800135c:	2053      	movs	r0, #83	; 0x53
 800135e:	f7ff fe9b 	bl	8001098 <DAT2LCD>
			break;
 8001362:	e028      	b.n	80013b6 <char2LCD+0x2ca>

		case 't':
			DAT2LCD(0x54);
 8001364:	2054      	movs	r0, #84	; 0x54
 8001366:	f7ff fe97 	bl	8001098 <DAT2LCD>
			break;
 800136a:	e024      	b.n	80013b6 <char2LCD+0x2ca>

		case 'u':
			DAT2LCD(0x55);
 800136c:	2055      	movs	r0, #85	; 0x55
 800136e:	f7ff fe93 	bl	8001098 <DAT2LCD>
			break;
 8001372:	e020      	b.n	80013b6 <char2LCD+0x2ca>

		case 'v':
			DAT2LCD(0x56);
 8001374:	2056      	movs	r0, #86	; 0x56
 8001376:	f7ff fe8f 	bl	8001098 <DAT2LCD>
			break;
 800137a:	e01c      	b.n	80013b6 <char2LCD+0x2ca>

		case 'w':
			DAT2LCD(0x57);
 800137c:	2057      	movs	r0, #87	; 0x57
 800137e:	f7ff fe8b 	bl	8001098 <DAT2LCD>
			break;
 8001382:	e018      	b.n	80013b6 <char2LCD+0x2ca>

		case 'x':
			DAT2LCD(0x58);
 8001384:	2058      	movs	r0, #88	; 0x58
 8001386:	f7ff fe87 	bl	8001098 <DAT2LCD>
			break;
 800138a:	e014      	b.n	80013b6 <char2LCD+0x2ca>

		case 'y':
			DAT2LCD(0x59);
 800138c:	2059      	movs	r0, #89	; 0x59
 800138e:	f7ff fe83 	bl	8001098 <DAT2LCD>
			break;
 8001392:	e010      	b.n	80013b6 <char2LCD+0x2ca>

		case 'z':
			DAT2LCD(0x5A);
 8001394:	205a      	movs	r0, #90	; 0x5a
 8001396:	f7ff fe7f 	bl	8001098 <DAT2LCD>
			break;
 800139a:	e00c      	b.n	80013b6 <char2LCD+0x2ca>

		case ' ':
			DAT2LCD(0x20);
 800139c:	2020      	movs	r0, #32
 800139e:	f7ff fe7b 	bl	8001098 <DAT2LCD>
			break;
 80013a2:	e008      	b.n	80013b6 <char2LCD+0x2ca>

		case '.':
			DAT2LCD(0x2E);
 80013a4:	202e      	movs	r0, #46	; 0x2e
 80013a6:	f7ff fe77 	bl	8001098 <DAT2LCD>
			break;
 80013aa:	e004      	b.n	80013b6 <char2LCD+0x2ca>

		case ':':
			DAT2LCD(0x3A);
 80013ac:	203a      	movs	r0, #58	; 0x3a
 80013ae:	f7ff fe73 	bl	8001098 <DAT2LCD>
			break;
 80013b2:	e000      	b.n	80013b6 <char2LCD+0x2ca>

		default:
			break;
 80013b4:	bf00      	nop
		}
		i++;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f ae98 	bne.w	80010fa <char2LCD+0xe>
	}
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <CO2Conversion>:

#include "sensors.h"


uint16_t CO2Conversion(uint32_t input)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 if(input == 0)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <CO2Conversion+0x12>
 {
  return 0; /*this should print fault*/
 80013e2:	2300      	movs	r3, #0
 80013e4:	e010      	b.n	8001408 <CO2Conversion+0x34>
 }
 else if((input) < 400)  /*preheating voltage is from 0.2 to 0.4 */
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013ec:	d202      	bcs.n	80013f4 <CO2Conversion+0x20>
 {
  return -1; /* this should print "preheating CO2"*/
 80013ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f2:	e009      	b.n	8001408 <CO2Conversion+0x34>
 }
 else 
 {
  uint16_t voltagedif = (input - 400) * 50 / 16; /*this is for voltage to PPM conversion*/
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2232      	movs	r2, #50	; 0x32
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8001400:	3b20      	subs	r3, #32
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	81fb      	strh	r3, [r7, #14]
  return voltagedif;
 8001406:	89fb      	ldrh	r3, [r7, #14]
  }
 /*CO2 has a 100ms delay before looping*/
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <TempConversion>:

uint16_t TempConversion(uint32_t input)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  return input / 10;   /* voltage to degree celsius conversion*/
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <TempConversion+0x20>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	b29b      	uxth	r3, r3
  /* has an 500ms delay before looping*/
 }
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	cccccccd 	.word	0xcccccccd

08001438 <NoiseConversion>:

uint16_t NoiseConversion(uint32_t input)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 uint16_t PinVoltage;
//  PinVoltage = (input) / 1024.0 * 5.0;   /* 5.0 is voltage that is powering sensor */
//  return PinVoltage * 50.0; /* 50.0 is voltage to dB conversion value */
 /* has an 125ms delay before looping*/

input = (float)input / 1000 * 50;
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7fe ff3b 	bl	80002bc <__aeabi_ui2f>
 8001446:	4603      	mov	r3, r0
 8001448:	490a      	ldr	r1, [pc, #40]	; (8001474 <NoiseConversion+0x3c>)
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f842 	bl	80004d4 <__aeabi_fdiv>
 8001450:	4603      	mov	r3, r0
 8001452:	4909      	ldr	r1, [pc, #36]	; (8001478 <NoiseConversion+0x40>)
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ff89 	bl	800036c <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f8d5 	bl	800060c <__aeabi_f2uiz>
 8001462:	4603      	mov	r3, r0
 8001464:	607b      	str	r3, [r7, #4]

// input = input - 600;
// input /= 20;
// input += 30;
 return input;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	b29b      	uxth	r3, r3

}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	447a0000 	.word	0x447a0000
 8001478:	42480000 	.word	0x42480000

0800147c <CO2_Select>:

void CO2_Select(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 800148c:	2301      	movs	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	2301      	movs	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <CO2_Select+0x38>)
 800149e:	f000 fbab 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <CO2_Select+0x30>
	{
		Error_Handler();
 80014a8:	f7ff fbb0 	bl	8000c0c <Error_Handler>
	}
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200019b8 	.word	0x200019b8

080014b8 <TEMP_Select>:

void TEMP_Select(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 80014c8:	2304      	movs	r3, #4
 80014ca:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <TEMP_Select+0x34>)
 80014d6:	f000 fb8f 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <TEMP_Select+0x2c>
	{
		Error_Handler();
 80014e0:	f7ff fb94 	bl	8000c0c <Error_Handler>
	}
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200019b8 	.word	0x200019b8

080014f0 <NOISE_Select>:

void NOISE_Select(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_6;
 8001500:	2306      	movs	r3, #6
 8001502:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001504:	2301      	movs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <NOISE_Select+0x34>)
 800150e:	f000 fb73 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <NOISE_Select+0x2c>
	{
		Error_Handler();
 8001518:	f7ff fb78 	bl	8000c0c <Error_Handler>
	}
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200019b8 	.word	0x200019b8

08001528 <POT_Select>:

void POT_Select(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_7;
 8001538:	2307      	movs	r3, #7
 800153a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <POT_Select+0x34>)
 8001546:	f000 fb57 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <POT_Select+0x2c>
	{
		Error_Handler();
 8001550:	f7ff fb5c 	bl	8000c0c <Error_Handler>
	}
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200019b8 	.word	0x200019b8

08001560 <ADC_Read>:

uint32_t ADC_Read(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	uint32_t temp;
	HAL_ADC_Start(&hadc1);
 8001566:	480a      	ldr	r0, [pc, #40]	; (8001590 <ADC_Read+0x30>)
 8001568:	f000 f966 	bl	8001838 <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 1000);
 800156c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001570:	4807      	ldr	r0, [pc, #28]	; (8001590 <ADC_Read+0x30>)
 8001572:	f000 fa3b 	bl	80019ec <HAL_ADC_PollForConversion>
	temp = HAL_ADC_GetValue(&hadc1);
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <ADC_Read+0x30>)
 8001578:	f000 fb32 	bl	8001be0 <HAL_ADC_GetValue>
 800157c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800157e:	4804      	ldr	r0, [pc, #16]	; (8001590 <ADC_Read+0x30>)
 8001580:	f000 fa08 	bl	8001994 <HAL_ADC_Stop>
	return temp;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200019b8 	.word	0x200019b8

08001594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001594:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001596:	e003      	b.n	80015a0 <LoopCopyDataInit>

08001598 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800159a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800159c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800159e:	3104      	adds	r1, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015a8:	d3f6      	bcc.n	8001598 <CopyDataInit>
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015ac:	e002      	b.n	80015b4 <LoopFillZerobss>

080015ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015b0:	f842 3b04 	str.w	r3, [r2], #4

080015b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015b8:	d3f9      	bcc.n	80015ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ba:	f7ff fc93 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f004 ff8b 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f7ff f843 	bl	800064c <main>
  bx lr
 80015c6:	4770      	bx	lr
  ldr r3, =_sidata
 80015c8:	08006f74 	.word	0x08006f74
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015d0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80015d4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80015d8:	20001ae4 	.word	0x20001ae4

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 fd2f 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fbc6 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fb0c 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x20>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_IncTick+0x20>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000008 	.word	0x20000008
 800162c:	20001a9c 	.word	0x20001a9c

08001630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <HAL_GetTick+0x10>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20001a9c 	.word	0x20001a9c

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff fff0 	bl	8001630 <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_Delay+0x40>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffe0 	bl	8001630 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000008 	.word	0x20000008

08001688 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0be      	b.n	8001828 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fad8 	bl	8000c7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fbdd 	bl	8001e8c <ADC_ConversionStop_Disable>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 8099 	bne.w	8001816 <HAL_ADC_Init+0x18e>
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 8095 	bne.w	8001816 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f4:	f023 0302 	bic.w	r3, r3, #2
 80016f8:	f043 0202 	orr.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001708:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7b1b      	ldrb	r3, [r3, #12]
 800170e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001710:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4313      	orrs	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001720:	d003      	beq.n	800172a <HAL_ADC_Init+0xa2>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d102      	bne.n	8001730 <HAL_ADC_Init+0xa8>
 800172a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172e:	e000      	b.n	8001732 <HAL_ADC_Init+0xaa>
 8001730:	2300      	movs	r3, #0
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7d1b      	ldrb	r3, [r3, #20]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d119      	bne.n	8001774 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7b1b      	ldrb	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	3b01      	subs	r3, #1
 800174e:	035a      	lsls	r2, r3, #13
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e00b      	b.n	8001774 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_ADC_Init+0x1a8>)
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	430b      	orrs	r3, r1
 800179a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_Init+0x126>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d104      	bne.n	80017b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	051b      	lsls	r3, r3, #20
 80017b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_ADC_Init+0x1ac>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d10b      	bne.n	80017f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f2:	e018      	b.n	8001826 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f023 0312 	bic.w	r3, r3, #18
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001814:	e007      	b.n	8001826 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	ffe1f7fd 	.word	0xffe1f7fd
 8001834:	ff1f0efe 	.word	0xff1f0efe

08001838 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Start+0x1a>
 800184e:	2302      	movs	r3, #2
 8001850:	e098      	b.n	8001984 <HAL_ADC_Start+0x14c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fac4 	bl	8001de8 <ADC_Enable>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 8087 	bne.w	800197a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a41      	ldr	r2, [pc, #260]	; (800198c <HAL_ADC_Start+0x154>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d105      	bne.n	8001896 <HAL_ADC_Start+0x5e>
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_ADC_Start+0x158>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d026      	beq.n	80018fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c0:	e01d      	b.n	80018fe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_ADC_Start+0x158>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_ADC_Start+0xaa>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2b      	ldr	r2, [pc, #172]	; (800198c <HAL_ADC_Start+0x154>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10d      	bne.n	80018fe <HAL_ADC_Start+0xc6>
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_ADC_Start+0x158>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f023 0206 	bic.w	r2, r3, #6
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
 8001916:	e002      	b.n	800191e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f06f 0202 	mvn.w	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800193a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800193e:	d113      	bne.n	8001968 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_ADC_Start+0x154>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d105      	bne.n	8001956 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_ADC_Start+0x158>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	e00c      	b.n	8001982 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e003      	b.n	8001982 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40012800 	.word	0x40012800
 8001990:	40012400 	.word	0x40012400

08001994 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Stop+0x1a>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e01a      	b.n	80019e4 <HAL_ADC_Stop+0x50>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fa68 	bl	8001e8c <ADC_ConversionStop_Disable>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a02:	f7ff fe15 	bl	8001630 <HAL_GetTick>
 8001a06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f043 0220 	orr.w	r2, r3, #32
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0c8      	b.n	8001bc0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d12a      	bne.n	8001a92 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d123      	bne.n	8001a92 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a4a:	e01a      	b.n	8001a82 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a52:	d016      	beq.n	8001a82 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_ADC_PollForConversion+0x7e>
 8001a5a:	f7ff fde9 	bl	8001630 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d20b      	bcs.n	8001a82 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	f043 0204 	orr.w	r2, r3, #4
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e09e      	b.n	8001bc0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0dd      	beq.n	8001a4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a90:	e06c      	b.n	8001b6c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_ADC_PollForConversion+0x1dc>)
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	2002      	movs	r0, #2
 8001a98:	f001 f99e 	bl	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6919      	ldr	r1, [r3, #16]
 8001aa8:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <HAL_ADC_PollForConversion+0x1e0>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d118      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0xf6>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68d9      	ldr	r1, [r3, #12]
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_ADC_PollForConversion+0x1e4>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d111      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0xf6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_ADC_PollForConversion+0x1e8>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d108      	bne.n	8001ade <HAL_ADC_PollForConversion+0xf2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_ADC_PollForConversion+0x1ec>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_PollForConversion+0xf2>
 8001ada:	2314      	movs	r3, #20
 8001adc:	e020      	b.n	8001b20 <HAL_ADC_PollForConversion+0x134>
 8001ade:	2329      	movs	r3, #41	; 0x29
 8001ae0:	e01e      	b.n	8001b20 <HAL_ADC_PollForConversion+0x134>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6919      	ldr	r1, [r3, #16]
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_ADC_PollForConversion+0x1e8>)
 8001aea:	400b      	ands	r3, r1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d106      	bne.n	8001afe <HAL_ADC_PollForConversion+0x112>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68d9      	ldr	r1, [r3, #12]
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_ADC_PollForConversion+0x1ec>)
 8001af8:	400b      	ands	r3, r1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_ADC_PollForConversion+0x12e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6919      	ldr	r1, [r3, #16]
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_ADC_PollForConversion+0x1f0>)
 8001b06:	400b      	ands	r3, r1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <HAL_ADC_PollForConversion+0x132>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_ADC_PollForConversion+0x1f0>)
 8001b14:	400b      	ands	r3, r1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_PollForConversion+0x132>
 8001b1a:	2354      	movs	r3, #84	; 0x54
 8001b1c:	e000      	b.n	8001b20 <HAL_ADC_PollForConversion+0x134>
 8001b1e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b26:	e01d      	b.n	8001b64 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b2e:	d016      	beq.n	8001b5e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_ADC_PollForConversion+0x15a>
 8001b36:	f7ff fd7b 	bl	8001630 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d20b      	bcs.n	8001b5e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f043 0204 	orr.w	r2, r3, #4
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e030      	b.n	8001bc0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8dd      	bhi.n	8001b28 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0212 	mvn.w	r2, #18
 8001b74:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b90:	d115      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d111      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	24924924 	.word	0x24924924
 8001bd0:	00924924 	.word	0x00924924
 8001bd4:	12492492 	.word	0x12492492
 8001bd8:	00492492 	.word	0x00492492
 8001bdc:	00249249 	.word	0x00249249

08001be0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x20>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0dc      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1da>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b06      	cmp	r3, #6
 8001c26:	d81c      	bhi.n	8001c62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3b05      	subs	r3, #5
 8001c3a:	221f      	movs	r2, #31
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4019      	ands	r1, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3b05      	subs	r3, #5
 8001c54:	fa00 f203 	lsl.w	r2, r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c60:	e03c      	b.n	8001cdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d81c      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b23      	subs	r3, #35	; 0x23
 8001c7c:	221f      	movs	r2, #31
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4019      	ands	r1, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b23      	subs	r3, #35	; 0x23
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca2:	e01b      	b.n	8001cdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b41      	subs	r3, #65	; 0x41
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4019      	ands	r1, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b41      	subs	r3, #65	; 0x41
 8001cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d91c      	bls.n	8001d1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68d9      	ldr	r1, [r3, #12]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b1e      	subs	r3, #30
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4019      	ands	r1, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6898      	ldr	r0, [r3, #8]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b1e      	subs	r3, #30
 8001d10:	fa00 f203 	lsl.w	r2, r0, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	e019      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6919      	ldr	r1, [r3, #16]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2207      	movs	r2, #7
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4019      	ands	r1, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6898      	ldr	r0, [r3, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d003      	beq.n	8001d62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d5e:	2b11      	cmp	r3, #17
 8001d60:	d132      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_ADC_ConfigChannel+0x1e4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d125      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d126      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d88:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d11a      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9a      	lsrs	r2, r3, #18
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x1b2>
 8001db6:	e007      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40012400 	.word	0x40012400
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d039      	beq.n	8001e7a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <ADC_Enable+0x9c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <ADC_Enable+0xa0>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9b      	lsrs	r3, r3, #18
 8001e22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e24:	e002      	b.n	8001e2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e32:	f7ff fbfd 	bl	8001630 <HAL_GetTick>
 8001e36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e38:	e018      	b.n	8001e6c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e3a:	f7ff fbf9 	bl	8001630 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d911      	bls.n	8001e6c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	f043 0210 	orr.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e007      	b.n	8001e7c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d1df      	bne.n	8001e3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83

08001e8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d127      	bne.n	8001ef6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eb6:	f7ff fbbb 	bl	8001630 <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ebc:	e014      	b.n	8001ee8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ebe:	f7ff fbb7 	bl	8001630 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d90d      	bls.n	8001ee8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	f043 0210 	orr.w	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d0e3      	beq.n	8001ebe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4906      	ldr	r1, [pc, #24]	; (8001f98 <__NVIC_EnableIRQ+0x34>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff4f 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff64 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ffb2 	bl	8001ff0 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff81 	bl	8001f9c <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff57 	bl	8001f64 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b08b      	sub	sp, #44	; 0x2c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d2:	e127      	b.n	8002324 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020d4:	2201      	movs	r2, #1
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8116 	bne.w	800231e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b12      	cmp	r3, #18
 80020f8:	d034      	beq.n	8002164 <HAL_GPIO_Init+0xa4>
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d80d      	bhi.n	800211a <HAL_GPIO_Init+0x5a>
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d02b      	beq.n	800215a <HAL_GPIO_Init+0x9a>
 8002102:	2b02      	cmp	r3, #2
 8002104:	d804      	bhi.n	8002110 <HAL_GPIO_Init+0x50>
 8002106:	2b00      	cmp	r3, #0
 8002108:	d031      	beq.n	800216e <HAL_GPIO_Init+0xae>
 800210a:	2b01      	cmp	r3, #1
 800210c:	d01c      	beq.n	8002148 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210e:	e048      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002110:	2b03      	cmp	r3, #3
 8002112:	d043      	beq.n	800219c <HAL_GPIO_Init+0xdc>
 8002114:	2b11      	cmp	r3, #17
 8002116:	d01b      	beq.n	8002150 <HAL_GPIO_Init+0x90>
          break;
 8002118:	e043      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800211a:	4a89      	ldr	r2, [pc, #548]	; (8002340 <HAL_GPIO_Init+0x280>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d026      	beq.n	800216e <HAL_GPIO_Init+0xae>
 8002120:	4a87      	ldr	r2, [pc, #540]	; (8002340 <HAL_GPIO_Init+0x280>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d806      	bhi.n	8002134 <HAL_GPIO_Init+0x74>
 8002126:	4a87      	ldr	r2, [pc, #540]	; (8002344 <HAL_GPIO_Init+0x284>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d020      	beq.n	800216e <HAL_GPIO_Init+0xae>
 800212c:	4a86      	ldr	r2, [pc, #536]	; (8002348 <HAL_GPIO_Init+0x288>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_GPIO_Init+0xae>
          break;
 8002132:	e036      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002134:	4a85      	ldr	r2, [pc, #532]	; (800234c <HAL_GPIO_Init+0x28c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0xae>
 800213a:	4a85      	ldr	r2, [pc, #532]	; (8002350 <HAL_GPIO_Init+0x290>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d016      	beq.n	800216e <HAL_GPIO_Init+0xae>
 8002140:	4a84      	ldr	r2, [pc, #528]	; (8002354 <HAL_GPIO_Init+0x294>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0xae>
          break;
 8002146:	e02c      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e028      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e023      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	3308      	adds	r3, #8
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e01e      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	330c      	adds	r3, #12
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e019      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002176:	2304      	movs	r3, #4
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e012      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	611a      	str	r2, [r3, #16]
          break;
 800218e:	e008      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002190:	2308      	movs	r3, #8
 8002192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	615a      	str	r2, [r3, #20]
          break;
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	d801      	bhi.n	80021ac <HAL_GPIO_Init+0xec>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	e001      	b.n	80021b0 <HAL_GPIO_Init+0xf0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2bff      	cmp	r3, #255	; 0xff
 80021b6:	d802      	bhi.n	80021be <HAL_GPIO_Init+0xfe>
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x104>
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	3b08      	subs	r3, #8
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	210f      	movs	r1, #15
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	401a      	ands	r2, r3
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	431a      	orrs	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8096 	beq.w	800231e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f2:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_GPIO_Init+0x298>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a58      	ldr	r2, [pc, #352]	; (8002358 <HAL_GPIO_Init+0x298>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b56      	ldr	r3, [pc, #344]	; (8002358 <HAL_GPIO_Init+0x298>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800220a:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_GPIO_Init+0x29c>)
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_GPIO_Init+0x2a0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x19e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_GPIO_Init+0x2a4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x19a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a49      	ldr	r2, [pc, #292]	; (8002368 <HAL_GPIO_Init+0x2a8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x196>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a48      	ldr	r2, [pc, #288]	; (800236c <HAL_GPIO_Init+0x2ac>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x192>
 800224e:	2303      	movs	r3, #3
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x1a0>
 8002252:	2304      	movs	r3, #4
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x1a0>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x1a0>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x1a0>
 800225e:	2300      	movs	r3, #0
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002270:	493a      	ldr	r1, [pc, #232]	; (800235c <HAL_GPIO_Init+0x29c>)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4938      	ldr	r1, [pc, #224]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	43db      	mvns	r3, r3
 80022a0:	4933      	ldr	r1, [pc, #204]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	492e      	ldr	r1, [pc, #184]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
 80022be:	e006      	b.n	80022ce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	4929      	ldr	r1, [pc, #164]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	4924      	ldr	r1, [pc, #144]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	491f      	ldr	r1, [pc, #124]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	491a      	ldr	r1, [pc, #104]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	43db      	mvns	r3, r3
 8002318:	4915      	ldr	r1, [pc, #84]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 800231a:	4013      	ands	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3301      	adds	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f47f aed0 	bne.w	80020d4 <HAL_GPIO_Init+0x14>
  }
}
 8002334:	bf00      	nop
 8002336:	372c      	adds	r7, #44	; 0x2c
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	10210000 	.word	0x10210000
 8002344:	10110000 	.word	0x10110000
 8002348:	10120000 	.word	0x10120000
 800234c:	10310000 	.word	0x10310000
 8002350:	10320000 	.word	0x10320000
 8002354:	10220000 	.word	0x10220000
 8002358:	40021000 	.word	0x40021000
 800235c:	40010000 	.word	0x40010000
 8002360:	40010800 	.word	0x40010800
 8002364:	40010c00 	.word	0x40010c00
 8002368:	40011000 	.word	0x40011000
 800236c:	40011400 	.word	0x40011400
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e001      	b.n	8002396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	807b      	strh	r3, [r7, #2]
 80023ae:	4613      	mov	r3, r2
 80023b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b2:	787b      	ldrb	r3, [r7, #1]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023be:	e003      	b.n	80023c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	041a      	lsls	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e26c      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8087 	beq.w	8002502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d00c      	beq.n	800241a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002400:	4b8f      	ldr	r3, [pc, #572]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d112      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
 800240c:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06c      	beq.n	8002500 <HAL_RCC_OscConfig+0x12c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d168      	bne.n	8002500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e246      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x76>
 800243c:	4b80      	ldr	r3, [pc, #512]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a7f      	ldr	r2, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e02e      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0xbc>
 8002476:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 8002490:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f8be 	bl	8001630 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f8ba 	bl	8001630 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1fa      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe4>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f8aa 	bl	8001630 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f8a6 	bl	8001630 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1e6      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x10c>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1ba      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4939      	ldr	r1, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff f85f 	bl	8001630 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff f85b 	bl	8001630 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e19b      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f83e 	bl	8001630 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff f83a 	bl	8001630 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e17a      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03a      	beq.n	8002658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff f81e 	bl	8001630 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f81a 	bl	8001630 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e15a      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 fb0a 	bl	8002c30 <RCC_Delay>
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7ff f804 	bl	8001630 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	e00f      	b.n	800264c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff f800 	bl	8001630 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d908      	bls.n	800264c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e140      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	42420000 	.word	0x42420000
 8002648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e9      	bne.n	800262c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a6 	beq.w	80027b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b91      	ldr	r3, [pc, #580]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe ffc1 	bl	8001630 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe ffbd 	bl	8001630 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0fd      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026d8:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e02d      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x334>
 80026ee:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a75      	ldr	r2, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a72      	ldr	r2, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	e01c      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x356>
 8002710:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a6c      	ldr	r2, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a69      	ldr	r2, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a66      	ldr	r2, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7fe ff71 	bl	8001630 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe ff6d 	bl	8001630 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0ab      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ee      	beq.n	8002752 <HAL_RCC_OscConfig+0x37e>
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe ff5b 	bl	8001630 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe ff57 	bl	8001630 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e095      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8081 	beq.w	80028be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d061      	beq.n	800288c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d146      	bne.n	800285e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe ff2b 	bl	8001630 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe ff27 	bl	8001630 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e067      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f0:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d108      	bne.n	8002818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	492d      	ldr	r1, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a19      	ldr	r1, [r3, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	430b      	orrs	r3, r1
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe fefb 	bl	8001630 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe fef7 	bl	8001630 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e037      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
 800285c:	e02f      	b.n	80028be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe fee4 	bl	8001630 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fee0 	bl	8001630 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e020      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x498>
 800288a:	e018      	b.n	80028be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420060 	.word	0x42420060

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4965      	ldr	r1, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800293a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d040      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e073      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fe34 	bl	8001630 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fe30 	bl	8001630 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e053      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d210      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	fa21 f303 	lsr.w	r3, r1, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f980 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08006f20 	.word	0x08006f20
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b490      	push	{r4, r7}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ab0:	1d3c      	adds	r4, r7, #4
 8002ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x46>
 8002ae6:	e02d      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aea:	623b      	str	r3, [r7, #32]
      break;
 8002aec:	e02d      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002afa:	4413      	add	r3, r2
 8002afc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c5b      	lsrs	r3, r3, #17
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b26:	fb02 f203 	mul.w	r2, r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e004      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	623b      	str	r3, [r7, #32]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b46:	623b      	str	r3, [r7, #32]
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc90      	pop	{r4, r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	08006e2c 	.word	0x08006e2c
 8002b5c:	08006e3c 	.word	0x08006e3c
 8002b60:	40021000 	.word	0x40021000
 8002b64:	007a1200 	.word	0x007a1200
 8002b68:	003d0900 	.word	0x003d0900

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000000 	.word	0x20000000

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b84:	f7ff fff2 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002b88:	4601      	mov	r1, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08006f30 	.word	0x08006f30

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bac:	f7ff ffde 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002bb0:	4601      	mov	r1, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	0adb      	lsrs	r3, r3, #11
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08006f30 	.word	0x08006f30

08002bd0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	220f      	movs	r2, #15
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_GetClockConfig+0x58>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_RCC_GetClockConfig+0x58>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_GetClockConfig+0x58>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_RCC_GetClockConfig+0x58>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	08db      	lsrs	r3, r3, #3
 8002c0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_GetClockConfig+0x5c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0207 	and.w	r2, r3, #7
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40022000 	.word	0x40022000

08002c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <RCC_Delay+0x34>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <RCC_Delay+0x38>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0a5b      	lsrs	r3, r3, #9
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c4c:	bf00      	nop
  }
  while (Delay --);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	60fa      	str	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <RCC_Delay+0x1c>
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000000 	.word	0x20000000
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d07d      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	61d3      	str	r3, [r2, #28]
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fcb0 	bl	8001630 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fe fcac 	bl	8001630 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e06d      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02e      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d027      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d014      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fc7b 	bl	8001630 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fc77 	bl	8001630 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e036      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4917      	ldr	r1, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	490b      	ldr	r1, [pc, #44]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4904      	ldr	r1, [pc, #16]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	42420440 	.word	0x42420440

08002dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b08d      	sub	sp, #52	; 0x34
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002de2:	f107 040c 	add.w	r4, r7, #12
 8002de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dec:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	2300      	movs	r3, #0
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	2300      	movs	r3, #0
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d07f      	beq.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d002      	beq.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d048      	beq.n	8002ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e14:	e08b      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d07f      	beq.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	0c9b      	lsrs	r3, r3, #18
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e34:	4413      	add	r3, r2
 8002e36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e3a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d018      	beq.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	0c5b      	lsrs	r3, r3, #17
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e54:	4413      	add	r3, r2
 8002e56:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e66:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	4a33      	ldr	r2, [pc, #204]	; (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e94:	e048      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ea4:	e040      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d108      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec8:	e01f      	b.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d109      	bne.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002ee2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee8:	e00f      	b.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d014      	beq.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002f02:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f08:	e010      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f0c:	f7ff fe4c 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	0b9b      	lsrs	r3, r3, #14
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f2c:	bf00      	nop
    }
  }
  return (frequency);
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3734      	adds	r7, #52	; 0x34
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	08006e40 	.word	0x08006e40
 8002f3c:	08006e50 	.word	0x08006e50
 8002f40:	40021000 	.word	0x40021000
 8002f44:	007a1200 	.word	0x007a1200
 8002f48:	003d0900 	.word	0x003d0900
 8002f4c:	aaaaaaab 	.word	0xaaaaaaab

08002f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e041      	b.n	8002fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f839 	bl	8002fee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f000 f9b4 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d001      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e03a      	b.n	800308e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_TIM_Base_Start_IT+0x98>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x58>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d009      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x58>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_TIM_Base_Start_IT+0x9c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x58>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b06      	cmp	r3, #6
 8003068:	d010      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	e007      	b.n	800308c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800

080030a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0202 	mvn.w	r2, #2
 80030d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8ed 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8e0 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8ef 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0204 	mvn.w	r2, #4
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8c3 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8b6 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8c5 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b08      	cmp	r3, #8
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0208 	mvn.w	r2, #8
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2204      	movs	r2, #4
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f899 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f88c 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f89b 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0210 	mvn.w	r2, #16
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2208      	movs	r2, #8
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f86f 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f862 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f871 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0201 	mvn.w	r2, #1
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd fce0 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b80      	cmp	r3, #128	; 0x80
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8bf 	bl	80033d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f835 	bl	80032ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b20      	cmp	r3, #32
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b20      	cmp	r3, #32
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0220 	mvn.w	r2, #32
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f88a 	bl	80033c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00b      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d007      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0xbc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <TIM_Base_SetConfig+0xbc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <TIM_Base_SetConfig+0xc0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	615a      	str	r2, [r3, #20]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800

080033c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e03f      	b.n	8003476 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fc72 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f905 	bl	8003638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800345c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af02      	add	r7, sp, #8
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	d17c      	bne.n	8003598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_UART_Transmit+0x2c>
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e075      	b.n	800359a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Transmit+0x3e>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e06e      	b.n	800359a <HAL_UART_Transmit+0x11c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2221      	movs	r2, #33	; 0x21
 80034ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034d2:	f7fe f8ad 	bl	8001630 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d108      	bne.n	8003500 <HAL_UART_Transmit+0x82>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e003      	b.n	8003508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003510:	e02a      	b.n	8003568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f840 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e036      	b.n	800359a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3302      	adds	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e007      	b.n	800355a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1cf      	bne.n	8003512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2140      	movs	r1, #64	; 0x40
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f810 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e006      	b.n	800359a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	e02c      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ba:	d028      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c2:	f7fe f835 	bl	8001630 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d21d      	bcs.n	800360e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e00f      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d0c3      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003672:	f023 030c 	bic.w	r3, r3, #12
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	430b      	orrs	r3, r1
 800367e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2c      	ldr	r2, [pc, #176]	; (800374c <UART_SetConfig+0x114>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7ff fa82 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	e002      	b.n	80036ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036a8:	f7ff fa6a 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 80036ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <UART_SetConfig+0x118>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	0119      	lsls	r1, r3, #4
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <UART_SetConfig+0x118>)
 80036e6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2064      	movs	r0, #100	; 0x64
 80036ee:	fb00 f303 	mul.w	r3, r0, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	3332      	adds	r3, #50	; 0x32
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <UART_SetConfig+0x118>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	4419      	add	r1, r3
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fbb2 f2f3 	udiv	r2, r2, r3
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <UART_SetConfig+0x118>)
 800371e:	fba3 0302 	umull	r0, r3, r3, r2
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2064      	movs	r0, #100	; 0x64
 8003726:	fb00 f303 	mul.w	r3, r0, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	3332      	adds	r3, #50	; 0x32
 8003730:	4a07      	ldr	r2, [pc, #28]	; (8003750 <UART_SetConfig+0x118>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	f003 020f 	and.w	r2, r3, #15
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	440a      	add	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40013800 	.word	0x40013800
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800375a:	f3ef 8305 	mrs	r3, IPSR
 800375e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003766:	f3ef 8310 	mrs	r3, PRIMASK
 800376a:	607b      	str	r3, [r7, #4]
  return(result);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <osKernelInitialize+0x32>
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <osKernelInitialize+0x60>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d109      	bne.n	800378e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800377a:	f3ef 8311 	mrs	r3, BASEPRI
 800377e:	603b      	str	r3, [r7, #0]
  return(result);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003786:	f06f 0305 	mvn.w	r3, #5
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e00c      	b.n	80037a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <osKernelInitialize+0x60>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <osKernelInitialize+0x60>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e002      	b.n	80037a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	20000094 	.word	0x20000094

080037b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037be:	f3ef 8305 	mrs	r3, IPSR
 80037c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ca:	f3ef 8310 	mrs	r3, PRIMASK
 80037ce:	607b      	str	r3, [r7, #4]
  return(result);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <osKernelStart+0x32>
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <osKernelStart+0x64>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d109      	bne.n	80037f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037de:	f3ef 8311 	mrs	r3, BASEPRI
 80037e2:	603b      	str	r3, [r7, #0]
  return(result);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80037ea:	f06f 0305 	mvn.w	r3, #5
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e00e      	b.n	8003810 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <osKernelStart+0x64>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <osKernelStart+0x64>)
 80037fc:	2202      	movs	r2, #2
 80037fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003800:	f001 fa8a 	bl	8004d18 <vTaskStartScheduler>
      stat = osOK;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e002      	b.n	8003810 <osKernelStart+0x58>
    } else {
      stat = osError;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003810:	68fb      	ldr	r3, [r7, #12]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000094 	.word	0x20000094

08003820 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b092      	sub	sp, #72	; 0x48
 8003824:	af04      	add	r7, sp, #16
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003830:	f3ef 8305 	mrs	r3, IPSR
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 8094 	bne.w	8003966 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383e:	f3ef 8310 	mrs	r3, PRIMASK
 8003842:	623b      	str	r3, [r7, #32]
  return(result);
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 808d 	bne.w	8003966 <osThreadNew+0x146>
 800384c:	4b48      	ldr	r3, [pc, #288]	; (8003970 <osThreadNew+0x150>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d106      	bne.n	8003862 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003854:	f3ef 8311 	mrs	r3, BASEPRI
 8003858:	61fb      	str	r3, [r7, #28]
  return(result);
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f040 8082 	bne.w	8003966 <osThreadNew+0x146>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d07e      	beq.n	8003966 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800386c:	2318      	movs	r3, #24
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003870:	2300      	movs	r3, #0
 8003872:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003874:	f107 031b 	add.w	r3, r7, #27
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d045      	beq.n	8003912 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <osThreadNew+0x74>
        name = attr->name;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <osThreadNew+0x9a>
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	2b38      	cmp	r3, #56	; 0x38
 80038ac:	d805      	bhi.n	80038ba <osThreadNew+0x9a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <osThreadNew+0x9e>
        return (NULL);
 80038ba:	2300      	movs	r3, #0
 80038bc:	e054      	b.n	8003968 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <osThreadNew+0xd4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b5b      	cmp	r3, #91	; 0x5b
 80038dc:	d90a      	bls.n	80038f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <osThreadNew+0xd4>
        mem = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	e010      	b.n	8003916 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10c      	bne.n	8003916 <osThreadNew+0xf6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <osThreadNew+0xf6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <osThreadNew+0xf6>
          mem = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003910:	e001      	b.n	8003916 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	2b01      	cmp	r3, #1
 800391a:	d110      	bne.n	800393e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003924:	9202      	str	r2, [sp, #8]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 f828 	bl	8004988 <xTaskCreateStatic>
 8003938:	4603      	mov	r3, r0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e013      	b.n	8003966 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d110      	bne.n	8003966 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	b29a      	uxth	r2, r3
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f001 f86f 	bl	8004a3a <xTaskCreate>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <osThreadNew+0x146>
          hTask = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003966:	697b      	ldr	r3, [r7, #20]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3738      	adds	r7, #56	; 0x38
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000094 	.word	0x20000094

08003974 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397c:	f3ef 8305 	mrs	r3, IPSR
 8003980:	613b      	str	r3, [r7, #16]
  return(result);
 8003982:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003988:	f3ef 8310 	mrs	r3, PRIMASK
 800398c:	60fb      	str	r3, [r7, #12]
  return(result);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <osDelay+0x34>
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <osDelay+0x58>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d109      	bne.n	80039b0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800399c:	f3ef 8311 	mrs	r3, BASEPRI
 80039a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <osDelay+0x3c>
    stat = osErrorISR;
 80039a8:	f06f 0305 	mvn.w	r3, #5
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e007      	b.n	80039c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 f978 	bl	8004cb0 <vTaskDelay>
    }
  }

  return (stat);
 80039c0:	697b      	ldr	r3, [r7, #20]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000094 	.word	0x20000094

080039d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	; 0x30
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e0:	f3ef 8305 	mrs	r3, IPSR
 80039e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80039e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d170      	bne.n	8003ace <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ec:	f3ef 8310 	mrs	r3, PRIMASK
 80039f0:	617b      	str	r3, [r7, #20]
  return(result);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d16a      	bne.n	8003ace <osMessageQueueNew+0xfe>
 80039f8:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <osMessageQueueNew+0x108>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d105      	bne.n	8003a0c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a00:	f3ef 8311 	mrs	r3, BASEPRI
 8003a04:	613b      	str	r3, [r7, #16]
  return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d160      	bne.n	8003ace <osMessageQueueNew+0xfe>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d05d      	beq.n	8003ace <osMessageQueueNew+0xfe>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05a      	beq.n	8003ace <osMessageQueueNew+0xfe>
    mem = -1;
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d029      	beq.n	8003a78 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <osMessageQueueNew+0x82>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b4f      	cmp	r3, #79	; 0x4f
 8003a32:	d90e      	bls.n	8003a52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <osMessageQueueNew+0x82>
        mem = 1;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	623b      	str	r3, [r7, #32]
 8003a50:	e014      	b.n	8003a7c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d110      	bne.n	8003a7c <osMessageQueueNew+0xac>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10c      	bne.n	8003a7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <osMessageQueueNew+0xac>
          mem = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	623b      	str	r3, [r7, #32]
 8003a76:	e001      	b.n	8003a7c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10c      	bne.n	8003a9c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fa52 	bl	8003f3c <xQueueGenericCreateStatic>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24
 8003a9a:	e008      	b.n	8003aae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 faba 	bl	8004020 <xQueueGenericCreate>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e001      	b.n	8003ac6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aca:	f000 ff01 	bl	80048d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000094 	.word	0x20000094

08003adc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af4:	f3ef 8305 	mrs	r3, IPSR
 8003af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003afa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b00:	f3ef 8310 	mrs	r3, PRIMASK
 8003b04:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <osMessageQueuePut+0x44>
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <osMessageQueuePut+0xe0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d12e      	bne.n	8003b72 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b14:	f3ef 8311 	mrs	r3, BASEPRI
 8003b18:	617b      	str	r3, [r7, #20]
  return(result);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d028      	beq.n	8003b72 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <osMessageQueuePut+0x56>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <osMessageQueuePut+0x56>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003b32:	f06f 0303 	mvn.w	r3, #3
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b38:	e039      	b.n	8003bae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b3e:	f107 0210 	add.w	r2, r7, #16
 8003b42:	2300      	movs	r3, #0
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6a38      	ldr	r0, [r7, #32]
 8003b48:	f000 fbc4 	bl	80042d4 <xQueueGenericSendFromISR>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d003      	beq.n	8003b5a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003b52:	f06f 0302 	mvn.w	r3, #2
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b58:	e029      	b.n	8003bae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d026      	beq.n	8003bae <osMessageQueuePut+0xd2>
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <osMessageQueuePut+0xe4>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b70:	e01d      	b.n	8003bae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <osMessageQueuePut+0xa2>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003b7e:	f06f 0303 	mvn.w	r3, #3
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	e014      	b.n	8003bb0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	6a38      	ldr	r0, [r7, #32]
 8003b8e:	f000 faa7 	bl	80040e0 <xQueueGenericSend>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d00b      	beq.n	8003bb0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003b9e:	f06f 0301 	mvn.w	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	e004      	b.n	8003bb0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003ba6:	f06f 0302 	mvn.w	r3, #2
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e000      	b.n	8003bb0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3728      	adds	r7, #40	; 0x28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000094 	.word	0x20000094
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bda:	f3ef 8305 	mrs	r3, IPSR
 8003bde:	61fb      	str	r3, [r7, #28]
  return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <osMessageQueueGet+0x42>
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <osMessageQueueGet+0xdc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d12e      	bne.n	8003c58 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8003bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <osMessageQueueGet+0x54>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <osMessageQueueGet+0x54>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003c18:	f06f 0303 	mvn.w	r3, #3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c1e:	e038      	b.n	8003c92 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	6a38      	ldr	r0, [r7, #32]
 8003c2e:	f000 fcc1 	bl	80045b4 <xQueueReceiveFromISR>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d003      	beq.n	8003c40 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003c38:	f06f 0302 	mvn.w	r3, #2
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c3e:	e028      	b.n	8003c92 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d025      	beq.n	8003c92 <osMessageQueueGet+0xce>
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <osMessageQueueGet+0xe0>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c56:	e01c      	b.n	8003c92 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <osMessageQueueGet+0xa0>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003c64:	f06f 0303 	mvn.w	r3, #3
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e013      	b.n	8003c94 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	6a38      	ldr	r0, [r7, #32]
 8003c72:	f000 fbc3 	bl	80043fc <xQueueReceive>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d00b      	beq.n	8003c94 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003c82:	f06f 0301 	mvn.w	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e004      	b.n	8003c94 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003c8a:	f06f 0302 	mvn.w	r3, #2
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e000      	b.n	8003c94 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c92:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3728      	adds	r7, #40	; 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000094 	.word	0x20000094
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <vApplicationGetIdleTaskMemory+0x28>)
 8003cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000098 	.word	0x20000098
 8003cd4:	200000f4 	.word	0x200000f4

08003cd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ce8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <vApplicationGetTimerTaskMemory+0x30>)
 8003cee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	200002f4 	.word	0x200002f4
 8003d08:	20000350 	.word	0x20000350

08003d0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f103 0208 	add.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f103 0208 	add.w	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f103 0208 	add.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dbe:	d103      	bne.n	8003dc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e00c      	b.n	8003de2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e002      	b.n	8003dd6 <vListInsert+0x2e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d2f6      	bcs.n	8003dd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6892      	ldr	r2, [r2, #8]
 8003e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6852      	ldr	r2, [r2, #4]
 8003e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d103      	bne.n	8003e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
	...

08003e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	e7fe      	b.n	8003e92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e94:	f002 f850 	bl	8005f38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	441a      	add	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	441a      	add	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	22ff      	movs	r2, #255	; 0xff
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	22ff      	movs	r2, #255	; 0xff
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d114      	bne.n	8003f14 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01a      	beq.n	8003f28 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3310      	adds	r3, #16
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f992 	bl	8005220 <xTaskRemoveFromEventList>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d012      	beq.n	8003f28 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <xQueueGenericReset+0xcc>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	e009      	b.n	8003f28 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3310      	adds	r3, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fef7 	bl	8003d0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fef2 	bl	8003d0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f28:	f002 f834 	bl	8005f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f2c:	2301      	movs	r3, #1
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08e      	sub	sp, #56	; 0x38
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <xQueueGenericCreateStatic+0x28>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f62:	e7fe      	b.n	8003f62 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <xQueueGenericCreateStatic+0x42>
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <xQueueGenericCreateStatic+0x4e>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <xQueueGenericCreateStatic+0x52>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xQueueGenericCreateStatic+0x54>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <xQueueGenericCreateStatic+0x6c>
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <xQueueGenericCreateStatic+0x78>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <xQueueGenericCreateStatic+0x7c>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <xQueueGenericCreateStatic+0x7e>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <xQueueGenericCreateStatic+0x96>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e7fe      	b.n	8003fd0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fd2:	2350      	movs	r3, #80	; 0x50
 8003fd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b50      	cmp	r3, #80	; 0x50
 8003fda:	d009      	beq.n	8003ff0 <xQueueGenericCreateStatic+0xb4>
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e7fe      	b.n	8003fee <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f842 	bl	800409a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	; 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <xQueueGenericCreate+0x28>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	e7fe      	b.n	8004046 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e004      	b.n	800405e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3350      	adds	r3, #80	; 0x50
 8004062:	4618      	mov	r0, r3
 8004064:	f002 f85e 	bl	8006124 <pvPortMalloc>
 8004068:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3350      	adds	r3, #80	; 0x50
 8004074:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800407e:	79fa      	ldrb	r2, [r7, #7]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f805 	bl	800409a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004090:	69bb      	ldr	r3, [r7, #24]
	}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e002      	b.n	80040bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040c8:	2101      	movs	r1, #1
 80040ca:	69b8      	ldr	r0, [r7, #24]
 80040cc:	f7ff fece 	bl	8003e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040ee:	2300      	movs	r3, #0
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <xQueueGenericSend+0x30>
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
 800410e:	e7fe      	b.n	800410e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <xQueueGenericSend+0x3e>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <xQueueGenericSend+0x42>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <xQueueGenericSend+0x44>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <xQueueGenericSend+0x5c>
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	e7fe      	b.n	800413a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d103      	bne.n	800414a <xQueueGenericSend+0x6a>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <xQueueGenericSend+0x6e>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <xQueueGenericSend+0x70>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <xQueueGenericSend+0x88>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	623b      	str	r3, [r7, #32]
 8004166:	e7fe      	b.n	8004166 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004168:	f001 fa14 	bl	8005594 <xTaskGetSchedulerState>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <xQueueGenericSend+0x98>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <xQueueGenericSend+0x9c>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <xQueueGenericSend+0x9e>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <xQueueGenericSend+0xb6>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e7fe      	b.n	8004194 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004196:	f001 fecf 	bl	8005f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <xQueueGenericSend+0xcc>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d129      	bne.n	8004200 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041b2:	f000 fa7c 	bl	80046ae <prvCopyDataToQueue>
 80041b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	3324      	adds	r3, #36	; 0x24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 f82b 	bl	8005220 <xTaskRemoveFromEventList>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041d0:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <xQueueGenericSend+0x1f0>)
 80041d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	e00a      	b.n	80041f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041e8:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <xQueueGenericSend+0x1f0>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041f8:	f001 fecc 	bl	8005f94 <vPortExitCritical>
				return pdPASS;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e063      	b.n	80042c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004206:	f001 fec5 	bl	8005f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800420a:	2300      	movs	r3, #0
 800420c:	e05c      	b.n	80042c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4618      	mov	r0, r3
 800421a:	f001 f863 	bl	80052e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800421e:	2301      	movs	r3, #1
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004222:	f001 feb7 	bl	8005f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004226:	f000 fddb 	bl	8004de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800422a:	f001 fe85 	bl	8005f38 <vPortEnterCritical>
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004234:	b25b      	sxtb	r3, r3
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423a:	d103      	bne.n	8004244 <xQueueGenericSend+0x164>
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424a:	b25b      	sxtb	r3, r3
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004250:	d103      	bne.n	800425a <xQueueGenericSend+0x17a>
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800425a:	f001 fe9b 	bl	8005f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800425e:	1d3a      	adds	r2, r7, #4
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f001 f852 	bl	8005310 <xTaskCheckForTimeOut>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d124      	bne.n	80042bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004274:	f000 fb13 	bl	800489e <prvIsQueueFull>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	3310      	adds	r3, #16
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 ff7c 	bl	8005184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800428c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800428e:	f000 fa9e 	bl	80047ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004292:	f000 fdb3 	bl	8004dfc <xTaskResumeAll>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f af7c 	bne.w	8004196 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <xQueueGenericSend+0x1f0>)
 80042a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	e772      	b.n	8004196 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b2:	f000 fa8c 	bl	80047ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042b6:	f000 fda1 	bl	8004dfc <xTaskResumeAll>
 80042ba:	e76c      	b.n	8004196 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042be:	f000 fa86 	bl	80047ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042c2:	f000 fd9b 	bl	8004dfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042c6:	2300      	movs	r3, #0
		}
	}
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3738      	adds	r7, #56	; 0x38
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08e      	sub	sp, #56	; 0x38
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <xQueueGenericSendFromISR+0x2c>
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e7fe      	b.n	80042fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <xQueueGenericSendFromISR+0x3a>
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <xQueueGenericSendFromISR+0x3e>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <xQueueGenericSendFromISR+0x40>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <xQueueGenericSendFromISR+0x58>
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	623b      	str	r3, [r7, #32]
 800432a:	e7fe      	b.n	800432a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d103      	bne.n	800433a <xQueueGenericSendFromISR+0x66>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <xQueueGenericSendFromISR+0x6a>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <xQueueGenericSendFromISR+0x6c>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <xQueueGenericSendFromISR+0x84>
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e7fe      	b.n	8004356 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004358:	f001 fea8 	bl	80060ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800435c:	f3ef 8211 	mrs	r2, BASEPRI
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	61ba      	str	r2, [r7, #24]
 8004372:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004374:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <xQueueGenericSendFromISR+0xb6>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d12c      	bne.n	80043e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 f988 	bl	80046ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800439e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a6:	d112      	bne.n	80043ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d016      	beq.n	80043de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	3324      	adds	r3, #36	; 0x24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 ff33 	bl	8005220 <xTaskRemoveFromEventList>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e007      	b.n	80043de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d2:	3301      	adds	r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	b25a      	sxtb	r2, r3
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80043e2:	e001      	b.n	80043e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3738      	adds	r7, #56	; 0x38
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	; 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004408:	2300      	movs	r3, #0
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <xQueueReceive+0x2e>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	623b      	str	r3, [r7, #32]
 8004428:	e7fe      	b.n	8004428 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <xQueueReceive+0x3c>
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <xQueueReceive+0x40>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <xQueueReceive+0x42>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <xQueueReceive+0x5a>
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	e7fe      	b.n	8004454 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004456:	f001 f89d 	bl	8005594 <xTaskGetSchedulerState>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <xQueueReceive+0x6a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <xQueueReceive+0x6e>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <xQueueReceive+0x70>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <xQueueReceive+0x88>
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e7fe      	b.n	8004482 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004484:	f001 fd58 	bl	8005f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01f      	beq.n	80044d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004498:	f000 f973 	bl	8004782 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1e5a      	subs	r2, r3, #1
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00f      	beq.n	80044cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	3310      	adds	r3, #16
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 feb5 	bl	8005220 <xTaskRemoveFromEventList>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044bc:	4b3c      	ldr	r3, [pc, #240]	; (80045b0 <xQueueReceive+0x1b4>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044cc:	f001 fd62 	bl	8005f94 <vPortExitCritical>
				return pdPASS;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e069      	b.n	80045a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044da:	f001 fd5b 	bl	8005f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044de:	2300      	movs	r3, #0
 80044e0:	e062      	b.n	80045a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044e8:	f107 0310 	add.w	r3, r7, #16
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fef9 	bl	80052e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044f2:	2301      	movs	r3, #1
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044f6:	f001 fd4d 	bl	8005f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044fa:	f000 fc71 	bl	8004de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044fe:	f001 fd1b 	bl	8005f38 <vPortEnterCritical>
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	b25b      	sxtb	r3, r3
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800450e:	d103      	bne.n	8004518 <xQueueReceive+0x11c>
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451e:	b25b      	sxtb	r3, r3
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004524:	d103      	bne.n	800452e <xQueueReceive+0x132>
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452e:	f001 fd31 	bl	8005f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004532:	1d3a      	adds	r2, r7, #4
 8004534:	f107 0310 	add.w	r3, r7, #16
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fee8 	bl	8005310 <xTaskCheckForTimeOut>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d123      	bne.n	800458e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004548:	f000 f993 	bl	8004872 <prvIsQueueEmpty>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d017      	beq.n	8004582 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	3324      	adds	r3, #36	; 0x24
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fe12 	bl	8005184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004562:	f000 f934 	bl	80047ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004566:	f000 fc49 	bl	8004dfc <xTaskResumeAll>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d189      	bne.n	8004484 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <xQueueReceive+0x1b4>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	e780      	b.n	8004484 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004584:	f000 f923 	bl	80047ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004588:	f000 fc38 	bl	8004dfc <xTaskResumeAll>
 800458c:	e77a      	b.n	8004484 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800458e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004590:	f000 f91d 	bl	80047ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004594:	f000 fc32 	bl	8004dfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800459a:	f000 f96a 	bl	8004872 <prvIsQueueEmpty>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f43f af6f 	beq.w	8004484 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3730      	adds	r7, #48	; 0x30
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08e      	sub	sp, #56	; 0x38
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <xQueueReceiveFromISR+0x2a>
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	e7fe      	b.n	80045dc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <xQueueReceiveFromISR+0x38>
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <xQueueReceiveFromISR+0x3c>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <xQueueReceiveFromISR+0x3e>
 80045f0:	2300      	movs	r3, #0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <xQueueReceiveFromISR+0x56>
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e7fe      	b.n	8004608 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800460a:	f001 fd4f 	bl	80060ac <vPortValidateInterruptPriority>
	__asm volatile
 800460e:	f3ef 8211 	mrs	r2, BASEPRI
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	61ba      	str	r2, [r7, #24]
 8004624:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004626:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02f      	beq.n	8004696 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800463c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004644:	f000 f89d 	bl	8004782 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004658:	d112      	bne.n	8004680 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	3310      	adds	r3, #16
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fdda 	bl	8005220 <xTaskRemoveFromEventList>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00e      	beq.n	8004690 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e007      	b.n	8004690 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004684:	3301      	adds	r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	b25a      	sxtb	r2, r3
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	e001      	b.n	800469a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004696:	2300      	movs	r3, #0
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3738      	adds	r7, #56	; 0x38
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d14d      	bne.n	8004770 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ff79 	bl	80055d0 <xTaskPriorityDisinherit>
 80046de:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e043      	b.n	8004770 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d119      	bne.n	8004722 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6898      	ldr	r0, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	461a      	mov	r2, r3
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	f001 ff11 	bl	8006520 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	441a      	add	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d32b      	bcc.n	8004770 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	e026      	b.n	8004770 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68d8      	ldr	r0, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	461a      	mov	r2, r3
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	f001 fef7 	bl	8006520 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	425b      	negs	r3, r3
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d207      	bcs.n	800475e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	425b      	negs	r3, r3
 8004758:	441a      	add	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d105      	bne.n	8004770 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3b01      	subs	r3, #1
 800476e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d303      	bcc.n	80047b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68d9      	ldr	r1, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	461a      	mov	r2, r3
 80047c0:	6838      	ldr	r0, [r7, #0]
 80047c2:	f001 fead 	bl	8006520 <memcpy>
	}
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047d6:	f001 fbaf 	bl	8005f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047e2:	e011      	b.n	8004808 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fd15 	bl	8005220 <xTaskRemoveFromEventList>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047fc:	f000 fde8 	bl	80053d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	3b01      	subs	r3, #1
 8004804:	b2db      	uxtb	r3, r3
 8004806:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	dce9      	bgt.n	80047e4 <prvUnlockQueue+0x16>
 8004810:	e000      	b.n	8004814 <prvUnlockQueue+0x46>
					break;
 8004812:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800481c:	f001 fbba 	bl	8005f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004820:	f001 fb8a 	bl	8005f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800482a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800482c:	e011      	b.n	8004852 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d012      	beq.n	800485c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3310      	adds	r3, #16
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fcf0 	bl	8005220 <xTaskRemoveFromEventList>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004846:	f000 fdc3 	bl	80053d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	3b01      	subs	r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004856:	2b00      	cmp	r3, #0
 8004858:	dce9      	bgt.n	800482e <prvUnlockQueue+0x60>
 800485a:	e000      	b.n	800485e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800485c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	22ff      	movs	r2, #255	; 0xff
 8004862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004866:	f001 fb95 	bl	8005f94 <vPortExitCritical>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800487a:	f001 fb5d 	bl	8005f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004886:	2301      	movs	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e001      	b.n	8004890 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004890:	f001 fb80 	bl	8005f94 <vPortExitCritical>

	return xReturn;
 8004894:	68fb      	ldr	r3, [r7, #12]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048a6:	f001 fb47 	bl	8005f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d102      	bne.n	80048bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048b6:	2301      	movs	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e001      	b.n	80048c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048c0:	f001 fb68 	bl	8005f94 <vPortExitCritical>

	return xReturn;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e014      	b.n	800490a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048e0:	4a0e      	ldr	r2, [pc, #56]	; (800491c <vQueueAddToRegistry+0x4c>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048ec:	490b      	ldr	r1, [pc, #44]	; (800491c <vQueueAddToRegistry+0x4c>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <vQueueAddToRegistry+0x4c>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004902:	e005      	b.n	8004910 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b07      	cmp	r3, #7
 800490e:	d9e7      	bls.n	80048e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20001aa0 	.word	0x20001aa0

08004920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004930:	f001 fb02 	bl	8005f38 <vPortEnterCritical>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800493a:	b25b      	sxtb	r3, r3
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004940:	d103      	bne.n	800494a <vQueueWaitForMessageRestricted+0x2a>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004950:	b25b      	sxtb	r3, r3
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004956:	d103      	bne.n	8004960 <vQueueWaitForMessageRestricted+0x40>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004960:	f001 fb18 	bl	8005f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3324      	adds	r3, #36	; 0x24
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fc29 	bl	80051cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f7ff ff27 	bl	80047ce <prvUnlockQueue>
	}
 8004980:	bf00      	nop
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	; 0x38
 800498c:	af04      	add	r7, sp, #16
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <xTaskCreateStatic+0x28>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	e7fe      	b.n	80049ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <xTaskCreateStatic+0x42>
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e7fe      	b.n	80049c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ca:	235c      	movs	r3, #92	; 0x5c
 80049cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b5c      	cmp	r3, #92	; 0x5c
 80049d2:	d009      	beq.n	80049e8 <xTaskCreateStatic+0x60>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	e7fe      	b.n	80049e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01e      	beq.n	8004a2c <xTaskCreateStatic+0xa4>
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a06:	2300      	movs	r3, #0
 8004a08:	9303      	str	r3, [sp, #12]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	9302      	str	r3, [sp, #8]
 8004a0e:	f107 0314 	add.w	r3, r7, #20
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f850 	bl	8004ac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a26:	f000 f8d3 	bl	8004bd0 <prvAddNewTaskToReadyList>
 8004a2a:	e001      	b.n	8004a30 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a30:	697b      	ldr	r3, [r7, #20]
	}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3728      	adds	r7, #40	; 0x28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b08c      	sub	sp, #48	; 0x30
 8004a3e:	af04      	add	r7, sp, #16
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 fb68 	bl	8006124 <pvPortMalloc>
 8004a54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004a5c:	205c      	movs	r0, #92	; 0x5c
 8004a5e:	f001 fb61 	bl	8006124 <pvPortMalloc>
 8004a62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a70:	e005      	b.n	8004a7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f001 fc18 	bl	80062a8 <vPortFree>
 8004a78:	e001      	b.n	8004a7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	9302      	str	r3, [sp, #8]
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f80e 	bl	8004ac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa8:	69f8      	ldr	r0, [r7, #28]
 8004aaa:	f000 f891 	bl	8004bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e002      	b.n	8004aba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004aba:	69bb      	ldr	r3, [r7, #24]
	}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	461a      	mov	r2, r3
 8004adc:	21a5      	movs	r1, #165	; 0xa5
 8004ade:	f001 fd2a 	bl	8006536 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004aec:	3b01      	subs	r3, #1
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f023 0307 	bic.w	r3, r3, #7
 8004afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <prvInitialiseNewTask+0x56>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e7fe      	b.n	8004b18 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	e012      	b.n	8004b46 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	7819      	ldrb	r1, [r3, #0]
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3334      	adds	r3, #52	; 0x34
 8004b30:	460a      	mov	r2, r1
 8004b32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d9e9      	bls.n	8004b20 <prvInitialiseNewTask+0x5c>
 8004b4c:	e000      	b.n	8004b50 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004b4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2b37      	cmp	r3, #55	; 0x37
 8004b5c:	d901      	bls.n	8004b62 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b5e:	2337      	movs	r3, #55	; 0x37
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2200      	movs	r2, #0
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	3304      	adds	r3, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff f8e6 	bl	8003d4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	3318      	adds	r3, #24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff f8e1 	bl	8003d4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	69b8      	ldr	r0, [r7, #24]
 8004bb2:	f001 f8d7 	bl	8005d64 <pxPortInitialiseStack>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bc8:	bf00      	nop
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bd8:	f001 f9ae 	bl	8005f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <prvAddNewTaskToReadyList+0xc4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <prvAddNewTaskToReadyList+0xc4>)
 8004be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <prvAddNewTaskToReadyList+0xc8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <prvAddNewTaskToReadyList+0xc8>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bf4:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <prvAddNewTaskToReadyList+0xc4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d110      	bne.n	8004c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bfc:	f000 fc0c 	bl	8005418 <prvInitialiseTaskLists>
 8004c00:	e00d      	b.n	8004c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <prvAddNewTaskToReadyList+0xcc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <prvAddNewTaskToReadyList+0xc8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d802      	bhi.n	8004c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c18:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <prvAddNewTaskToReadyList+0xc8>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <prvAddNewTaskToReadyList+0xd0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <prvAddNewTaskToReadyList+0xd0>)
 8004c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <prvAddNewTaskToReadyList+0xd0>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <prvAddNewTaskToReadyList+0xd4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d903      	bls.n	8004c44 <prvAddNewTaskToReadyList+0x74>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <prvAddNewTaskToReadyList+0xd4>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <prvAddNewTaskToReadyList+0xd8>)
 8004c52:	441a      	add	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7ff f881 	bl	8003d62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c60:	f001 f998 	bl	8005f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <prvAddNewTaskToReadyList+0xcc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00e      	beq.n	8004c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <prvAddNewTaskToReadyList+0xc8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d207      	bcs.n	8004c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <prvAddNewTaskToReadyList+0xdc>)
 8004c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000c24 	.word	0x20000c24
 8004c98:	20000750 	.word	0x20000750
 8004c9c:	20000c30 	.word	0x20000c30
 8004ca0:	20000c40 	.word	0x20000c40
 8004ca4:	20000c2c 	.word	0x20000c2c
 8004ca8:	20000754 	.word	0x20000754
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <vTaskDelay+0x60>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <vTaskDelay+0x2e>
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	e7fe      	b.n	8004cdc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004cde:	f000 f87f 	bl	8004de0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fcdf 	bl	80056a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cea:	f000 f887 	bl	8004dfc <xTaskResumeAll>
 8004cee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <vTaskDelay+0x64>)
 8004cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000c4c 	.word	0x20000c4c
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d26:	463a      	mov	r2, r7
 8004d28:	1d39      	adds	r1, r7, #4
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe ffba 	bl	8003ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	9202      	str	r2, [sp, #8]
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	460a      	mov	r2, r1
 8004d46:	4920      	ldr	r1, [pc, #128]	; (8004dc8 <vTaskStartScheduler+0xb0>)
 8004d48:	4820      	ldr	r0, [pc, #128]	; (8004dcc <vTaskStartScheduler+0xb4>)
 8004d4a:	f7ff fe1d 	bl	8004988 <xTaskCreateStatic>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	4b1f      	ldr	r3, [pc, #124]	; (8004dd0 <vTaskStartScheduler+0xb8>)
 8004d52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d54:	4b1e      	ldr	r3, [pc, #120]	; (8004dd0 <vTaskStartScheduler+0xb8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e001      	b.n	8004d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d6c:	f000 fcf0 	bl	8005750 <xTimerCreateTimerTask>
 8004d70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d115      	bne.n	8004da4 <vTaskStartScheduler+0x8c>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <vTaskStartScheduler+0xbc>)
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <vTaskStartScheduler+0xc0>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <vTaskStartScheduler+0xc4>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d9e:	f001 f85b 	bl	8005e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004da2:	e00d      	b.n	8004dc0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004daa:	d109      	bne.n	8004dc0 <vTaskStartScheduler+0xa8>
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e7fe      	b.n	8004dbe <vTaskStartScheduler+0xa6>
}
 8004dc0:	bf00      	nop
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	08006e54 	.word	0x08006e54
 8004dcc:	080053e9 	.word	0x080053e9
 8004dd0:	20000c48 	.word	0x20000c48
 8004dd4:	20000c44 	.word	0x20000c44
 8004dd8:	20000c30 	.word	0x20000c30
 8004ddc:	20000c28 	.word	0x20000c28

08004de0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <vTaskSuspendAll+0x18>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a03      	ldr	r2, [pc, #12]	; (8004df8 <vTaskSuspendAll+0x18>)
 8004dec:	6013      	str	r3, [r2, #0]
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000c4c 	.word	0x20000c4c

08004dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e0a:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <xTaskResumeAll+0x114>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <xTaskResumeAll+0x2a>
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	e7fe      	b.n	8004e24 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e26:	f001 f887 	bl	8005f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e2a:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <xTaskResumeAll+0x114>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	4a37      	ldr	r2, [pc, #220]	; (8004f10 <xTaskResumeAll+0x114>)
 8004e32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <xTaskResumeAll+0x114>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d162      	bne.n	8004f02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <xTaskResumeAll+0x118>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d05e      	beq.n	8004f02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e44:	e02f      	b.n	8004ea6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e46:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <xTaskResumeAll+0x11c>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3318      	adds	r3, #24
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe ffe0 	bl	8003e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe ffdb 	bl	8003e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <xTaskResumeAll+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d903      	bls.n	8004e76 <xTaskResumeAll+0x7a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <xTaskResumeAll+0x120>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <xTaskResumeAll+0x124>)
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7fe ff68 	bl	8003d62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e96:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <xTaskResumeAll+0x128>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ea0:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <xTaskResumeAll+0x12c>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <xTaskResumeAll+0x11c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1cb      	bne.n	8004e46 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004eb4:	f000 fb4a 	bl	800554c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <xTaskResumeAll+0x130>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ec4:	f000 f844 	bl	8004f50 <xTaskIncrementTick>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <xTaskResumeAll+0x12c>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f1      	bne.n	8004ec4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <xTaskResumeAll+0x130>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <xTaskResumeAll+0x12c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <xTaskResumeAll+0x134>)
 8004ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f02:	f001 f847 	bl	8005f94 <vPortExitCritical>

	return xAlreadyYielded;
 8004f06:	68bb      	ldr	r3, [r7, #8]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000c4c 	.word	0x20000c4c
 8004f14:	20000c24 	.word	0x20000c24
 8004f18:	20000be4 	.word	0x20000be4
 8004f1c:	20000c2c 	.word	0x20000c2c
 8004f20:	20000754 	.word	0x20000754
 8004f24:	20000750 	.word	0x20000750
 8004f28:	20000c38 	.word	0x20000c38
 8004f2c:	20000c34 	.word	0x20000c34
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f3a:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <xTaskGetTickCount+0x18>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f40:	687b      	ldr	r3, [r7, #4]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	20000c28 	.word	0x20000c28

08004f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5a:	4b51      	ldr	r3, [pc, #324]	; (80050a0 <xTaskIncrementTick+0x150>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 808d 	bne.w	800507e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f64:	4b4f      	ldr	r3, [pc, #316]	; (80050a4 <xTaskIncrementTick+0x154>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f6c:	4a4d      	ldr	r2, [pc, #308]	; (80050a4 <xTaskIncrementTick+0x154>)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11f      	bne.n	8004fb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f78:	4b4b      	ldr	r3, [pc, #300]	; (80050a8 <xTaskIncrementTick+0x158>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <xTaskIncrementTick+0x46>
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	e7fe      	b.n	8004f94 <xTaskIncrementTick+0x44>
 8004f96:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <xTaskIncrementTick+0x158>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	4b43      	ldr	r3, [pc, #268]	; (80050ac <xTaskIncrementTick+0x15c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a41      	ldr	r2, [pc, #260]	; (80050a8 <xTaskIncrementTick+0x158>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4a41      	ldr	r2, [pc, #260]	; (80050ac <xTaskIncrementTick+0x15c>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <xTaskIncrementTick+0x160>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	4a3f      	ldr	r2, [pc, #252]	; (80050b0 <xTaskIncrementTick+0x160>)
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	f000 faca 	bl	800554c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <xTaskIncrementTick+0x164>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d34e      	bcc.n	8005060 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <xTaskIncrementTick+0x158>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <xTaskIncrementTick+0x80>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <xTaskIncrementTick+0x82>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <xTaskIncrementTick+0x164>)
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fdc:	601a      	str	r2, [r3, #0]
					break;
 8004fde:	e03f      	b.n	8005060 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fe0:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <xTaskIncrementTick+0x158>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d203      	bcs.n	8005000 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <xTaskIncrementTick+0x164>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6013      	str	r3, [r2, #0]
						break;
 8004ffe:	e02f      	b.n	8005060 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3304      	adds	r3, #4
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe ff07 	bl	8003e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	3318      	adds	r3, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fefe 	bl	8003e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <xTaskIncrementTick+0x168>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <xTaskIncrementTick+0xe0>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <xTaskIncrementTick+0x168>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <xTaskIncrementTick+0x16c>)
 800503e:	441a      	add	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fe fe8b 	bl	8003d62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <xTaskIncrementTick+0x170>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	429a      	cmp	r2, r3
 8005058:	d3b3      	bcc.n	8004fc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800505a:	2301      	movs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800505e:	e7b0      	b.n	8004fc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <xTaskIncrementTick+0x170>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	4915      	ldr	r1, [pc, #84]	; (80050bc <xTaskIncrementTick+0x16c>)
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d907      	bls.n	8005088 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e004      	b.n	8005088 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800507e:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <xTaskIncrementTick+0x174>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a0f      	ldr	r2, [pc, #60]	; (80050c4 <xTaskIncrementTick+0x174>)
 8005086:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <xTaskIncrementTick+0x178>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000c4c 	.word	0x20000c4c
 80050a4:	20000c28 	.word	0x20000c28
 80050a8:	20000bdc 	.word	0x20000bdc
 80050ac:	20000be0 	.word	0x20000be0
 80050b0:	20000c3c 	.word	0x20000c3c
 80050b4:	20000c44 	.word	0x20000c44
 80050b8:	20000c2c 	.word	0x20000c2c
 80050bc:	20000754 	.word	0x20000754
 80050c0:	20000750 	.word	0x20000750
 80050c4:	20000c34 	.word	0x20000c34
 80050c8:	20000c38 	.word	0x20000c38

080050cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050d2:	4b27      	ldr	r3, [pc, #156]	; (8005170 <vTaskSwitchContext+0xa4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050da:	4b26      	ldr	r3, [pc, #152]	; (8005174 <vTaskSwitchContext+0xa8>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050e0:	e040      	b.n	8005164 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <vTaskSwitchContext+0xa8>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80050e8:	4b23      	ldr	r3, [pc, #140]	; (8005178 <vTaskSwitchContext+0xac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e00f      	b.n	8005110 <vTaskSwitchContext+0x44>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <vTaskSwitchContext+0x3e>
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	e7fe      	b.n	8005108 <vTaskSwitchContext+0x3c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3b01      	subs	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	491a      	ldr	r1, [pc, #104]	; (800517c <vTaskSwitchContext+0xb0>)
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0e5      	beq.n	80050f0 <vTaskSwitchContext+0x24>
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4a13      	ldr	r2, [pc, #76]	; (800517c <vTaskSwitchContext+0xb0>)
 8005130:	4413      	add	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	3308      	adds	r3, #8
 8005146:	429a      	cmp	r2, r3
 8005148:	d104      	bne.n	8005154 <vTaskSwitchContext+0x88>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <vTaskSwitchContext+0xb4>)
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4a06      	ldr	r2, [pc, #24]	; (8005178 <vTaskSwitchContext+0xac>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000c4c 	.word	0x20000c4c
 8005174:	20000c38 	.word	0x20000c38
 8005178:	20000c2c 	.word	0x20000c2c
 800517c:	20000754 	.word	0x20000754
 8005180:	20000750 	.word	0x20000750

08005184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <vTaskPlaceOnEventList+0x24>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e7fe      	b.n	80051a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <vTaskPlaceOnEventList+0x44>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3318      	adds	r3, #24
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fe fdf9 	bl	8003da8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051b6:	2101      	movs	r1, #1
 80051b8:	6838      	ldr	r0, [r7, #0]
 80051ba:	f000 fa75 	bl	80056a8 <prvAddCurrentTaskToDelayedList>
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000750 	.word	0x20000750

080051cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <vTaskPlaceOnEventListRestricted+0x26>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e7fe      	b.n	80051f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <vTaskPlaceOnEventListRestricted+0x50>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3318      	adds	r3, #24
 80051f8:	4619      	mov	r1, r3
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7fe fdb1 	bl	8003d62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800520a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	68b8      	ldr	r0, [r7, #8]
 8005210:	f000 fa4a 	bl	80056a8 <prvAddCurrentTaskToDelayedList>
	}
 8005214:	bf00      	nop
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000750 	.word	0x20000750

08005220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <xTaskRemoveFromEventList+0x2a>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e7fe      	b.n	8005248 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3318      	adds	r3, #24
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fde2 	bl	8003e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <xTaskRemoveFromEventList+0xac>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11d      	bne.n	8005298 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	3304      	adds	r3, #4
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe fdd9 	bl	8003e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <xTaskRemoveFromEventList+0xb0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d903      	bls.n	800527a <xTaskRemoveFromEventList+0x5a>
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <xTaskRemoveFromEventList+0xb0>)
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <xTaskRemoveFromEventList+0xb4>)
 8005288:	441a      	add	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7fe fd66 	bl	8003d62 <vListInsertEnd>
 8005296:	e005      	b.n	80052a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3318      	adds	r3, #24
 800529c:	4619      	mov	r1, r3
 800529e:	480e      	ldr	r0, [pc, #56]	; (80052d8 <xTaskRemoveFromEventList+0xb8>)
 80052a0:	f7fe fd5f 	bl	8003d62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <xTaskRemoveFromEventList+0xbc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d905      	bls.n	80052be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <xTaskRemoveFromEventList+0xc0>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e001      	b.n	80052c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80052c2:	697b      	ldr	r3, [r7, #20]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000c4c 	.word	0x20000c4c
 80052d0:	20000c2c 	.word	0x20000c2c
 80052d4:	20000754 	.word	0x20000754
 80052d8:	20000be4 	.word	0x20000be4
 80052dc:	20000750 	.word	0x20000750
 80052e0:	20000c38 	.word	0x20000c38

080052e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <vTaskInternalSetTimeOutState+0x24>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <vTaskInternalSetTimeOutState+0x28>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	605a      	str	r2, [r3, #4]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20000c3c 	.word	0x20000c3c
 800530c:	20000c28 	.word	0x20000c28

08005310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <xTaskCheckForTimeOut+0x24>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e7fe      	b.n	8005332 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <xTaskCheckForTimeOut+0x3e>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e7fe      	b.n	800534c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800534e:	f000 fdf3 	bl	8005f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <xTaskCheckForTimeOut+0xb8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800536a:	d102      	bne.n	8005372 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	e023      	b.n	80053ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b15      	ldr	r3, [pc, #84]	; (80053cc <xTaskCheckForTimeOut+0xbc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d007      	beq.n	800538e <xTaskCheckForTimeOut+0x7e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	429a      	cmp	r2, r3
 8005386:	d302      	bcc.n	800538e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e015      	b.n	80053ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	429a      	cmp	r2, r3
 8005396:	d20b      	bcs.n	80053b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ff9d 	bl	80052e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	e004      	b.n	80053ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053ba:	f000 fdeb 	bl	8005f94 <vPortExitCritical>

	return xReturn;
 80053be:	69fb      	ldr	r3, [r7, #28]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3720      	adds	r7, #32
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000c28 	.word	0x20000c28
 80053cc:	20000c3c 	.word	0x20000c3c

080053d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053d4:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <vTaskMissedYield+0x14>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
}
 80053da:	bf00      	nop
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000c38 	.word	0x20000c38

080053e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053f0:	f000 f852 	bl	8005498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <prvIdleTask+0x28>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d9f9      	bls.n	80053f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <prvIdleTask+0x2c>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800540c:	e7f0      	b.n	80053f0 <prvIdleTask+0x8>
 800540e:	bf00      	nop
 8005410:	20000754 	.word	0x20000754
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e00c      	b.n	800543e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <prvInitialiseTaskLists+0x60>)
 8005430:	4413      	add	r3, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fc6a 	bl	8003d0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3301      	adds	r3, #1
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b37      	cmp	r3, #55	; 0x37
 8005442:	d9ef      	bls.n	8005424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005444:	480d      	ldr	r0, [pc, #52]	; (800547c <prvInitialiseTaskLists+0x64>)
 8005446:	f7fe fc61 	bl	8003d0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800544a:	480d      	ldr	r0, [pc, #52]	; (8005480 <prvInitialiseTaskLists+0x68>)
 800544c:	f7fe fc5e 	bl	8003d0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005450:	480c      	ldr	r0, [pc, #48]	; (8005484 <prvInitialiseTaskLists+0x6c>)
 8005452:	f7fe fc5b 	bl	8003d0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005456:	480c      	ldr	r0, [pc, #48]	; (8005488 <prvInitialiseTaskLists+0x70>)
 8005458:	f7fe fc58 	bl	8003d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800545c:	480b      	ldr	r0, [pc, #44]	; (800548c <prvInitialiseTaskLists+0x74>)
 800545e:	f7fe fc55 	bl	8003d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005462:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <prvInitialiseTaskLists+0x78>)
 8005464:	4a05      	ldr	r2, [pc, #20]	; (800547c <prvInitialiseTaskLists+0x64>)
 8005466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvInitialiseTaskLists+0x7c>)
 800546a:	4a05      	ldr	r2, [pc, #20]	; (8005480 <prvInitialiseTaskLists+0x68>)
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000754 	.word	0x20000754
 800547c:	20000bb4 	.word	0x20000bb4
 8005480:	20000bc8 	.word	0x20000bc8
 8005484:	20000be4 	.word	0x20000be4
 8005488:	20000bf8 	.word	0x20000bf8
 800548c:	20000c10 	.word	0x20000c10
 8005490:	20000bdc 	.word	0x20000bdc
 8005494:	20000be0 	.word	0x20000be0

08005498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800549e:	e019      	b.n	80054d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054a0:	f000 fd4a 	bl	8005f38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <prvCheckTasksWaitingTermination+0x4c>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe fcb1 	bl	8003e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvCheckTasksWaitingTermination+0x50>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <prvCheckTasksWaitingTermination+0x50>)
 80054be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <prvCheckTasksWaitingTermination+0x54>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <prvCheckTasksWaitingTermination+0x54>)
 80054c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054ca:	f000 fd63 	bl	8005f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f80e 	bl	80054f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <prvCheckTasksWaitingTermination+0x54>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e1      	bne.n	80054a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000bf8 	.word	0x20000bf8
 80054e8:	20000c24 	.word	0x20000c24
 80054ec:	20000c0c 	.word	0x20000c0c

080054f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d108      	bne.n	8005514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fece 	bl	80062a8 <vPortFree>
				vPortFree( pxTCB );
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fecb 	bl	80062a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005512:	e017      	b.n	8005544 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800551a:	2b01      	cmp	r3, #1
 800551c:	d103      	bne.n	8005526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fec2 	bl	80062a8 <vPortFree>
	}
 8005524:	e00e      	b.n	8005544 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800552c:	2b02      	cmp	r3, #2
 800552e:	d009      	beq.n	8005544 <prvDeleteTCB+0x54>
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e7fe      	b.n	8005542 <prvDeleteTCB+0x52>
	}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <prvResetNextTaskUnblockTime+0x40>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <prvResetNextTaskUnblockTime+0x14>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <prvResetNextTaskUnblockTime+0x16>
 8005560:	2300      	movs	r3, #0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <prvResetNextTaskUnblockTime+0x44>)
 8005568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800556c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800556e:	e008      	b.n	8005582 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <prvResetNextTaskUnblockTime+0x40>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4a04      	ldr	r2, [pc, #16]	; (8005590 <prvResetNextTaskUnblockTime+0x44>)
 8005580:	6013      	str	r3, [r2, #0]
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr
 800558c:	20000bdc 	.word	0x20000bdc
 8005590:	20000c44 	.word	0x20000c44

08005594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <xTaskGetSchedulerState+0x34>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055a2:	2301      	movs	r3, #1
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	e008      	b.n	80055ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <xTaskGetSchedulerState+0x38>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055b0:	2302      	movs	r3, #2
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e001      	b.n	80055ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055ba:	687b      	ldr	r3, [r7, #4]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000c30 	.word	0x20000c30
 80055cc:	20000c4c 	.word	0x20000c4c

080055d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d054      	beq.n	8005690 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055e6:	4b2d      	ldr	r3, [pc, #180]	; (800569c <xTaskPriorityDisinherit+0xcc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d009      	beq.n	8005604 <xTaskPriorityDisinherit+0x34>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e7fe      	b.n	8005602 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <xTaskPriorityDisinherit+0x50>
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	e7fe      	b.n	800561e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	1e5a      	subs	r2, r3, #1
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005632:	429a      	cmp	r2, r3
 8005634:	d02c      	beq.n	8005690 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	2b00      	cmp	r3, #0
 800563c:	d128      	bne.n	8005690 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3304      	adds	r3, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fbe8 	bl	8003e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <xTaskPriorityDisinherit+0xd0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <xTaskPriorityDisinherit+0xa0>
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <xTaskPriorityDisinherit+0xd0>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <xTaskPriorityDisinherit+0xd4>)
 800567e:	441a      	add	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f7fe fb6b 	bl	8003d62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800568c:	2301      	movs	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005690:	697b      	ldr	r3, [r7, #20]
	}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000750 	.word	0x20000750
 80056a0:	20000c2c 	.word	0x20000c2c
 80056a4:	20000754 	.word	0x20000754

080056a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056b2:	4b21      	ldr	r3, [pc, #132]	; (8005738 <prvAddCurrentTaskToDelayedList+0x90>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <prvAddCurrentTaskToDelayedList+0x94>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3304      	adds	r3, #4
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fbaa 	bl	8003e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ca:	d10a      	bne.n	80056e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d2:	4b1a      	ldr	r3, [pc, #104]	; (800573c <prvAddCurrentTaskToDelayedList+0x94>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4819      	ldr	r0, [pc, #100]	; (8005740 <prvAddCurrentTaskToDelayedList+0x98>)
 80056dc:	f7fe fb41 	bl	8003d62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056e0:	e026      	b.n	8005730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <prvAddCurrentTaskToDelayedList+0x94>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d209      	bcs.n	800570e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <prvAddCurrentTaskToDelayedList+0x9c>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <prvAddCurrentTaskToDelayedList+0x94>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe fb4e 	bl	8003da8 <vListInsert>
}
 800570c:	e010      	b.n	8005730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvAddCurrentTaskToDelayedList+0x94>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f7fe fb44 	bl	8003da8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	429a      	cmp	r2, r3
 8005728:	d202      	bcs.n	8005730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800572a:	4a08      	ldr	r2, [pc, #32]	; (800574c <prvAddCurrentTaskToDelayedList+0xa4>)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000c28 	.word	0x20000c28
 800573c:	20000750 	.word	0x20000750
 8005740:	20000c10 	.word	0x20000c10
 8005744:	20000be0 	.word	0x20000be0
 8005748:	20000bdc 	.word	0x20000bdc
 800574c:	20000c44 	.word	0x20000c44

08005750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800575a:	f000 fac3 	bl	8005ce4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <xTimerCreateTimerTask+0x80>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d021      	beq.n	80057aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800576e:	1d3a      	adds	r2, r7, #4
 8005770:	f107 0108 	add.w	r1, r7, #8
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe faad 	bl	8003cd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	9202      	str	r2, [sp, #8]
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	2302      	movs	r3, #2
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2300      	movs	r3, #0
 800578e:	460a      	mov	r2, r1
 8005790:	4910      	ldr	r1, [pc, #64]	; (80057d4 <xTimerCreateTimerTask+0x84>)
 8005792:	4811      	ldr	r0, [pc, #68]	; (80057d8 <xTimerCreateTimerTask+0x88>)
 8005794:	f7ff f8f8 	bl	8004988 <xTaskCreateStatic>
 8005798:	4602      	mov	r2, r0
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <xTimerCreateTimerTask+0x8c>)
 800579c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <xTimerCreateTimerTask+0x8c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <xTimerCreateTimerTask+0x74>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e7fe      	b.n	80057c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80057c4:	697b      	ldr	r3, [r7, #20]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000c80 	.word	0x20000c80
 80057d4:	08006e5c 	.word	0x08006e5c
 80057d8:	080058f9 	.word	0x080058f9
 80057dc:	20000c84 	.word	0x20000c84

080057e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	; 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <xTimerGenericCommand+0x2c>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	e7fe      	b.n	800580a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800580c:	4b19      	ldr	r3, [pc, #100]	; (8005874 <xTimerGenericCommand+0x94>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02a      	beq.n	800586a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b05      	cmp	r3, #5
 8005824:	dc18      	bgt.n	8005858 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005826:	f7ff feb5 	bl	8005594 <xTaskGetSchedulerState>
 800582a:	4603      	mov	r3, r0
 800582c:	2b02      	cmp	r3, #2
 800582e:	d109      	bne.n	8005844 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <xTimerGenericCommand+0x94>)
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	f107 0110 	add.w	r1, r7, #16
 8005838:	2300      	movs	r3, #0
 800583a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583c:	f7fe fc50 	bl	80040e0 <xQueueGenericSend>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24
 8005842:	e012      	b.n	800586a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <xTimerGenericCommand+0x94>)
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	f107 0110 	add.w	r1, r7, #16
 800584c:	2300      	movs	r3, #0
 800584e:	2200      	movs	r2, #0
 8005850:	f7fe fc46 	bl	80040e0 <xQueueGenericSend>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24
 8005856:	e008      	b.n	800586a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <xTimerGenericCommand+0x94>)
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	f107 0110 	add.w	r1, r7, #16
 8005860:	2300      	movs	r3, #0
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	f7fe fd36 	bl	80042d4 <xQueueGenericSendFromISR>
 8005868:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800586c:	4618      	mov	r0, r3
 800586e:	3728      	adds	r7, #40	; 0x28
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000c80 	.word	0x20000c80

08005878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005882:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <prvProcessExpiredTimer+0x7c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe fac1 	bl	8003e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d121      	bne.n	80058e2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	18d1      	adds	r1, r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	6978      	ldr	r0, [r7, #20]
 80058ac:	f000 f8c8 	bl	8005a40 <prvInsertTimerInActiveList>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d015      	beq.n	80058e2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058b6:	2300      	movs	r3, #0
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2300      	movs	r3, #0
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	2100      	movs	r1, #0
 80058c0:	6978      	ldr	r0, [r7, #20]
 80058c2:	f7ff ff8d 	bl	80057e0 <xTimerGenericCommand>
 80058c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <prvProcessExpiredTimer+0x6a>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e7fe      	b.n	80058e0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	4798      	blx	r3
}
 80058ea:	bf00      	nop
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000c78 	.word	0x20000c78

080058f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f857 	bl	80059b8 <prvGetNextExpireTime>
 800590a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4619      	mov	r1, r3
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f803 	bl	800591c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005916:	f000 f8d5 	bl	8005ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800591a:	e7f1      	b.n	8005900 <prvTimerTask+0x8>

0800591c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005926:	f7ff fa5b 	bl	8004de0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f866 	bl	8005a00 <prvSampleTimeNow>
 8005934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d130      	bne.n	800599e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <prvProcessTimerOrBlockTask+0x3c>
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	429a      	cmp	r2, r3
 8005948:	d806      	bhi.n	8005958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800594a:	f7ff fa57 	bl	8004dfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff ff91 	bl	8005878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005956:	e024      	b.n	80059a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <prvProcessTimerOrBlockTask+0x90>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <prvProcessTimerOrBlockTask+0x94>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	4619      	mov	r1, r3
 800597e:	f7fe ffcf 	bl	8004920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005982:	f7ff fa3b 	bl	8004dfc <xTaskResumeAll>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <prvProcessTimerOrBlockTask+0x98>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	f3bf 8f6f 	isb	sy
}
 800599c:	e001      	b.n	80059a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800599e:	f7ff fa2d 	bl	8004dfc <xTaskResumeAll>
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000c7c 	.word	0x20000c7c
 80059b0:	20000c80 	.word	0x20000c80
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <prvGetNextExpireTime+0x44>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <prvGetNextExpireTime+0x44>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e001      	b.n	80059ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000c78 	.word	0x20000c78

08005a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a08:	f7ff fa94 	bl	8004f34 <xTaskGetTickCount>
 8005a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <prvSampleTimeNow+0x3c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d205      	bcs.n	8005a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a18:	f000 f904 	bl	8005c24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	e002      	b.n	8005a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a2a:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <prvSampleTimeNow+0x3c>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000c88 	.word	0x20000c88

08005a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d812      	bhi.n	8005a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	1ad2      	subs	r2, r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e01b      	b.n	8005ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <prvInsertTimerInActiveList+0x7c>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f7fe f98f 	bl	8003da8 <vListInsert>
 8005a8a:	e012      	b.n	8005ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d206      	bcs.n	8005aa2 <prvInsertTimerInActiveList+0x62>
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e007      	b.n	8005ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <prvInsertTimerInActiveList+0x80>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f7fe f97b 	bl	8003da8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000c7c 	.word	0x20000c7c
 8005ac0:	20000c78 	.word	0x20000c78

08005ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08e      	sub	sp, #56	; 0x38
 8005ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aca:	e099      	b.n	8005c00 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da17      	bge.n	8005b02 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <prvProcessReceivedCommands+0x2e>
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e7fe      	b.n	8005af0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	6850      	ldr	r0, [r2, #4]
 8005afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afc:	6892      	ldr	r2, [r2, #8]
 8005afe:	4611      	mov	r1, r2
 8005b00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	db7a      	blt.n	8005bfe <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe f97d 	bl	8003e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b1e:	463b      	mov	r3, r7
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ff6d 	bl	8005a00 <prvSampleTimeNow>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b09      	cmp	r3, #9
 8005b2c:	d868      	bhi.n	8005c00 <prvProcessReceivedCommands+0x13c>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <prvProcessReceivedCommands+0x70>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b5d 	.word	0x08005b5d
 8005b3c:	08005b5d 	.word	0x08005b5d
 8005b40:	08005c01 	.word	0x08005c01
 8005b44:	08005bb7 	.word	0x08005bb7
 8005b48:	08005bed 	.word	0x08005bed
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b5d 	.word	0x08005b5d
 8005b54:	08005c01 	.word	0x08005c01
 8005b58:	08005bb7 	.word	0x08005bb7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	18d1      	adds	r1, r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6a:	f7ff ff69 	bl	8005a40 <prvInsertTimerInActiveList>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d045      	beq.n	8005c00 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d13d      	bne.n	8005c00 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	441a      	add	r2, r3
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	2100      	movs	r1, #0
 8005b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b96:	f7ff fe23 	bl	80057e0 <xTimerGenericCommand>
 8005b9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d12e      	bne.n	8005c00 <prvProcessReceivedCommands+0x13c>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	e7fe      	b.n	8005bb4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <prvProcessReceivedCommands+0x114>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e7fe      	b.n	8005bd6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	18d1      	adds	r1, r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be6:	f7ff ff2b 	bl	8005a40 <prvInsertTimerInActiveList>
					break;
 8005bea:	e009      	b.n	8005c00 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf8:	f000 fb56 	bl	80062a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bfc:	e000      	b.n	8005c00 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005bfe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <prvProcessReceivedCommands+0x15c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	1d39      	adds	r1, r7, #4
 8005c06:	2200      	movs	r2, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fbf7 	bl	80043fc <xQueueReceive>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f af5b 	bne.w	8005acc <prvProcessReceivedCommands+0x8>
	}
}
 8005c16:	bf00      	nop
 8005c18:	3730      	adds	r7, #48	; 0x30
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000c80 	.word	0x20000c80

08005c24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c2a:	e044      	b.n	8005cb6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c2c:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <prvSwitchTimerLists+0xb8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c36:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <prvSwitchTimerLists+0xb8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe f8e7 	bl	8003e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d12d      	bne.n	8005cb6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4413      	add	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d90e      	bls.n	8005c8a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c78:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <prvSwitchTimerLists+0xb8>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fe f890 	bl	8003da8 <vListInsert>
 8005c88:	e015      	b.n	8005cb6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	2100      	movs	r1, #0
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fda3 	bl	80057e0 <xTimerGenericCommand>
 8005c9a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <prvSwitchTimerLists+0x92>
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	e7fe      	b.n	8005cb4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <prvSwitchTimerLists+0xb8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1b5      	bne.n	8005c2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <prvSwitchTimerLists+0xb8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <prvSwitchTimerLists+0xbc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a04      	ldr	r2, [pc, #16]	; (8005cdc <prvSwitchTimerLists+0xb8>)
 8005ccc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cce:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <prvSwitchTimerLists+0xbc>)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000c78 	.word	0x20000c78
 8005ce0:	20000c7c 	.word	0x20000c7c

08005ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cea:	f000 f925 	bl	8005f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cee:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <prvCheckForValidListAndQueue+0x60>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d120      	bne.n	8005d38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cf6:	4814      	ldr	r0, [pc, #80]	; (8005d48 <prvCheckForValidListAndQueue+0x64>)
 8005cf8:	f7fe f808 	bl	8003d0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005cfc:	4813      	ldr	r0, [pc, #76]	; (8005d4c <prvCheckForValidListAndQueue+0x68>)
 8005cfe:	f7fe f805 	bl	8003d0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d02:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <prvCheckForValidListAndQueue+0x6c>)
 8005d04:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <prvCheckForValidListAndQueue+0x64>)
 8005d06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <prvCheckForValidListAndQueue+0x70>)
 8005d0a:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <prvCheckForValidListAndQueue+0x68>)
 8005d0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <prvCheckForValidListAndQueue+0x74>)
 8005d14:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <prvCheckForValidListAndQueue+0x78>)
 8005d16:	2110      	movs	r1, #16
 8005d18:	200a      	movs	r0, #10
 8005d1a:	f7fe f90f 	bl	8003f3c <xQueueGenericCreateStatic>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <prvCheckForValidListAndQueue+0x60>)
 8005d22:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d24:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <prvCheckForValidListAndQueue+0x60>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <prvCheckForValidListAndQueue+0x60>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	490b      	ldr	r1, [pc, #44]	; (8005d60 <prvCheckForValidListAndQueue+0x7c>)
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fdcc 	bl	80048d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d38:	f000 f92c 	bl	8005f94 <vPortExitCritical>
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000c80 	.word	0x20000c80
 8005d48:	20000c50 	.word	0x20000c50
 8005d4c:	20000c64 	.word	0x20000c64
 8005d50:	20000c78 	.word	0x20000c78
 8005d54:	20000c7c 	.word	0x20000c7c
 8005d58:	20000d2c 	.word	0x20000d2c
 8005d5c:	20000c8c 	.word	0x20000c8c
 8005d60:	08006e64 	.word	0x08006e64

08005d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3b04      	subs	r3, #4
 8005d74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 0201 	bic.w	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b04      	subs	r3, #4
 8005d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <pxPortInitialiseStack+0x54>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3b14      	subs	r3, #20
 8005d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3b20      	subs	r3, #32
 8005daa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dac:	68fb      	ldr	r3, [r7, #12]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	08005dbd 	.word	0x08005dbd

08005dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <prvTaskExitError+0x4c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dce:	d009      	beq.n	8005de4 <prvTaskExitError+0x28>
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e7fe      	b.n	8005de2 <prvTaskExitError+0x26>
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005df6:	bf00      	nop
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0fc      	beq.n	8005df8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	00000000 	.word	0x00000000

08005e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <pxCurrentTCBConst2>)
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	6808      	ldr	r0, [r1, #0]
 8005e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e1a:	f380 8809 	msr	PSP, r0
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8811 	msr	BASEPRI, r0
 8005e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e2e:	4770      	bx	lr

08005e30 <pxCurrentTCBConst2>:
 8005e30:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e38:	4806      	ldr	r0, [pc, #24]	; (8005e54 <prvPortStartFirstTask+0x1c>)
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	f380 8808 	msr	MSP, r0
 8005e42:	b662      	cpsie	i
 8005e44:	b661      	cpsie	f
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	df00      	svc	0
 8005e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e52:	bf00      	nop
 8005e54:	e000ed08 	.word	0xe000ed08

08005e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e5e:	4b31      	ldr	r3, [pc, #196]	; (8005f24 <xPortStartScheduler+0xcc>)
 8005e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	22ff      	movs	r2, #255	; 0xff
 8005e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <xPortStartScheduler+0xd0>)
 8005e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e86:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005e88:	2207      	movs	r2, #7
 8005e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e8c:	e009      	b.n	8005ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e8e:	4b27      	ldr	r3, [pc, #156]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d0ef      	beq.n	8005e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005eae:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f1c3 0307 	rsb	r3, r3, #7
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d009      	beq.n	8005ece <xPortStartScheduler+0x76>
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	e7fe      	b.n	8005ecc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ece:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005ed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ee0:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <xPortStartScheduler+0xd4>)
 8005ee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eec:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <xPortStartScheduler+0xd8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0f      	ldr	r2, [pc, #60]	; (8005f30 <xPortStartScheduler+0xd8>)
 8005ef2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ef8:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <xPortStartScheduler+0xd8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <xPortStartScheduler+0xd8>)
 8005efe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f04:	f000 f8b0 	bl	8006068 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <xPortStartScheduler+0xdc>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f0e:	f7ff ff93 	bl	8005e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f12:	f7ff f8db 	bl	80050cc <vTaskSwitchContext>
	prvTaskExitError();
 8005f16:	f7ff ff51 	bl	8005dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	e000e400 	.word	0xe000e400
 8005f28:	20000d7c 	.word	0x20000d7c
 8005f2c:	20000d80 	.word	0x20000d80
 8005f30:	e000ed20 	.word	0xe000ed20
 8005f34:	2000000c 	.word	0x2000000c

08005f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f50:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <vPortEnterCritical+0x54>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	4a0d      	ldr	r2, [pc, #52]	; (8005f8c <vPortEnterCritical+0x54>)
 8005f58:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <vPortEnterCritical+0x54>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10e      	bne.n	8005f80 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <vPortEnterCritical+0x58>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <vPortEnterCritical+0x48>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	e7fe      	b.n	8005f7e <vPortEnterCritical+0x46>
	}
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000000c 	.word	0x2000000c
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f9a:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <vPortExitCritical+0x48>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <vPortExitCritical+0x22>
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	e7fe      	b.n	8005fb4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <vPortExitCritical+0x48>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a07      	ldr	r2, [pc, #28]	; (8005fdc <vPortExitCritical+0x48>)
 8005fbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <vPortExitCritical+0x48>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <vPortExitCritical+0x3e>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ff0:	6010      	str	r0, [r2, #0]
 8005ff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ff6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ffa:	f380 8811 	msr	BASEPRI, r0
 8005ffe:	f7ff f865 	bl	80050cc <vTaskSwitchContext>
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	6808      	ldr	r0, [r1, #0]
 8006012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006016:	f380 8809 	msr	PSP, r0
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	4770      	bx	lr

08006020 <pxCurrentTCBConst>:
 8006020:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006040:	f7fe ff86 	bl	8004f50 <xTaskIncrementTick>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <SysTick_Handler+0x3c>)
 800604c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <vPortSetupTimerInterrupt+0x30>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vPortSetupTimerInterrupt+0x34>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <vPortSetupTimerInterrupt+0x38>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <vPortSetupTimerInterrupt+0x3c>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <vPortSetupTimerInterrupt+0x40>)
 8006086:	3b01      	subs	r3, #1
 8006088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800608a:	4b03      	ldr	r3, [pc, #12]	; (8006098 <vPortSetupTimerInterrupt+0x30>)
 800608c:	2207      	movs	r2, #7
 800608e:	601a      	str	r2, [r3, #0]
}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	e000e010 	.word	0xe000e010
 800609c:	e000e018 	.word	0xe000e018
 80060a0:	20000000 	.word	0x20000000
 80060a4:	10624dd3 	.word	0x10624dd3
 80060a8:	e000e014 	.word	0xe000e014

080060ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060b2:	f3ef 8305 	mrs	r3, IPSR
 80060b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b0f      	cmp	r3, #15
 80060bc:	d913      	bls.n	80060e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060be:	4a15      	ldr	r2, [pc, #84]	; (8006114 <vPortValidateInterruptPriority+0x68>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060c8:	4b13      	ldr	r3, [pc, #76]	; (8006118 <vPortValidateInterruptPriority+0x6c>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	7afa      	ldrb	r2, [r7, #11]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d209      	bcs.n	80060e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	e7fe      	b.n	80060e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <vPortValidateInterruptPriority+0x70>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <vPortValidateInterruptPriority+0x74>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d909      	bls.n	800610a <vPortValidateInterruptPriority+0x5e>
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	e7fe      	b.n	8006108 <vPortValidateInterruptPriority+0x5c>
	}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	e000e3f0 	.word	0xe000e3f0
 8006118:	20000d7c 	.word	0x20000d7c
 800611c:	e000ed0c 	.word	0xe000ed0c
 8006120:	20000d80 	.word	0x20000d80

08006124 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006130:	f7fe fe56 	bl	8004de0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006134:	4b57      	ldr	r3, [pc, #348]	; (8006294 <pvPortMalloc+0x170>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800613c:	f000 f90c 	bl	8006358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006140:	4b55      	ldr	r3, [pc, #340]	; (8006298 <pvPortMalloc+0x174>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 808c 	bne.w	8006266 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006154:	2208      	movs	r2, #8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f023 0307 	bic.w	r3, r3, #7
 800616c:	3308      	adds	r3, #8
 800616e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <pvPortMalloc+0x6a>
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e7fe      	b.n	800618c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d068      	beq.n	8006266 <pvPortMalloc+0x142>
 8006194:	4b41      	ldr	r3, [pc, #260]	; (800629c <pvPortMalloc+0x178>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	429a      	cmp	r2, r3
 800619c:	d863      	bhi.n	8006266 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800619e:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <pvPortMalloc+0x17c>)
 80061a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061a2:	4b3f      	ldr	r3, [pc, #252]	; (80062a0 <pvPortMalloc+0x17c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061a8:	e004      	b.n	80061b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d903      	bls.n	80061c6 <pvPortMalloc+0xa2>
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f1      	bne.n	80061aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061c6:	4b33      	ldr	r3, [pc, #204]	; (8006294 <pvPortMalloc+0x170>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d04a      	beq.n	8006266 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2208      	movs	r2, #8
 80061d6:	4413      	add	r3, r2
 80061d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	2308      	movs	r3, #8
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d91e      	bls.n	8006230 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4413      	add	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <pvPortMalloc+0xf4>
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	e7fe      	b.n	8006216 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800622a:	69b8      	ldr	r0, [r7, #24]
 800622c:	f000 f8f6 	bl	800641c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <pvPortMalloc+0x178>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	4a18      	ldr	r2, [pc, #96]	; (800629c <pvPortMalloc+0x178>)
 800623c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800623e:	4b17      	ldr	r3, [pc, #92]	; (800629c <pvPortMalloc+0x178>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <pvPortMalloc+0x180>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d203      	bcs.n	8006252 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <pvPortMalloc+0x178>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <pvPortMalloc+0x180>)
 8006250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <pvPortMalloc+0x174>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	431a      	orrs	r2, r3
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006266:	f7fe fdc9 	bl	8004dfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <pvPortMalloc+0x164>
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e7fe      	b.n	8006286 <pvPortMalloc+0x162>
	return pvReturn;
 8006288:	69fb      	ldr	r3, [r7, #28]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	2000198c 	.word	0x2000198c
 8006298:	20001998 	.word	0x20001998
 800629c:	20001990 	.word	0x20001990
 80062a0:	20001984 	.word	0x20001984
 80062a4:	20001994 	.word	0x20001994

080062a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d046      	beq.n	8006348 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062ba:	2308      	movs	r3, #8
 80062bc:	425b      	negs	r3, r3
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	4b20      	ldr	r3, [pc, #128]	; (8006350 <vPortFree+0xa8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <vPortFree+0x42>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e7fe      	b.n	80062e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <vPortFree+0x5e>
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	e7fe      	b.n	8006304 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <vPortFree+0xa8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d019      	beq.n	8006348 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d115      	bne.n	8006348 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <vPortFree+0xa8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800632c:	f7fe fd58 	bl	8004de0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <vPortFree+0xac>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4413      	add	r3, r2
 800633a:	4a06      	ldr	r2, [pc, #24]	; (8006354 <vPortFree+0xac>)
 800633c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800633e:	6938      	ldr	r0, [r7, #16]
 8006340:	f000 f86c 	bl	800641c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006344:	f7fe fd5a 	bl	8004dfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20001998 	.word	0x20001998
 8006354:	20001990 	.word	0x20001990

08006358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800635e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006364:	4b27      	ldr	r3, [pc, #156]	; (8006404 <prvHeapInit+0xac>)
 8006366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3307      	adds	r3, #7
 8006376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0307 	bic.w	r3, r3, #7
 800637e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	4a1f      	ldr	r2, [pc, #124]	; (8006404 <prvHeapInit+0xac>)
 8006388:	4413      	add	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006390:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <prvHeapInit+0xb0>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006396:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <prvHeapInit+0xb0>)
 8006398:	2200      	movs	r2, #0
 800639a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4413      	add	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063a4:	2208      	movs	r2, #8
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <prvHeapInit+0xb4>)
 80063b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063ba:	4b14      	ldr	r3, [pc, #80]	; (800640c <prvHeapInit+0xb4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <prvHeapInit+0xb4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063d8:	4b0c      	ldr	r3, [pc, #48]	; (800640c <prvHeapInit+0xb4>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <prvHeapInit+0xb8>)
 80063e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4a09      	ldr	r2, [pc, #36]	; (8006414 <prvHeapInit+0xbc>)
 80063ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063f0:	4b09      	ldr	r3, [pc, #36]	; (8006418 <prvHeapInit+0xc0>)
 80063f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063f6:	601a      	str	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000d84 	.word	0x20000d84
 8006408:	20001984 	.word	0x20001984
 800640c:	2000198c 	.word	0x2000198c
 8006410:	20001994 	.word	0x20001994
 8006414:	20001990 	.word	0x20001990
 8006418:	20001998 	.word	0x20001998

0800641c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006424:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <prvInsertBlockIntoFreeList+0xa8>)
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e002      	b.n	8006430 <prvInsertBlockIntoFreeList+0x14>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d8f7      	bhi.n	800642a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4413      	add	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d108      	bne.n	800645e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	441a      	add	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	441a      	add	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d118      	bne.n	80064a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <prvInsertBlockIntoFreeList+0xac>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d00d      	beq.n	800649a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	441a      	add	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e008      	b.n	80064ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <prvInsertBlockIntoFreeList+0xac>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e003      	b.n	80064ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d002      	beq.n	80064ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	20001984 	.word	0x20001984
 80064c8:	2000198c 	.word	0x2000198c

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000010 	.word	0x20000010

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	2500      	movs	r5, #0
 80064dc:	4e0c      	ldr	r6, [pc, #48]	; (8006510 <__libc_init_array+0x38>)
 80064de:	4c0d      	ldr	r4, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064e0:	1ba4      	subs	r4, r4, r6
 80064e2:	10a4      	asrs	r4, r4, #2
 80064e4:	42a5      	cmp	r5, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	f000 fc3e 	bl	8006d68 <_init>
 80064ec:	2500      	movs	r5, #0
 80064ee:	4e0a      	ldr	r6, [pc, #40]	; (8006518 <__libc_init_array+0x40>)
 80064f0:	4c0a      	ldr	r4, [pc, #40]	; (800651c <__libc_init_array+0x44>)
 80064f2:	1ba4      	subs	r4, r4, r6
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	42a5      	cmp	r5, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006500:	4798      	blx	r3
 8006502:	3501      	adds	r5, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800650a:	4798      	blx	r3
 800650c:	3501      	adds	r5, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08006f6c 	.word	0x08006f6c
 8006514:	08006f6c 	.word	0x08006f6c
 8006518:	08006f6c 	.word	0x08006f6c
 800651c:	08006f70 	.word	0x08006f70

08006520 <memcpy>:
 8006520:	b510      	push	{r4, lr}
 8006522:	1e43      	subs	r3, r0, #1
 8006524:	440a      	add	r2, r1
 8006526:	4291      	cmp	r1, r2
 8006528:	d100      	bne.n	800652c <memcpy+0xc>
 800652a:	bd10      	pop	{r4, pc}
 800652c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006534:	e7f7      	b.n	8006526 <memcpy+0x6>

08006536 <memset>:
 8006536:	4603      	mov	r3, r0
 8006538:	4402      	add	r2, r0
 800653a:	4293      	cmp	r3, r2
 800653c:	d100      	bne.n	8006540 <memset+0xa>
 800653e:	4770      	bx	lr
 8006540:	f803 1b01 	strb.w	r1, [r3], #1
 8006544:	e7f9      	b.n	800653a <memset+0x4>
	...

08006548 <siprintf>:
 8006548:	b40e      	push	{r1, r2, r3}
 800654a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800654e:	b500      	push	{lr}
 8006550:	b09c      	sub	sp, #112	; 0x70
 8006552:	ab1d      	add	r3, sp, #116	; 0x74
 8006554:	9002      	str	r0, [sp, #8]
 8006556:	9006      	str	r0, [sp, #24]
 8006558:	9107      	str	r1, [sp, #28]
 800655a:	9104      	str	r1, [sp, #16]
 800655c:	4808      	ldr	r0, [pc, #32]	; (8006580 <siprintf+0x38>)
 800655e:	4909      	ldr	r1, [pc, #36]	; (8006584 <siprintf+0x3c>)
 8006560:	f853 2b04 	ldr.w	r2, [r3], #4
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	6800      	ldr	r0, [r0, #0]
 8006568:	a902      	add	r1, sp, #8
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	f000 f86e 	bl	800664c <_svfiprintf_r>
 8006570:	2200      	movs	r2, #0
 8006572:	9b02      	ldr	r3, [sp, #8]
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	b01c      	add	sp, #112	; 0x70
 8006578:	f85d eb04 	ldr.w	lr, [sp], #4
 800657c:	b003      	add	sp, #12
 800657e:	4770      	bx	lr
 8006580:	20000010 	.word	0x20000010
 8006584:	ffff0208 	.word	0xffff0208

08006588 <strcpy>:
 8006588:	4603      	mov	r3, r0
 800658a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658e:	f803 2b01 	strb.w	r2, [r3], #1
 8006592:	2a00      	cmp	r2, #0
 8006594:	d1f9      	bne.n	800658a <strcpy+0x2>
 8006596:	4770      	bx	lr

08006598 <__ssputs_r>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	688e      	ldr	r6, [r1, #8]
 800659e:	4682      	mov	sl, r0
 80065a0:	429e      	cmp	r6, r3
 80065a2:	460c      	mov	r4, r1
 80065a4:	4690      	mov	r8, r2
 80065a6:	4699      	mov	r9, r3
 80065a8:	d837      	bhi.n	800661a <__ssputs_r+0x82>
 80065aa:	898a      	ldrh	r2, [r1, #12]
 80065ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065b0:	d031      	beq.n	8006616 <__ssputs_r+0x7e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	6825      	ldr	r5, [r4, #0]
 80065b6:	6909      	ldr	r1, [r1, #16]
 80065b8:	1a6f      	subs	r7, r5, r1
 80065ba:	6965      	ldr	r5, [r4, #20]
 80065bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80065c4:	f109 0301 	add.w	r3, r9, #1
 80065c8:	443b      	add	r3, r7
 80065ca:	429d      	cmp	r5, r3
 80065cc:	bf38      	it	cc
 80065ce:	461d      	movcc	r5, r3
 80065d0:	0553      	lsls	r3, r2, #21
 80065d2:	d530      	bpl.n	8006636 <__ssputs_r+0x9e>
 80065d4:	4629      	mov	r1, r5
 80065d6:	f000 fb2d 	bl	8006c34 <_malloc_r>
 80065da:	4606      	mov	r6, r0
 80065dc:	b950      	cbnz	r0, 80065f4 <__ssputs_r+0x5c>
 80065de:	230c      	movs	r3, #12
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065e4:	f8ca 3000 	str.w	r3, [sl]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	463a      	mov	r2, r7
 80065f6:	6921      	ldr	r1, [r4, #16]
 80065f8:	f7ff ff92 	bl	8006520 <memcpy>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	6126      	str	r6, [r4, #16]
 800660a:	443e      	add	r6, r7
 800660c:	6026      	str	r6, [r4, #0]
 800660e:	464e      	mov	r6, r9
 8006610:	6165      	str	r5, [r4, #20]
 8006612:	1bed      	subs	r5, r5, r7
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	454e      	cmp	r6, r9
 8006618:	d900      	bls.n	800661c <__ssputs_r+0x84>
 800661a:	464e      	mov	r6, r9
 800661c:	4632      	mov	r2, r6
 800661e:	4641      	mov	r1, r8
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	f000 faa1 	bl	8006b68 <memmove>
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	2000      	movs	r0, #0
 800662a:	1b9b      	subs	r3, r3, r6
 800662c:	60a3      	str	r3, [r4, #8]
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	441e      	add	r6, r3
 8006632:	6026      	str	r6, [r4, #0]
 8006634:	e7dc      	b.n	80065f0 <__ssputs_r+0x58>
 8006636:	462a      	mov	r2, r5
 8006638:	f000 fb56 	bl	8006ce8 <_realloc_r>
 800663c:	4606      	mov	r6, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	d1e2      	bne.n	8006608 <__ssputs_r+0x70>
 8006642:	6921      	ldr	r1, [r4, #16]
 8006644:	4650      	mov	r0, sl
 8006646:	f000 faa9 	bl	8006b9c <_free_r>
 800664a:	e7c8      	b.n	80065de <__ssputs_r+0x46>

0800664c <_svfiprintf_r>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	461d      	mov	r5, r3
 8006652:	898b      	ldrh	r3, [r1, #12]
 8006654:	b09d      	sub	sp, #116	; 0x74
 8006656:	061f      	lsls	r7, r3, #24
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	4616      	mov	r6, r2
 800665e:	d50f      	bpl.n	8006680 <_svfiprintf_r+0x34>
 8006660:	690b      	ldr	r3, [r1, #16]
 8006662:	b96b      	cbnz	r3, 8006680 <_svfiprintf_r+0x34>
 8006664:	2140      	movs	r1, #64	; 0x40
 8006666:	f000 fae5 	bl	8006c34 <_malloc_r>
 800666a:	6020      	str	r0, [r4, #0]
 800666c:	6120      	str	r0, [r4, #16]
 800666e:	b928      	cbnz	r0, 800667c <_svfiprintf_r+0x30>
 8006670:	230c      	movs	r3, #12
 8006672:	f8c8 3000 	str.w	r3, [r8]
 8006676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800667a:	e0c8      	b.n	800680e <_svfiprintf_r+0x1c2>
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	6163      	str	r3, [r4, #20]
 8006680:	2300      	movs	r3, #0
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	2320      	movs	r3, #32
 8006686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800668a:	2330      	movs	r3, #48	; 0x30
 800668c:	f04f 0b01 	mov.w	fp, #1
 8006690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006694:	9503      	str	r5, [sp, #12]
 8006696:	4637      	mov	r7, r6
 8006698:	463d      	mov	r5, r7
 800669a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800669e:	b10b      	cbz	r3, 80066a4 <_svfiprintf_r+0x58>
 80066a0:	2b25      	cmp	r3, #37	; 0x25
 80066a2:	d13e      	bne.n	8006722 <_svfiprintf_r+0xd6>
 80066a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80066a8:	d00b      	beq.n	80066c2 <_svfiprintf_r+0x76>
 80066aa:	4653      	mov	r3, sl
 80066ac:	4632      	mov	r2, r6
 80066ae:	4621      	mov	r1, r4
 80066b0:	4640      	mov	r0, r8
 80066b2:	f7ff ff71 	bl	8006598 <__ssputs_r>
 80066b6:	3001      	adds	r0, #1
 80066b8:	f000 80a4 	beq.w	8006804 <_svfiprintf_r+0x1b8>
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	4453      	add	r3, sl
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	783b      	ldrb	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 809d 	beq.w	8006804 <_svfiprintf_r+0x1b8>
 80066ca:	2300      	movs	r3, #0
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d4:	9304      	str	r3, [sp, #16]
 80066d6:	9307      	str	r3, [sp, #28]
 80066d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066dc:	931a      	str	r3, [sp, #104]	; 0x68
 80066de:	462f      	mov	r7, r5
 80066e0:	2205      	movs	r2, #5
 80066e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80066e6:	4850      	ldr	r0, [pc, #320]	; (8006828 <_svfiprintf_r+0x1dc>)
 80066e8:	f000 fa30 	bl	8006b4c <memchr>
 80066ec:	9b04      	ldr	r3, [sp, #16]
 80066ee:	b9d0      	cbnz	r0, 8006726 <_svfiprintf_r+0xda>
 80066f0:	06d9      	lsls	r1, r3, #27
 80066f2:	bf44      	itt	mi
 80066f4:	2220      	movmi	r2, #32
 80066f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066fa:	071a      	lsls	r2, r3, #28
 80066fc:	bf44      	itt	mi
 80066fe:	222b      	movmi	r2, #43	; 0x2b
 8006700:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006704:	782a      	ldrb	r2, [r5, #0]
 8006706:	2a2a      	cmp	r2, #42	; 0x2a
 8006708:	d015      	beq.n	8006736 <_svfiprintf_r+0xea>
 800670a:	462f      	mov	r7, r5
 800670c:	2000      	movs	r0, #0
 800670e:	250a      	movs	r5, #10
 8006710:	9a07      	ldr	r2, [sp, #28]
 8006712:	4639      	mov	r1, r7
 8006714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006718:	3b30      	subs	r3, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d94d      	bls.n	80067ba <_svfiprintf_r+0x16e>
 800671e:	b1b8      	cbz	r0, 8006750 <_svfiprintf_r+0x104>
 8006720:	e00f      	b.n	8006742 <_svfiprintf_r+0xf6>
 8006722:	462f      	mov	r7, r5
 8006724:	e7b8      	b.n	8006698 <_svfiprintf_r+0x4c>
 8006726:	4a40      	ldr	r2, [pc, #256]	; (8006828 <_svfiprintf_r+0x1dc>)
 8006728:	463d      	mov	r5, r7
 800672a:	1a80      	subs	r0, r0, r2
 800672c:	fa0b f000 	lsl.w	r0, fp, r0
 8006730:	4318      	orrs	r0, r3
 8006732:	9004      	str	r0, [sp, #16]
 8006734:	e7d3      	b.n	80066de <_svfiprintf_r+0x92>
 8006736:	9a03      	ldr	r2, [sp, #12]
 8006738:	1d11      	adds	r1, r2, #4
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	9103      	str	r1, [sp, #12]
 800673e:	2a00      	cmp	r2, #0
 8006740:	db01      	blt.n	8006746 <_svfiprintf_r+0xfa>
 8006742:	9207      	str	r2, [sp, #28]
 8006744:	e004      	b.n	8006750 <_svfiprintf_r+0x104>
 8006746:	4252      	negs	r2, r2
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	9207      	str	r2, [sp, #28]
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	783b      	ldrb	r3, [r7, #0]
 8006752:	2b2e      	cmp	r3, #46	; 0x2e
 8006754:	d10c      	bne.n	8006770 <_svfiprintf_r+0x124>
 8006756:	787b      	ldrb	r3, [r7, #1]
 8006758:	2b2a      	cmp	r3, #42	; 0x2a
 800675a:	d133      	bne.n	80067c4 <_svfiprintf_r+0x178>
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	3702      	adds	r7, #2
 8006760:	1d1a      	adds	r2, r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	9203      	str	r2, [sp, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfb8      	it	lt
 800676a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800676e:	9305      	str	r3, [sp, #20]
 8006770:	4d2e      	ldr	r5, [pc, #184]	; (800682c <_svfiprintf_r+0x1e0>)
 8006772:	2203      	movs	r2, #3
 8006774:	7839      	ldrb	r1, [r7, #0]
 8006776:	4628      	mov	r0, r5
 8006778:	f000 f9e8 	bl	8006b4c <memchr>
 800677c:	b138      	cbz	r0, 800678e <_svfiprintf_r+0x142>
 800677e:	2340      	movs	r3, #64	; 0x40
 8006780:	1b40      	subs	r0, r0, r5
 8006782:	fa03 f000 	lsl.w	r0, r3, r0
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	3701      	adds	r7, #1
 800678a:	4303      	orrs	r3, r0
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	7839      	ldrb	r1, [r7, #0]
 8006790:	2206      	movs	r2, #6
 8006792:	4827      	ldr	r0, [pc, #156]	; (8006830 <_svfiprintf_r+0x1e4>)
 8006794:	1c7e      	adds	r6, r7, #1
 8006796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800679a:	f000 f9d7 	bl	8006b4c <memchr>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d038      	beq.n	8006814 <_svfiprintf_r+0x1c8>
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <_svfiprintf_r+0x1e8>)
 80067a4:	bb13      	cbnz	r3, 80067ec <_svfiprintf_r+0x1a0>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	3307      	adds	r3, #7
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	3308      	adds	r3, #8
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b4:	444b      	add	r3, r9
 80067b6:	9309      	str	r3, [sp, #36]	; 0x24
 80067b8:	e76d      	b.n	8006696 <_svfiprintf_r+0x4a>
 80067ba:	fb05 3202 	mla	r2, r5, r2, r3
 80067be:	2001      	movs	r0, #1
 80067c0:	460f      	mov	r7, r1
 80067c2:	e7a6      	b.n	8006712 <_svfiprintf_r+0xc6>
 80067c4:	2300      	movs	r3, #0
 80067c6:	250a      	movs	r5, #10
 80067c8:	4619      	mov	r1, r3
 80067ca:	3701      	adds	r7, #1
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	4638      	mov	r0, r7
 80067d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d4:	3a30      	subs	r2, #48	; 0x30
 80067d6:	2a09      	cmp	r2, #9
 80067d8:	d903      	bls.n	80067e2 <_svfiprintf_r+0x196>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0c8      	beq.n	8006770 <_svfiprintf_r+0x124>
 80067de:	9105      	str	r1, [sp, #20]
 80067e0:	e7c6      	b.n	8006770 <_svfiprintf_r+0x124>
 80067e2:	fb05 2101 	mla	r1, r5, r1, r2
 80067e6:	2301      	movs	r3, #1
 80067e8:	4607      	mov	r7, r0
 80067ea:	e7f0      	b.n	80067ce <_svfiprintf_r+0x182>
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4622      	mov	r2, r4
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <_svfiprintf_r+0x1ec>)
 80067f4:	a904      	add	r1, sp, #16
 80067f6:	4640      	mov	r0, r8
 80067f8:	f3af 8000 	nop.w
 80067fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006800:	4681      	mov	r9, r0
 8006802:	d1d6      	bne.n	80067b2 <_svfiprintf_r+0x166>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	065b      	lsls	r3, r3, #25
 8006808:	f53f af35 	bmi.w	8006676 <_svfiprintf_r+0x2a>
 800680c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800680e:	b01d      	add	sp, #116	; 0x74
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	ab03      	add	r3, sp, #12
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4622      	mov	r2, r4
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <_svfiprintf_r+0x1ec>)
 800681c:	a904      	add	r1, sp, #16
 800681e:	4640      	mov	r0, r8
 8006820:	f000 f882 	bl	8006928 <_printf_i>
 8006824:	e7ea      	b.n	80067fc <_svfiprintf_r+0x1b0>
 8006826:	bf00      	nop
 8006828:	08006f38 	.word	0x08006f38
 800682c:	08006f3e 	.word	0x08006f3e
 8006830:	08006f42 	.word	0x08006f42
 8006834:	00000000 	.word	0x00000000
 8006838:	08006599 	.word	0x08006599

0800683c <_printf_common>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	4691      	mov	r9, r2
 8006842:	461f      	mov	r7, r3
 8006844:	688a      	ldr	r2, [r1, #8]
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	4606      	mov	r6, r0
 800684a:	4293      	cmp	r3, r2
 800684c:	bfb8      	it	lt
 800684e:	4613      	movlt	r3, r2
 8006850:	f8c9 3000 	str.w	r3, [r9]
 8006854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006858:	460c      	mov	r4, r1
 800685a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800685e:	b112      	cbz	r2, 8006866 <_printf_common+0x2a>
 8006860:	3301      	adds	r3, #1
 8006862:	f8c9 3000 	str.w	r3, [r9]
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	0699      	lsls	r1, r3, #26
 800686a:	bf42      	ittt	mi
 800686c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006870:	3302      	addmi	r3, #2
 8006872:	f8c9 3000 	strmi.w	r3, [r9]
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	f015 0506 	ands.w	r5, r5, #6
 800687c:	d107      	bne.n	800688e <_printf_common+0x52>
 800687e:	f104 0a19 	add.w	sl, r4, #25
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	f8d9 2000 	ldr.w	r2, [r9]
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	42ab      	cmp	r3, r5
 800688c:	dc29      	bgt.n	80068e2 <_printf_common+0xa6>
 800688e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	3300      	adds	r3, #0
 8006896:	bf18      	it	ne
 8006898:	2301      	movne	r3, #1
 800689a:	0692      	lsls	r2, r2, #26
 800689c:	d42e      	bmi.n	80068fc <_printf_common+0xc0>
 800689e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a2:	4639      	mov	r1, r7
 80068a4:	4630      	mov	r0, r6
 80068a6:	47c0      	blx	r8
 80068a8:	3001      	adds	r0, #1
 80068aa:	d021      	beq.n	80068f0 <_printf_common+0xb4>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	68e5      	ldr	r5, [r4, #12]
 80068b0:	f003 0306 	and.w	r3, r3, #6
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	bf18      	it	ne
 80068b8:	2500      	movne	r5, #0
 80068ba:	f8d9 2000 	ldr.w	r2, [r9]
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	bf08      	it	eq
 80068c4:	1aad      	subeq	r5, r5, r2
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	bf08      	it	eq
 80068cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bfc4      	itt	gt
 80068d4:	1a9b      	subgt	r3, r3, r2
 80068d6:	18ed      	addgt	r5, r5, r3
 80068d8:	341a      	adds	r4, #26
 80068da:	454d      	cmp	r5, r9
 80068dc:	d11a      	bne.n	8006914 <_printf_common+0xd8>
 80068de:	2000      	movs	r0, #0
 80068e0:	e008      	b.n	80068f4 <_printf_common+0xb8>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4652      	mov	r2, sl
 80068e6:	4639      	mov	r1, r7
 80068e8:	4630      	mov	r0, r6
 80068ea:	47c0      	blx	r8
 80068ec:	3001      	adds	r0, #1
 80068ee:	d103      	bne.n	80068f8 <_printf_common+0xbc>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	3501      	adds	r5, #1
 80068fa:	e7c2      	b.n	8006882 <_printf_common+0x46>
 80068fc:	2030      	movs	r0, #48	; 0x30
 80068fe:	18e1      	adds	r1, r4, r3
 8006900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800690a:	4422      	add	r2, r4
 800690c:	3302      	adds	r3, #2
 800690e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006912:	e7c4      	b.n	800689e <_printf_common+0x62>
 8006914:	2301      	movs	r3, #1
 8006916:	4622      	mov	r2, r4
 8006918:	4639      	mov	r1, r7
 800691a:	4630      	mov	r0, r6
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d0e6      	beq.n	80068f0 <_printf_common+0xb4>
 8006922:	f109 0901 	add.w	r9, r9, #1
 8006926:	e7d8      	b.n	80068da <_printf_common+0x9e>

08006928 <_printf_i>:
 8006928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800692c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006930:	460c      	mov	r4, r1
 8006932:	7e09      	ldrb	r1, [r1, #24]
 8006934:	b085      	sub	sp, #20
 8006936:	296e      	cmp	r1, #110	; 0x6e
 8006938:	4617      	mov	r7, r2
 800693a:	4606      	mov	r6, r0
 800693c:	4698      	mov	r8, r3
 800693e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006940:	f000 80b3 	beq.w	8006aaa <_printf_i+0x182>
 8006944:	d822      	bhi.n	800698c <_printf_i+0x64>
 8006946:	2963      	cmp	r1, #99	; 0x63
 8006948:	d036      	beq.n	80069b8 <_printf_i+0x90>
 800694a:	d80a      	bhi.n	8006962 <_printf_i+0x3a>
 800694c:	2900      	cmp	r1, #0
 800694e:	f000 80b9 	beq.w	8006ac4 <_printf_i+0x19c>
 8006952:	2958      	cmp	r1, #88	; 0x58
 8006954:	f000 8083 	beq.w	8006a5e <_printf_i+0x136>
 8006958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800695c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006960:	e032      	b.n	80069c8 <_printf_i+0xa0>
 8006962:	2964      	cmp	r1, #100	; 0x64
 8006964:	d001      	beq.n	800696a <_printf_i+0x42>
 8006966:	2969      	cmp	r1, #105	; 0x69
 8006968:	d1f6      	bne.n	8006958 <_printf_i+0x30>
 800696a:	6820      	ldr	r0, [r4, #0]
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	0605      	lsls	r5, r0, #24
 8006970:	f103 0104 	add.w	r1, r3, #4
 8006974:	d52a      	bpl.n	80069cc <_printf_i+0xa4>
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	da03      	bge.n	8006986 <_printf_i+0x5e>
 800697e:	222d      	movs	r2, #45	; 0x2d
 8006980:	425b      	negs	r3, r3
 8006982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006986:	486f      	ldr	r0, [pc, #444]	; (8006b44 <_printf_i+0x21c>)
 8006988:	220a      	movs	r2, #10
 800698a:	e039      	b.n	8006a00 <_printf_i+0xd8>
 800698c:	2973      	cmp	r1, #115	; 0x73
 800698e:	f000 809d 	beq.w	8006acc <_printf_i+0x1a4>
 8006992:	d808      	bhi.n	80069a6 <_printf_i+0x7e>
 8006994:	296f      	cmp	r1, #111	; 0x6f
 8006996:	d020      	beq.n	80069da <_printf_i+0xb2>
 8006998:	2970      	cmp	r1, #112	; 0x70
 800699a:	d1dd      	bne.n	8006958 <_printf_i+0x30>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	f043 0320 	orr.w	r3, r3, #32
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	e003      	b.n	80069ae <_printf_i+0x86>
 80069a6:	2975      	cmp	r1, #117	; 0x75
 80069a8:	d017      	beq.n	80069da <_printf_i+0xb2>
 80069aa:	2978      	cmp	r1, #120	; 0x78
 80069ac:	d1d4      	bne.n	8006958 <_printf_i+0x30>
 80069ae:	2378      	movs	r3, #120	; 0x78
 80069b0:	4865      	ldr	r0, [pc, #404]	; (8006b48 <_printf_i+0x220>)
 80069b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069b6:	e055      	b.n	8006a64 <_printf_i+0x13c>
 80069b8:	6813      	ldr	r3, [r2, #0]
 80069ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069be:	1d19      	adds	r1, r3, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6011      	str	r1, [r2, #0]
 80069c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c8:	2301      	movs	r3, #1
 80069ca:	e08c      	b.n	8006ae6 <_printf_i+0x1be>
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	bf18      	it	ne
 80069d6:	b21b      	sxthne	r3, r3
 80069d8:	e7cf      	b.n	800697a <_printf_i+0x52>
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	6825      	ldr	r5, [r4, #0]
 80069de:	1d18      	adds	r0, r3, #4
 80069e0:	6010      	str	r0, [r2, #0]
 80069e2:	0628      	lsls	r0, r5, #24
 80069e4:	d501      	bpl.n	80069ea <_printf_i+0xc2>
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	e002      	b.n	80069f0 <_printf_i+0xc8>
 80069ea:	0668      	lsls	r0, r5, #25
 80069ec:	d5fb      	bpl.n	80069e6 <_printf_i+0xbe>
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	296f      	cmp	r1, #111	; 0x6f
 80069f2:	bf14      	ite	ne
 80069f4:	220a      	movne	r2, #10
 80069f6:	2208      	moveq	r2, #8
 80069f8:	4852      	ldr	r0, [pc, #328]	; (8006b44 <_printf_i+0x21c>)
 80069fa:	2100      	movs	r1, #0
 80069fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a00:	6865      	ldr	r5, [r4, #4]
 8006a02:	2d00      	cmp	r5, #0
 8006a04:	60a5      	str	r5, [r4, #8]
 8006a06:	f2c0 8095 	blt.w	8006b34 <_printf_i+0x20c>
 8006a0a:	6821      	ldr	r1, [r4, #0]
 8006a0c:	f021 0104 	bic.w	r1, r1, #4
 8006a10:	6021      	str	r1, [r4, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d13d      	bne.n	8006a92 <_printf_i+0x16a>
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	f040 808e 	bne.w	8006b38 <_printf_i+0x210>
 8006a1c:	4665      	mov	r5, ip
 8006a1e:	2a08      	cmp	r2, #8
 8006a20:	d10b      	bne.n	8006a3a <_printf_i+0x112>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	07db      	lsls	r3, r3, #31
 8006a26:	d508      	bpl.n	8006a3a <_printf_i+0x112>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	6862      	ldr	r2, [r4, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bfde      	ittt	le
 8006a30:	2330      	movle	r3, #48	; 0x30
 8006a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a3a:	ebac 0305 	sub.w	r3, ip, r5
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	f8cd 8000 	str.w	r8, [sp]
 8006a44:	463b      	mov	r3, r7
 8006a46:	aa03      	add	r2, sp, #12
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff fef6 	bl	800683c <_printf_common>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d14d      	bne.n	8006af0 <_printf_i+0x1c8>
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a58:	b005      	add	sp, #20
 8006a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a5e:	4839      	ldr	r0, [pc, #228]	; (8006b44 <_printf_i+0x21c>)
 8006a60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	6821      	ldr	r1, [r4, #0]
 8006a68:	1d1d      	adds	r5, r3, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6015      	str	r5, [r2, #0]
 8006a6e:	060a      	lsls	r2, r1, #24
 8006a70:	d50b      	bpl.n	8006a8a <_printf_i+0x162>
 8006a72:	07ca      	lsls	r2, r1, #31
 8006a74:	bf44      	itt	mi
 8006a76:	f041 0120 	orrmi.w	r1, r1, #32
 8006a7a:	6021      	strmi	r1, [r4, #0]
 8006a7c:	b91b      	cbnz	r3, 8006a86 <_printf_i+0x15e>
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	f022 0220 	bic.w	r2, r2, #32
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	2210      	movs	r2, #16
 8006a88:	e7b7      	b.n	80069fa <_printf_i+0xd2>
 8006a8a:	064d      	lsls	r5, r1, #25
 8006a8c:	bf48      	it	mi
 8006a8e:	b29b      	uxthmi	r3, r3
 8006a90:	e7ef      	b.n	8006a72 <_printf_i+0x14a>
 8006a92:	4665      	mov	r5, ip
 8006a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a98:	fb02 3311 	mls	r3, r2, r1, r3
 8006a9c:	5cc3      	ldrb	r3, [r0, r3]
 8006a9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	d1f5      	bne.n	8006a94 <_printf_i+0x16c>
 8006aa8:	e7b9      	b.n	8006a1e <_printf_i+0xf6>
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	6825      	ldr	r5, [r4, #0]
 8006aae:	1d18      	adds	r0, r3, #4
 8006ab0:	6961      	ldr	r1, [r4, #20]
 8006ab2:	6010      	str	r0, [r2, #0]
 8006ab4:	0628      	lsls	r0, r5, #24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	d501      	bpl.n	8006abe <_printf_i+0x196>
 8006aba:	6019      	str	r1, [r3, #0]
 8006abc:	e002      	b.n	8006ac4 <_printf_i+0x19c>
 8006abe:	066a      	lsls	r2, r5, #25
 8006ac0:	d5fb      	bpl.n	8006aba <_printf_i+0x192>
 8006ac2:	8019      	strh	r1, [r3, #0]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4665      	mov	r5, ip
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	e7b9      	b.n	8006a40 <_printf_i+0x118>
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	1d19      	adds	r1, r3, #4
 8006ad0:	6011      	str	r1, [r2, #0]
 8006ad2:	681d      	ldr	r5, [r3, #0]
 8006ad4:	6862      	ldr	r2, [r4, #4]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f837 	bl	8006b4c <memchr>
 8006ade:	b108      	cbz	r0, 8006ae4 <_printf_i+0x1bc>
 8006ae0:	1b40      	subs	r0, r0, r5
 8006ae2:	6060      	str	r0, [r4, #4]
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aee:	e7a7      	b.n	8006a40 <_printf_i+0x118>
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	462a      	mov	r2, r5
 8006af4:	4639      	mov	r1, r7
 8006af6:	4630      	mov	r0, r6
 8006af8:	47c0      	blx	r8
 8006afa:	3001      	adds	r0, #1
 8006afc:	d0aa      	beq.n	8006a54 <_printf_i+0x12c>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	079b      	lsls	r3, r3, #30
 8006b02:	d413      	bmi.n	8006b2c <_printf_i+0x204>
 8006b04:	68e0      	ldr	r0, [r4, #12]
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	4298      	cmp	r0, r3
 8006b0a:	bfb8      	it	lt
 8006b0c:	4618      	movlt	r0, r3
 8006b0e:	e7a3      	b.n	8006a58 <_printf_i+0x130>
 8006b10:	2301      	movs	r3, #1
 8006b12:	464a      	mov	r2, r9
 8006b14:	4639      	mov	r1, r7
 8006b16:	4630      	mov	r0, r6
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d09a      	beq.n	8006a54 <_printf_i+0x12c>
 8006b1e:	3501      	adds	r5, #1
 8006b20:	68e3      	ldr	r3, [r4, #12]
 8006b22:	9a03      	ldr	r2, [sp, #12]
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	42ab      	cmp	r3, r5
 8006b28:	dcf2      	bgt.n	8006b10 <_printf_i+0x1e8>
 8006b2a:	e7eb      	b.n	8006b04 <_printf_i+0x1dc>
 8006b2c:	2500      	movs	r5, #0
 8006b2e:	f104 0919 	add.w	r9, r4, #25
 8006b32:	e7f5      	b.n	8006b20 <_printf_i+0x1f8>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ac      	bne.n	8006a92 <_printf_i+0x16a>
 8006b38:	7803      	ldrb	r3, [r0, #0]
 8006b3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b42:	e76c      	b.n	8006a1e <_printf_i+0xf6>
 8006b44:	08006f49 	.word	0x08006f49
 8006b48:	08006f5a 	.word	0x08006f5a

08006b4c <memchr>:
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	b2c9      	uxtb	r1, r1
 8006b50:	4402      	add	r2, r0
 8006b52:	4290      	cmp	r0, r2
 8006b54:	4603      	mov	r3, r0
 8006b56:	d101      	bne.n	8006b5c <memchr+0x10>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e003      	b.n	8006b64 <memchr+0x18>
 8006b5c:	781c      	ldrb	r4, [r3, #0]
 8006b5e:	3001      	adds	r0, #1
 8006b60:	428c      	cmp	r4, r1
 8006b62:	d1f6      	bne.n	8006b52 <memchr+0x6>
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <memmove>:
 8006b68:	4288      	cmp	r0, r1
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	eb01 0302 	add.w	r3, r1, r2
 8006b70:	d807      	bhi.n	8006b82 <memmove+0x1a>
 8006b72:	1e42      	subs	r2, r0, #1
 8006b74:	4299      	cmp	r1, r3
 8006b76:	d00a      	beq.n	8006b8e <memmove+0x26>
 8006b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b80:	e7f8      	b.n	8006b74 <memmove+0xc>
 8006b82:	4283      	cmp	r3, r0
 8006b84:	d9f5      	bls.n	8006b72 <memmove+0xa>
 8006b86:	1881      	adds	r1, r0, r2
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	42d3      	cmn	r3, r2
 8006b8c:	d100      	bne.n	8006b90 <memmove+0x28>
 8006b8e:	bd10      	pop	{r4, pc}
 8006b90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b98:	e7f7      	b.n	8006b8a <memmove+0x22>
	...

08006b9c <_free_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d043      	beq.n	8006c2c <_free_r+0x90>
 8006ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba8:	1f0c      	subs	r4, r1, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfb8      	it	lt
 8006bae:	18e4      	addlt	r4, r4, r3
 8006bb0:	f000 f8d0 	bl	8006d54 <__malloc_lock>
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <_free_r+0x94>)
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	4610      	mov	r0, r2
 8006bba:	b933      	cbnz	r3, 8006bca <_free_r+0x2e>
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	6014      	str	r4, [r2, #0]
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc6:	f000 b8c6 	b.w	8006d56 <__malloc_unlock>
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	d90b      	bls.n	8006be6 <_free_r+0x4a>
 8006bce:	6821      	ldr	r1, [r4, #0]
 8006bd0:	1862      	adds	r2, r4, r1
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	bf01      	itttt	eq
 8006bd6:	681a      	ldreq	r2, [r3, #0]
 8006bd8:	685b      	ldreq	r3, [r3, #4]
 8006bda:	1852      	addeq	r2, r2, r1
 8006bdc:	6022      	streq	r2, [r4, #0]
 8006bde:	6063      	str	r3, [r4, #4]
 8006be0:	6004      	str	r4, [r0, #0]
 8006be2:	e7ed      	b.n	8006bc0 <_free_r+0x24>
 8006be4:	4613      	mov	r3, r2
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	b10a      	cbz	r2, 8006bee <_free_r+0x52>
 8006bea:	42a2      	cmp	r2, r4
 8006bec:	d9fa      	bls.n	8006be4 <_free_r+0x48>
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	1858      	adds	r0, r3, r1
 8006bf2:	42a0      	cmp	r0, r4
 8006bf4:	d10b      	bne.n	8006c0e <_free_r+0x72>
 8006bf6:	6820      	ldr	r0, [r4, #0]
 8006bf8:	4401      	add	r1, r0
 8006bfa:	1858      	adds	r0, r3, r1
 8006bfc:	4282      	cmp	r2, r0
 8006bfe:	6019      	str	r1, [r3, #0]
 8006c00:	d1de      	bne.n	8006bc0 <_free_r+0x24>
 8006c02:	6810      	ldr	r0, [r2, #0]
 8006c04:	6852      	ldr	r2, [r2, #4]
 8006c06:	4401      	add	r1, r0
 8006c08:	6019      	str	r1, [r3, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	e7d8      	b.n	8006bc0 <_free_r+0x24>
 8006c0e:	d902      	bls.n	8006c16 <_free_r+0x7a>
 8006c10:	230c      	movs	r3, #12
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	e7d4      	b.n	8006bc0 <_free_r+0x24>
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1821      	adds	r1, r4, r0
 8006c1a:	428a      	cmp	r2, r1
 8006c1c:	bf01      	itttt	eq
 8006c1e:	6811      	ldreq	r1, [r2, #0]
 8006c20:	6852      	ldreq	r2, [r2, #4]
 8006c22:	1809      	addeq	r1, r1, r0
 8006c24:	6021      	streq	r1, [r4, #0]
 8006c26:	6062      	str	r2, [r4, #4]
 8006c28:	605c      	str	r4, [r3, #4]
 8006c2a:	e7c9      	b.n	8006bc0 <_free_r+0x24>
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000199c 	.word	0x2000199c

08006c34 <_malloc_r>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	1ccd      	adds	r5, r1, #3
 8006c38:	f025 0503 	bic.w	r5, r5, #3
 8006c3c:	3508      	adds	r5, #8
 8006c3e:	2d0c      	cmp	r5, #12
 8006c40:	bf38      	it	cc
 8006c42:	250c      	movcc	r5, #12
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	4606      	mov	r6, r0
 8006c48:	db01      	blt.n	8006c4e <_malloc_r+0x1a>
 8006c4a:	42a9      	cmp	r1, r5
 8006c4c:	d903      	bls.n	8006c56 <_malloc_r+0x22>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	2000      	movs	r0, #0
 8006c54:	bd70      	pop	{r4, r5, r6, pc}
 8006c56:	f000 f87d 	bl	8006d54 <__malloc_lock>
 8006c5a:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <_malloc_r+0xac>)
 8006c5c:	6814      	ldr	r4, [r2, #0]
 8006c5e:	4621      	mov	r1, r4
 8006c60:	b991      	cbnz	r1, 8006c88 <_malloc_r+0x54>
 8006c62:	4c20      	ldr	r4, [pc, #128]	; (8006ce4 <_malloc_r+0xb0>)
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	b91b      	cbnz	r3, 8006c70 <_malloc_r+0x3c>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f863 	bl	8006d34 <_sbrk_r>
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 f85e 	bl	8006d34 <_sbrk_r>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d124      	bne.n	8006cc6 <_malloc_r+0x92>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	4630      	mov	r0, r6
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	f000 f868 	bl	8006d56 <__malloc_unlock>
 8006c86:	e7e4      	b.n	8006c52 <_malloc_r+0x1e>
 8006c88:	680b      	ldr	r3, [r1, #0]
 8006c8a:	1b5b      	subs	r3, r3, r5
 8006c8c:	d418      	bmi.n	8006cc0 <_malloc_r+0x8c>
 8006c8e:	2b0b      	cmp	r3, #11
 8006c90:	d90f      	bls.n	8006cb2 <_malloc_r+0x7e>
 8006c92:	600b      	str	r3, [r1, #0]
 8006c94:	18cc      	adds	r4, r1, r3
 8006c96:	50cd      	str	r5, [r1, r3]
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f000 f85c 	bl	8006d56 <__malloc_unlock>
 8006c9e:	f104 000b 	add.w	r0, r4, #11
 8006ca2:	1d23      	adds	r3, r4, #4
 8006ca4:	f020 0007 	bic.w	r0, r0, #7
 8006ca8:	1ac3      	subs	r3, r0, r3
 8006caa:	d0d3      	beq.n	8006c54 <_malloc_r+0x20>
 8006cac:	425a      	negs	r2, r3
 8006cae:	50e2      	str	r2, [r4, r3]
 8006cb0:	e7d0      	b.n	8006c54 <_malloc_r+0x20>
 8006cb2:	684b      	ldr	r3, [r1, #4]
 8006cb4:	428c      	cmp	r4, r1
 8006cb6:	bf16      	itet	ne
 8006cb8:	6063      	strne	r3, [r4, #4]
 8006cba:	6013      	streq	r3, [r2, #0]
 8006cbc:	460c      	movne	r4, r1
 8006cbe:	e7eb      	b.n	8006c98 <_malloc_r+0x64>
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	6849      	ldr	r1, [r1, #4]
 8006cc4:	e7cc      	b.n	8006c60 <_malloc_r+0x2c>
 8006cc6:	1cc4      	adds	r4, r0, #3
 8006cc8:	f024 0403 	bic.w	r4, r4, #3
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d005      	beq.n	8006cdc <_malloc_r+0xa8>
 8006cd0:	1a21      	subs	r1, r4, r0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f82e 	bl	8006d34 <_sbrk_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0cf      	beq.n	8006c7c <_malloc_r+0x48>
 8006cdc:	6025      	str	r5, [r4, #0]
 8006cde:	e7db      	b.n	8006c98 <_malloc_r+0x64>
 8006ce0:	2000199c 	.word	0x2000199c
 8006ce4:	200019a0 	.word	0x200019a0

08006ce8 <_realloc_r>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	4607      	mov	r7, r0
 8006cec:	4614      	mov	r4, r2
 8006cee:	460e      	mov	r6, r1
 8006cf0:	b921      	cbnz	r1, 8006cfc <_realloc_r+0x14>
 8006cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	f7ff bf9c 	b.w	8006c34 <_malloc_r>
 8006cfc:	b922      	cbnz	r2, 8006d08 <_realloc_r+0x20>
 8006cfe:	f7ff ff4d 	bl	8006b9c <_free_r>
 8006d02:	4625      	mov	r5, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d08:	f000 f826 	bl	8006d58 <_malloc_usable_size_r>
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	d20f      	bcs.n	8006d30 <_realloc_r+0x48>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ff8e 	bl	8006c34 <_malloc_r>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0f2      	beq.n	8006d04 <_realloc_r+0x1c>
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4622      	mov	r2, r4
 8006d22:	f7ff fbfd 	bl	8006520 <memcpy>
 8006d26:	4631      	mov	r1, r6
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff ff37 	bl	8006b9c <_free_r>
 8006d2e:	e7e9      	b.n	8006d04 <_realloc_r+0x1c>
 8006d30:	4635      	mov	r5, r6
 8006d32:	e7e7      	b.n	8006d04 <_realloc_r+0x1c>

08006d34 <_sbrk_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	2300      	movs	r3, #0
 8006d38:	4c05      	ldr	r4, [pc, #20]	; (8006d50 <_sbrk_r+0x1c>)
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	6023      	str	r3, [r4, #0]
 8006d40:	f7fa f89a 	bl	8000e78 <_sbrk>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_sbrk_r+0x1a>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_sbrk_r+0x1a>
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20001ae0 	.word	0x20001ae0

08006d54 <__malloc_lock>:
 8006d54:	4770      	bx	lr

08006d56 <__malloc_unlock>:
 8006d56:	4770      	bx	lr

08006d58 <_malloc_usable_size_r>:
 8006d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5c:	1f18      	subs	r0, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfbc      	itt	lt
 8006d62:	580b      	ldrlt	r3, [r1, r0]
 8006d64:	18c0      	addlt	r0, r0, r3
 8006d66:	4770      	bx	lr

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
