
OccupancyDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007030  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800734c  0800734c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800734c  0800734c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  20000078  080073cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ac4  080073cc  00021ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a03a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003543  00000000  00000000  0003a0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003d620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  0003eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000044a3  00000000  00000000  0003fe18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012638  00000000  00000000  000442bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000998dc  00000000  00000000  000568f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f01cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a58  00000000  00000000  000f024c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007128 	.word	0x08007128

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007128 	.word	0x08007128

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f001 f822 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f87a 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f920 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093c:	f000 f8f4 	bl	8000b28 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000940:	f000 f8c4 	bl	8000acc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  lcd_IO_init();
 8000944:	f000 fd28 	bl	8001398 <lcd_IO_init>

  lcd_init();
 8000948:	f000 fd6a 	bl	8001420 <lcd_init>

  char2LCD("hello");
 800094c:	4822      	ldr	r0, [pc, #136]	; (80009d8 <main+0xac>)
 800094e:	f000 fe31 	bl	80015b4 <char2LCD>

//  CMD2LCD(0xC0);

//  char2LCD("there");

  printString("\x1b[2J");
 8000952:	4822      	ldr	r0, [pc, #136]	; (80009dc <main+0xb0>)
 8000954:	f000 fce6 	bl	8001324 <printString>

  printString("\x1b[0;0H");
 8000958:	4821      	ldr	r0, [pc, #132]	; (80009e0 <main+0xb4>)
 800095a:	f000 fce3 	bl	8001324 <printString>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800095e:	f003 f8df 	bl	8003b20 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structQueue */
  structQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &structQueue_attributes);
 8000962:	4a20      	ldr	r2, [pc, #128]	; (80009e4 <main+0xb8>)
 8000964:	2106      	movs	r1, #6
 8000966:	2001      	movs	r0, #1
 8000968:	f003 fa18 	bl	8003d9c <osMessageQueueNew>
 800096c:	4602      	mov	r2, r0
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <main+0xbc>)
 8000970:	601a      	str	r2, [r3, #0]

  /* creation of rawQueue */
  rawQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &rawQueue_attributes);
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <main+0xc0>)
 8000974:	2106      	movs	r1, #6
 8000976:	2001      	movs	r0, #1
 8000978:	f003 fa10 	bl	8003d9c <osMessageQueueNew>
 800097c:	4602      	mov	r2, r0
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <main+0xc4>)
 8000980:	601a      	str	r2, [r3, #0]

  /* creation of roomQueue */
  roomQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &roomQueue_attributes);
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <main+0xc8>)
 8000984:	2102      	movs	r1, #2
 8000986:	2001      	movs	r0, #1
 8000988:	f003 fa08 	bl	8003d9c <osMessageQueueNew>
 800098c:	4602      	mov	r2, r0
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <main+0xcc>)
 8000990:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calcTask */
  calcTaskHandle = osThreadNew(StartCalcTask, NULL, &calcTask_attributes);
 8000992:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <main+0xd0>)
 8000994:	2100      	movs	r1, #0
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <main+0xd4>)
 8000998:	f003 f928 	bl	8003bec <osThreadNew>
 800099c:	4602      	mov	r2, r0
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <main+0xd8>)
 80009a0:	601a      	str	r2, [r3, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 80009a2:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <main+0xdc>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0xe0>)
 80009a8:	f003 f920 	bl	8003bec <osThreadNew>
 80009ac:	4602      	mov	r2, r0
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <main+0xe4>)
 80009b0:	601a      	str	r2, [r3, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartLcdTask, NULL, &lcdTask_attributes);
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <main+0xe8>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <main+0xec>)
 80009b8:	f003 f918 	bl	8003bec <osThreadNew>
 80009bc:	4602      	mov	r2, r0
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <main+0xf0>)
 80009c0:	601a      	str	r2, [r3, #0]

  /* creation of selectTask */
  selectTaskHandle = osThreadNew(StartSelectTask, NULL, &selectTask_attributes);
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <main+0xf4>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0xf8>)
 80009c8:	f003 f910 	bl	8003bec <osThreadNew>
 80009cc:	4602      	mov	r2, r0
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <main+0xfc>)
 80009d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009d2:	f003 f8d7 	bl	8003b84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0xaa>
 80009d8:	08007190 	.word	0x08007190
 80009dc:	08007198 	.word	0x08007198
 80009e0:	080071a0 	.word	0x080071a0
 80009e4:	080072b8 	.word	0x080072b8
 80009e8:	200019ac 	.word	0x200019ac
 80009ec:	080072d0 	.word	0x080072d0
 80009f0:	200019a8 	.word	0x200019a8
 80009f4:	080072e8 	.word	0x080072e8
 80009f8:	200019b8 	.word	0x200019b8
 80009fc:	08007228 	.word	0x08007228
 8000a00:	08000d1d 	.word	0x08000d1d
 8000a04:	200019b4 	.word	0x200019b4
 8000a08:	0800724c 	.word	0x0800724c
 8000a0c:	08000da1 	.word	0x08000da1
 8000a10:	200019b0 	.word	0x200019b0
 8000a14:	08007270 	.word	0x08007270
 8000a18:	08000e39 	.word	0x08000e39
 8000a1c:	200019f0 	.word	0x200019f0
 8000a20:	08007294 	.word	0x08007294
 8000a24:	08000f65 	.word	0x08000f65
 8000a28:	200019ec 	.word	0x200019ec

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 ff63 	bl	8006906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fe95 	bl	80027a0 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a7c:	f000 fad8 	bl	8001030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 f900 	bl	8002ca0 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aa6:	f000 fac3 	bl	8001030 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fabf 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fab6 	bl	8001030 <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3750      	adds	r7, #80	; 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <MX_ADC1_Init+0x58>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000af6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000afa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_ADC1_Init+0x54>)
 8000b0a:	f000 ff89 	bl	8001a20 <HAL_ADC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 fa8c 	bl	8001030 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200019bc 	.word	0x200019bc
 8000b24:	40012400 	.word	0x40012400

08000b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART2_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f002 fe26 	bl	80037b0 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f000 fa61 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200019f4 	.word	0x200019f4
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a39      	ldr	r2, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_GPIO_Init+0x100>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	21ff      	movs	r1, #255	; 0xff
 8000bdc:	4828      	ldr	r0, [pc, #160]	; (8000c80 <MX_GPIO_Init+0x104>)
 8000bde:	f001 fd95 	bl	800270c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2120      	movs	r1, #32
 8000be6:	4827      	ldr	r0, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x108>)
 8000be8:	f001 fd90 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2123      	movs	r1, #35	; 0x23
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <MX_GPIO_Init+0x10c>)
 8000bf2:	f001 fd8b 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_GPIO_Init+0x110>)
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481d      	ldr	r0, [pc, #116]	; (8000c80 <MX_GPIO_Init+0x104>)
 8000c0c:	f001 fc24 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c10:	23ff      	movs	r3, #255	; 0xff
 8000c12:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_GPIO_Init+0x104>)
 8000c28:	f001 fc16 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <MX_GPIO_Init+0x108>)
 8000c44:	f001 fc08 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c48:	2323      	movs	r3, #35	; 0x23
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <MX_GPIO_Init+0x10c>)
 8000c60:	f001 fbfa 	bl	8002458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	2028      	movs	r0, #40	; 0x28
 8000c6a:	f001 fbca 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6e:	2028      	movs	r0, #40	; 0x28
 8000c70:	f001 fbe3 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	10210000 	.word	0x10210000

08000c90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca0:	d111      	bne.n	8000cc6 <HAL_GPIO_EXTI_Callback+0x36>
	{
		if(sel == false)
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_EXTI_Callback+0x28>
		{
			sel = true;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_EXTI_Callback+0x2e>
		}
		else
		{
			sel = false;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000cc2:	f001 fd3b 	bl	800273c <HAL_GPIO_TogglePin>

	}

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <reg_out>:

uint16_t reg_out( uint32_t reg_data){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

//DAT2LCD (0x30);
//
//DAT2LCD (0x78);

for ( i=28; i >= 0 ; i = (i-4))
 8000ce0:	231c      	movs	r3, #28
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e011      	b.n	8000d0a <reg_out+0x32>

{

shifted_val = (reg_data >> i) & 0xf;
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	fa22 f303 	lsr.w	r3, r2, r3
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	60bb      	str	r3, [r7, #8]
if (i <= 8)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	dc04      	bgt.n	8000d04 <reg_out+0x2c>
{
dipSW2LCD(shifted_val);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fbe6 	bl	80014d0 <dipSW2LCD>
for ( i=28; i >= 0 ; i = (i-4))
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3b04      	subs	r3, #4
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	daea      	bge.n	8000ce6 <reg_out+0xe>
}
}
return (uint16_t)reg_data;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	b29b      	uxth	r3, r3

}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <StartCalcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalcTask */
void StartCalcTask(void *argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t data = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	81fb      	strh	r3, [r7, #14]
	struct DataStruct dc;
	dc.temp = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	813b      	strh	r3, [r7, #8]
	dc.CO2 = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	817b      	strh	r3, [r7, #10]
	dc.dB = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		TEMP_Select();
 8000d34:	f000 fdc4 	bl	80018c0 <TEMP_Select>
		dc.temp = TempConversion(ADC_Read());
 8000d38:	f000 fdde 	bl	80018f8 <ADC_Read>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fdac 	bl	800189c <TempConversion>
 8000d44:	4603      	mov	r3, r0
 8000d46:	813b      	strh	r3, [r7, #8]
//		dc.CO2 = CO2Conversion(ADC_Read());
//
//		NOISE_Select();
//		dc.dB = NoiseConversion(ADC_Read());

		dc.CO2 += 5;
 8000d48:	897b      	ldrh	r3, [r7, #10]
 8000d4a:	3305      	adds	r3, #5
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	817b      	strh	r3, [r7, #10]
		dc.dB += 10;
 8000d50:	89bb      	ldrh	r3, [r7, #12]
 8000d52:	330a      	adds	r3, #10
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	81bb      	strh	r3, [r7, #12]

		if(osMessageQueuePut(rawQueueHandle, &dc, 1U, 0U) != osOK)
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <StartCalcTask+0x7c>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	f107 0108 	add.w	r1, r7, #8
 8000d60:	2300      	movs	r3, #0
 8000d62:	2201      	movs	r2, #1
 8000d64:	f003 f8a0 	bl	8003ea8 <osMessageQueuePut>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <StartCalcTask+0x56>
		{
			Error_Handler();
 8000d6e:	f000 f95f 	bl	8001030 <Error_Handler>
		}

		//DataFormat()
		//OccupancyCalculation()

		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U) != osOK)
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <StartCalcTask+0x80>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f107 0108 	add.w	r1, r7, #8
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f003 f893 	bl	8003ea8 <osMessageQueuePut>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <StartCalcTask+0x70>
		{
			Error_Handler();
 8000d88:	f000 f952 	bl	8001030 <Error_Handler>
		}

		osDelay(500);
 8000d8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d90:	f002 ffd6 	bl	8003d40 <osDelay>
		TEMP_Select();
 8000d94:	e7ce      	b.n	8000d34 <StartCalcTask+0x18>
 8000d96:	bf00      	nop
 8000d98:	200019a8 	.word	0x200019a8
 8000d9c:	200019ac 	.word	0x200019ac

08000da0 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t data_str[40];
	struct DataStruct dc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <StartSendTask+0x88>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	f107 0108 	add.w	r1, r7, #8
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	f003 f8ec 	bl	8003f90 <osMessageQueueGet>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d12f      	bne.n	8000e1e <StartSendTask+0x7e>
		{
			sprintf((char *)data_str, "%d", dc.temp);
 8000dbe:	893b      	ldrh	r3, [r7, #8]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4919      	ldr	r1, [pc, #100]	; (8000e2c <StartSendTask+0x8c>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f005 fda5 	bl	8006918 <siprintf>
			printString((char *)data_str);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 faa6 	bl	8001324 <printString>
			printString("     ");
 8000dd8:	4815      	ldr	r0, [pc, #84]	; (8000e30 <StartSendTask+0x90>)
 8000dda:	f000 faa3 	bl	8001324 <printString>
			sprintf((char *)data_str, "%d", dc.CO2);
 8000dde:	897b      	ldrh	r3, [r7, #10]
 8000de0:	461a      	mov	r2, r3
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4911      	ldr	r1, [pc, #68]	; (8000e2c <StartSendTask+0x8c>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 fd95 	bl	8006918 <siprintf>
			printString((char *)data_str);
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fa96 	bl	8001324 <printString>
			printString("     ");
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <StartSendTask+0x90>)
 8000dfa:	f000 fa93 	bl	8001324 <printString>
			sprintf((char *)data_str, "%d", dc.dB);
 8000dfe:	89bb      	ldrh	r3, [r7, #12]
 8000e00:	461a      	mov	r2, r3
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4909      	ldr	r1, [pc, #36]	; (8000e2c <StartSendTask+0x8c>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f005 fd85 	bl	8006918 <siprintf>
			printString((char *)data_str);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa86 	bl	8001324 <printString>
			printString("\r\n");
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <StartSendTask+0x94>)
 8000e1a:	f000 fa83 	bl	8001324 <printString>
		}
		osDelay(1000);
 8000e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e22:	f002 ff8d 	bl	8003d40 <osDelay>
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000e26:	e7bf      	b.n	8000da8 <StartSendTask+0x8>
 8000e28:	200019ac 	.word	0x200019ac
 8000e2c:	080071a8 	.word	0x080071a8
 8000e30:	080071ac 	.word	0x080071ac
 8000e34:	080071b4 	.word	0x080071b4

08000e38 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b08f      	sub	sp, #60	; 0x3c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	uint8_t raw_str[40];
	uint16_t roomSz = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	81fb      	strh	r3, [r7, #14]
	struct DataStruct rc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000e44:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <StartLcdTask+0x110>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	f107 0108 	add.w	r1, r7, #8
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f003 f89e 	bl	8003f90 <osMessageQueueGet>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d16d      	bne.n	8000f36 <StartLcdTask+0xfe>
		{
			if(osMessageQueueGet(roomQueueHandle, &roomSz, NULL, 0U) == osOK)
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <StartLcdTask+0x114>)
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	f107 010e 	add.w	r1, r7, #14
 8000e62:	2300      	movs	r3, #0
 8000e64:	2200      	movs	r2, #0
 8000e66:	f003 f893 	bl	8003f90 <osMessageQueueGet>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d129      	bne.n	8000ec4 <StartLcdTask+0x8c>
			{
				roomSz = roomSz / 2.67;
 8000e70:	89fb      	ldrh	r3, [r7, #14]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fabe 	bl	80003f4 <__aeabi_i2d>
 8000e78:	a331      	add	r3, pc, #196	; (adr r3, 8000f40 <StartLcdTask+0x108>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fc4d 	bl	800071c <__aeabi_ddiv>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4618      	mov	r0, r3
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f7ff fd2f 	bl	80008ec <__aeabi_d2uiz>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	81fb      	strh	r3, [r7, #14]
				roomSz += 500;
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	81fb      	strh	r3, [r7, #14]
				sprintf((char *)raw_str, "%d", roomSz);
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	492a      	ldr	r1, [pc, #168]	; (8000f50 <StartLcdTask+0x118>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fd35 	bl	8006918 <siprintf>
				CMD2LCD(0x80);
 8000eae:	2080      	movs	r0, #128	; 0x80
 8000eb0:	f000 fa8e 	bl	80013d0 <CMD2LCD>
				char2LCD("rs:");
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <StartLcdTask+0x11c>)
 8000eb6:	f000 fb7d 	bl	80015b4 <char2LCD>
				char2LCD((char *)raw_str);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fb78 	bl	80015b4 <char2LCD>
			}

			sprintf((char *)raw_str, "%d", rc.temp);
 8000ec4:	893b      	ldrh	r3, [r7, #8]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4920      	ldr	r1, [pc, #128]	; (8000f50 <StartLcdTask+0x118>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 fd22 	bl	8006918 <siprintf>
			CMD2LCD(0x89);
 8000ed4:	2089      	movs	r0, #137	; 0x89
 8000ed6:	f000 fa7b 	bl	80013d0 <CMD2LCD>
			char2LCD("tmp:");
 8000eda:	481f      	ldr	r0, [pc, #124]	; (8000f58 <StartLcdTask+0x120>)
 8000edc:	f000 fb6a 	bl	80015b4 <char2LCD>
			char2LCD((char *)raw_str);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fb65 	bl	80015b4 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.CO2);
 8000eea:	897b      	ldrh	r3, [r7, #10]
 8000eec:	461a      	mov	r2, r3
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4917      	ldr	r1, [pc, #92]	; (8000f50 <StartLcdTask+0x118>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 fd0f 	bl	8006918 <siprintf>
			CMD2LCD(0xC0);
 8000efa:	20c0      	movs	r0, #192	; 0xc0
 8000efc:	f000 fa68 	bl	80013d0 <CMD2LCD>
			char2LCD("co2:");
 8000f00:	4816      	ldr	r0, [pc, #88]	; (8000f5c <StartLcdTask+0x124>)
 8000f02:	f000 fb57 	bl	80015b4 <char2LCD>
			char2LCD((char *)raw_str);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fb52 	bl	80015b4 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.dB);
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	490d      	ldr	r1, [pc, #52]	; (8000f50 <StartLcdTask+0x118>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 fcfc 	bl	8006918 <siprintf>
			CMD2LCD(0xC9);
 8000f20:	20c9      	movs	r0, #201	; 0xc9
 8000f22:	f000 fa55 	bl	80013d0 <CMD2LCD>
			char2LCD("nl:");
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <StartLcdTask+0x128>)
 8000f28:	f000 fb44 	bl	80015b4 <char2LCD>
			char2LCD((char *)raw_str);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fb3f 	bl	80015b4 <char2LCD>

		}
		osDelay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f002 ff02 	bl	8003d40 <osDelay>
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000f3c:	e782      	b.n	8000e44 <StartLcdTask+0xc>
 8000f3e:	bf00      	nop
 8000f40:	f5c28f5c 	.word	0xf5c28f5c
 8000f44:	40055c28 	.word	0x40055c28
 8000f48:	200019a8 	.word	0x200019a8
 8000f4c:	200019b8 	.word	0x200019b8
 8000f50:	080071a8 	.word	0x080071a8
 8000f54:	080071b8 	.word	0x080071b8
 8000f58:	080071bc 	.word	0x080071bc
 8000f5c:	080071c4 	.word	0x080071c4
 8000f60:	080071cc 	.word	0x080071cc

08000f64 <StartSelectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSelectTask */
void StartSelectTask(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSelectTask */
	uint8_t roomSz_str[40];
	uint16_t roomSz = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	81fb      	strh	r3, [r7, #14]
	/* Infinite loop */
	for(;;)
	{
		if(sel == true)
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <StartSelectTask+0x94>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d03a      	beq.n	8000fee <StartSelectTask+0x8a>
		{
		CMD2LCD(0x01);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fa29 	bl	80013d0 <CMD2LCD>
		char2LCD("use inputs");
 8000f7e:	481f      	ldr	r0, [pc, #124]	; (8000ffc <StartSelectTask+0x98>)
 8000f80:	f000 fb18 	bl	80015b4 <char2LCD>
		CMD2LCD(0xC0);
 8000f84:	20c0      	movs	r0, #192	; 0xc0
 8000f86:	f000 fa23 	bl	80013d0 <CMD2LCD>
		char2LCD("room size: ");
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <StartSelectTask+0x9c>)
 8000f8c:	f000 fb12 	bl	80015b4 <char2LCD>
		while(sel == true)
 8000f90:	e016      	b.n	8000fc0 <StartSelectTask+0x5c>
		{
			CMD2LCD(0xCB);
 8000f92:	20cb      	movs	r0, #203	; 0xcb
 8000f94:	f000 fa1c 	bl	80013d0 <CMD2LCD>
			HAL_ADC_Start(&hadc1);
 8000f98:	481a      	ldr	r0, [pc, #104]	; (8001004 <StartSelectTask+0xa0>)
 8000f9a:	f000 fe19 	bl	8001bd0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion (&hadc1, 1000);
 8000f9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <StartSelectTask+0xa0>)
 8000fa4:	f000 feee 	bl	8001d84 <HAL_ADC_PollForConversion>
			roomSz = reg_out(HAL_ADC_GetValue(&hadc1));
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <StartSelectTask+0xa0>)
 8000faa:	f000 ffe5 	bl	8001f78 <HAL_ADC_GetValue>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fe91 	bl	8000cd8 <reg_out>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	81fb      	strh	r3, [r7, #14]
			HAL_ADC_Stop(&hadc1);
 8000fba:	4812      	ldr	r0, [pc, #72]	; (8001004 <StartSelectTask+0xa0>)
 8000fbc:	f000 feb6 	bl	8001d2c <HAL_ADC_Stop>
		while(sel == true)
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <StartSelectTask+0x94>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e4      	bne.n	8000f92 <StartSelectTask+0x2e>

		}
		sel = false;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <StartSelectTask+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
		CMD2LCD(0x01);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 f9fe 	bl	80013d0 <CMD2LCD>
		if(osMessageQueuePut(roomQueueHandle, &roomSz, 1U, 0U) != osOK)
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <StartSelectTask+0xa4>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	f107 010e 	add.w	r1, r7, #14
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f002 ff62 	bl	8003ea8 <osMessageQueuePut>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <StartSelectTask+0x8a>
		{
			Error_Handler();
 8000fea:	f000 f821 	bl	8001030 <Error_Handler>
		}
		}
		osDelay(100);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f002 fea6 	bl	8003d40 <osDelay>
		if(sel == true)
 8000ff4:	e7bc      	b.n	8000f70 <StartSelectTask+0xc>
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	080071d0 	.word	0x080071d0
 8001000:	080071dc 	.word	0x080071dc
 8001004:	200019bc 	.word	0x200019bc
 8001008:	200019b8 	.word	0x200019b8

0800100c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800101e:	f000 fcc1 	bl	80019a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40000800 	.word	0x40000800

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_MspInit+0x5c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_MspInit+0x5c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_MspInit+0x5c>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x5c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x5c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x5c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_MspInit+0x60>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_MspInit+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000

080010a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_ADC_MspInit+0x6c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d121      	bne.n	8001104 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_ADC_MspInit+0x74>)
 8001100:	f001 f9aa 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40012400 	.word	0x40012400
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0x88>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d12f      	bne.n	8001198 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 800113e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001142:	61d3      	str	r3, [r2, #28]
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001168:	2304      	movs	r3, #4
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_UART_MspInit+0x90>)
 800117c:	f001 f96c 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001180:	2308      	movs	r3, #8
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001194:	f001 f960 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800

080011ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	201e      	movs	r0, #30
 80011c2:	f001 f91e 	bl	8002402 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011c6:	201e      	movs	r0, #30
 80011c8:	f001 f937 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_InitTick+0x9c>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_InitTick+0x9c>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	61d3      	str	r3, [r2, #28]
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_InitTick+0x9c>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e4:	f107 0210 	add.w	r2, r7, #16
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fed4 	bl	8002f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011f4:	f001 feaa 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80011f8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_InitTick+0xa0>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	3b01      	subs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_InitTick+0xa4>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_InitTick+0xa8>)
 800120c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_InitTick+0xa4>)
 8001210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001214:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_InitTick+0xa4>)
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_InitTick+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_InitTick+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <HAL_InitTick+0xa4>)
 800122a:	f002 f877 	bl	800331c <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d104      	bne.n	800123e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <HAL_InitTick+0xa4>)
 8001236:	f002 f8c9 	bl	80033cc <HAL_TIM_Base_Start_IT>
 800123a:	4603      	mov	r3, r0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3730      	adds	r7, #48	; 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	431bde83 	.word	0x431bde83
 8001250:	20001a34 	.word	0x20001a34
 8001254:	40000800 	.word	0x40000800

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <HardFault_Handler+0x4>

0800126a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <MemManage_Handler+0x4>

08001270 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <BusFault_Handler+0x4>

08001276 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <UsageFault_Handler+0x4>

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM4_IRQHandler+0x10>)
 800128e:	f002 f8ef 	bl	8003470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001a34 	.word	0x20001a34

0800129c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012a4:	f001 fa64 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f005 fade 	bl	800689c <__errno>
 80012e0:	4602      	mov	r2, r0
 80012e2:	230c      	movs	r3, #12
 80012e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20005000 	.word	0x20005000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000094 	.word	0x20000094
 8001314:	20001ac8 	.word	0x20001ac8

08001318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <printString>:
 */

#include "CommMod.h"

void printString(const char* mess)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09e      	sub	sp, #120	; 0x78
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef st;
	uint8_t cliBufferTX[100];

	while(huart2.gState == HAL_UART_STATE_BUSY_TX){}
 8001330:	bf00      	nop
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <printString+0x70>)
 8001334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b21      	cmp	r3, #33	; 0x21
 800133c:	d0f9      	beq.n	8001332 <printString+0xe>

	for(const char* p = mess; *p; ++p)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	673b      	str	r3, [r7, #112]	; 0x70
 8001342:	e00d      	b.n	8001360 <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 8001344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001346:	7819      	ldrb	r1, [r3, #0]
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
		i++;
 8001354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001356:	3301      	adds	r3, #1
 8001358:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 800135a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800135c:	3301      	adds	r3, #1
 800135e:	673b      	str	r3, [r7, #112]	; 0x70
 8001360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ed      	bne.n	8001344 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart2, cliBufferTX, i, 1000);
 8001368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800136a:	b29a      	uxth	r2, r3
 800136c:	f107 0108 	add.w	r1, r7, #8
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <printString+0x70>)
 8001376:	f002 fa68 	bl	800384a <HAL_UART_Transmit>
 800137a:	4603      	mov	r3, r0
 800137c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 8001380:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <printString+0x68>
	{
		Error_Handler();
 8001388:	f7ff fe52 	bl	8001030 <Error_Handler>
	}

}
 800138c:	bf00      	nop
 800138e:	3778      	adds	r7, #120	; 0x78
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200019f4 	.word	0x200019f4

08001398 <lcd_IO_init>:
#include "stm32f1xx.h"
#include "lcd.h"


void lcd_IO_init (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

	//Enable peripheral clocks for ports B and C

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <lcd_IO_init+0x28>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <lcd_IO_init+0x28>)
 80013a2:	f043 0318 	orr.w	r3, r3, #24
 80013a6:	6193      	str	r3, [r2, #24]

	//Set the config and mode bits for Port B bit 0, 1, and 5 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOB->CRL = 0x44344433;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <lcd_IO_init+0x2c>)
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <lcd_IO_init+0x30>)
 80013ac:	601a      	str	r2, [r3, #0]

	//Set the config and mode bits for Port C bits 7 down to 0 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOC->CRL = 0x33333333;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <lcd_IO_init+0x34>)
 80013b0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80013b4:	601a      	str	r2, [r3, #0]

}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	44344433 	.word	0x44344433
 80013cc:	40011000 	.word	0x40011000

080013d0 <CMD2LCD>:

void CMD2LCD(uint8_t data)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = LCD_CM_ENA;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <CMD2LCD+0x44>)
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <CMD2LCD+0x48>)
 80013de:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <CMD2LCD+0x4c>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <CMD2LCD+0x4c>)
 80013e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013ea:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <CMD2LCD+0x4c>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <CMD2LCD+0x4c>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]

	HAL_Delay(2);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 faef 	bl	80019dc <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_CM_DIS;
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <CMD2LCD+0x44>)
 8001400:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001404:	611a      	str	r2, [r3, #16]

	HAL_Delay(14);
 8001406:	200e      	movs	r0, #14
 8001408:	f000 fae8 	bl	80019dc <HAL_Delay>
	//delay(80000);

}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010c00 	.word	0x40010c00
 8001418:	00210002 	.word	0x00210002
 800141c:	40011000 	.word	0x40011000

08001420 <lcd_init>:

void lcd_init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	for(int j = 0; j < 3; j++)
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	e008      	b.n	800143e <lcd_init+0x1e>
	{
		CMD2LCD(0X38);
 800142c:	2038      	movs	r0, #56	; 0x38
 800142e:	f7ff ffcf 	bl	80013d0 <CMD2LCD>
		HAL_Delay(5);
 8001432:	2005      	movs	r0, #5
 8001434:	f000 fad2 	bl	80019dc <HAL_Delay>
	for(int j = 0; j < 3; j++)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b02      	cmp	r3, #2
 8001442:	ddf3      	ble.n	800142c <lcd_init+0xc>
		//delay(24600);
	}

	CMD2LCD(0X38);
 8001444:	2038      	movs	r0, #56	; 0x38
 8001446:	f7ff ffc3 	bl	80013d0 <CMD2LCD>
	HAL_Delay(5);
 800144a:	2005      	movs	r0, #5
 800144c:	f000 fac6 	bl	80019dc <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X0F);
 8001450:	200f      	movs	r0, #15
 8001452:	f7ff ffbd 	bl	80013d0 <CMD2LCD>
	HAL_Delay(5);
 8001456:	2005      	movs	r0, #5
 8001458:	f000 fac0 	bl	80019dc <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X01);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff ffb7 	bl	80013d0 <CMD2LCD>
	HAL_Delay(5);
 8001462:	2005      	movs	r0, #5
 8001464:	f000 faba 	bl	80019dc <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X06);
 8001468:	2006      	movs	r0, #6
 800146a:	f7ff ffb1 	bl	80013d0 <CMD2LCD>
	HAL_Delay(5);
 800146e:	2005      	movs	r0, #5
 8001470:	f000 fab4 	bl	80019dc <HAL_Delay>
	//delay(24600);

}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <DAT2LCD>:

void DAT2LCD(uint8_t data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = LCD_DM_ENA;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <DAT2LCD+0x44>)
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <DAT2LCD+0x48>)
 800148a:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <DAT2LCD+0x4c>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <DAT2LCD+0x4c>)
 8001492:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001496:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <DAT2LCD+0x4c>)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	490a      	ldr	r1, [pc, #40]	; (80014c8 <DAT2LCD+0x4c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60cb      	str	r3, [r1, #12]
	HAL_Delay(2);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f000 fa99 	bl	80019dc <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_DM_DIS;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <DAT2LCD+0x44>)
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <DAT2LCD+0x50>)
 80014ae:	611a      	str	r2, [r3, #16]
	HAL_Delay(14);
 80014b0:	200e      	movs	r0, #14
 80014b2:	f000 fa93 	bl	80019dc <HAL_Delay>
	//delay(80000);

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	00200003 	.word	0x00200003
 80014c8:	40011000 	.word	0x40011000
 80014cc:	00220001 	.word	0x00220001

080014d0 <dipSW2LCD>:

void dipSW2LCD(uint8_t val)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	switch(val){
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d863      	bhi.n	80015a8 <dipSW2LCD+0xd8>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <dipSW2LCD+0x18>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	08001529 	.word	0x08001529
 80014ec:	08001531 	.word	0x08001531
 80014f0:	08001539 	.word	0x08001539
 80014f4:	08001541 	.word	0x08001541
 80014f8:	08001549 	.word	0x08001549
 80014fc:	08001551 	.word	0x08001551
 8001500:	08001559 	.word	0x08001559
 8001504:	08001561 	.word	0x08001561
 8001508:	08001569 	.word	0x08001569
 800150c:	08001571 	.word	0x08001571
 8001510:	08001579 	.word	0x08001579
 8001514:	08001581 	.word	0x08001581
 8001518:	08001589 	.word	0x08001589
 800151c:	08001591 	.word	0x08001591
 8001520:	08001599 	.word	0x08001599
 8001524:	080015a1 	.word	0x080015a1
	case 0x00:
		DAT2LCD(0x30);
 8001528:	2030      	movs	r0, #48	; 0x30
 800152a:	f7ff ffa7 	bl	800147c <DAT2LCD>
		break;
 800152e:	e03c      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x01:
		DAT2LCD(0x31);
 8001530:	2031      	movs	r0, #49	; 0x31
 8001532:	f7ff ffa3 	bl	800147c <DAT2LCD>
		break;
 8001536:	e038      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x02:
		DAT2LCD(0x32);
 8001538:	2032      	movs	r0, #50	; 0x32
 800153a:	f7ff ff9f 	bl	800147c <DAT2LCD>
		break;
 800153e:	e034      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x03:
		DAT2LCD(0x33);
 8001540:	2033      	movs	r0, #51	; 0x33
 8001542:	f7ff ff9b 	bl	800147c <DAT2LCD>
		break;
 8001546:	e030      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x04:
		DAT2LCD(0x34);
 8001548:	2034      	movs	r0, #52	; 0x34
 800154a:	f7ff ff97 	bl	800147c <DAT2LCD>
		break;
 800154e:	e02c      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x05:
		DAT2LCD(0x35);
 8001550:	2035      	movs	r0, #53	; 0x35
 8001552:	f7ff ff93 	bl	800147c <DAT2LCD>
		break;
 8001556:	e028      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x06:
		DAT2LCD(0x36);
 8001558:	2036      	movs	r0, #54	; 0x36
 800155a:	f7ff ff8f 	bl	800147c <DAT2LCD>
		break;
 800155e:	e024      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x07:
		DAT2LCD(0x37);
 8001560:	2037      	movs	r0, #55	; 0x37
 8001562:	f7ff ff8b 	bl	800147c <DAT2LCD>
		break;
 8001566:	e020      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x08:
		DAT2LCD(0x38);
 8001568:	2038      	movs	r0, #56	; 0x38
 800156a:	f7ff ff87 	bl	800147c <DAT2LCD>
		break;
 800156e:	e01c      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x09:
		DAT2LCD(0x39);
 8001570:	2039      	movs	r0, #57	; 0x39
 8001572:	f7ff ff83 	bl	800147c <DAT2LCD>
		break;
 8001576:	e018      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x0A:
		DAT2LCD(0x41);
 8001578:	2041      	movs	r0, #65	; 0x41
 800157a:	f7ff ff7f 	bl	800147c <DAT2LCD>
		break;
 800157e:	e014      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x0B:
		DAT2LCD(0x42);
 8001580:	2042      	movs	r0, #66	; 0x42
 8001582:	f7ff ff7b 	bl	800147c <DAT2LCD>
		break;
 8001586:	e010      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x0C:
		DAT2LCD(0x43);
 8001588:	2043      	movs	r0, #67	; 0x43
 800158a:	f7ff ff77 	bl	800147c <DAT2LCD>
		break;
 800158e:	e00c      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x0D:
		DAT2LCD(0x44);
 8001590:	2044      	movs	r0, #68	; 0x44
 8001592:	f7ff ff73 	bl	800147c <DAT2LCD>
		break;
 8001596:	e008      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x0E:
		DAT2LCD(0x45);
 8001598:	2045      	movs	r0, #69	; 0x45
 800159a:	f7ff ff6f 	bl	800147c <DAT2LCD>
		break;
 800159e:	e004      	b.n	80015aa <dipSW2LCD+0xda>

	case 0x0F:
		DAT2LCD(0x46);
 80015a0:	2046      	movs	r0, #70	; 0x46
 80015a2:	f7ff ff6b 	bl	800147c <DAT2LCD>
		break;
 80015a6:	e000      	b.n	80015aa <dipSW2LCD+0xda>

	default:
		break;
 80015a8:	bf00      	nop
	}
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop

080015b4 <char2LCD>:

void char2LCD(char * val)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	//toLower()

	int i = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 80015c0:	e160      	b.n	8001884 <char2LCD+0x2d0>
	{
		switch(val[i]){
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3b20      	subs	r3, #32
 80015cc:	2b5a      	cmp	r3, #90	; 0x5a
 80015ce:	f200 8155 	bhi.w	800187c <char2LCD+0x2c8>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <char2LCD+0x24>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001865 	.word	0x08001865
 80015dc:	0800187d 	.word	0x0800187d
 80015e0:	0800187d 	.word	0x0800187d
 80015e4:	0800187d 	.word	0x0800187d
 80015e8:	0800187d 	.word	0x0800187d
 80015ec:	0800187d 	.word	0x0800187d
 80015f0:	0800187d 	.word	0x0800187d
 80015f4:	0800187d 	.word	0x0800187d
 80015f8:	0800187d 	.word	0x0800187d
 80015fc:	0800187d 	.word	0x0800187d
 8001600:	0800187d 	.word	0x0800187d
 8001604:	0800187d 	.word	0x0800187d
 8001608:	0800187d 	.word	0x0800187d
 800160c:	0800187d 	.word	0x0800187d
 8001610:	0800186d 	.word	0x0800186d
 8001614:	0800187d 	.word	0x0800187d
 8001618:	08001745 	.word	0x08001745
 800161c:	0800174d 	.word	0x0800174d
 8001620:	08001755 	.word	0x08001755
 8001624:	0800175d 	.word	0x0800175d
 8001628:	08001765 	.word	0x08001765
 800162c:	0800176d 	.word	0x0800176d
 8001630:	08001775 	.word	0x08001775
 8001634:	0800177d 	.word	0x0800177d
 8001638:	08001785 	.word	0x08001785
 800163c:	0800178d 	.word	0x0800178d
 8001640:	08001875 	.word	0x08001875
 8001644:	0800187d 	.word	0x0800187d
 8001648:	0800187d 	.word	0x0800187d
 800164c:	0800187d 	.word	0x0800187d
 8001650:	0800187d 	.word	0x0800187d
 8001654:	0800187d 	.word	0x0800187d
 8001658:	0800187d 	.word	0x0800187d
 800165c:	0800187d 	.word	0x0800187d
 8001660:	0800187d 	.word	0x0800187d
 8001664:	0800187d 	.word	0x0800187d
 8001668:	0800187d 	.word	0x0800187d
 800166c:	0800187d 	.word	0x0800187d
 8001670:	0800187d 	.word	0x0800187d
 8001674:	0800187d 	.word	0x0800187d
 8001678:	0800187d 	.word	0x0800187d
 800167c:	0800187d 	.word	0x0800187d
 8001680:	0800187d 	.word	0x0800187d
 8001684:	0800187d 	.word	0x0800187d
 8001688:	0800187d 	.word	0x0800187d
 800168c:	0800187d 	.word	0x0800187d
 8001690:	0800187d 	.word	0x0800187d
 8001694:	0800187d 	.word	0x0800187d
 8001698:	0800187d 	.word	0x0800187d
 800169c:	0800187d 	.word	0x0800187d
 80016a0:	0800187d 	.word	0x0800187d
 80016a4:	0800187d 	.word	0x0800187d
 80016a8:	0800187d 	.word	0x0800187d
 80016ac:	0800187d 	.word	0x0800187d
 80016b0:	0800187d 	.word	0x0800187d
 80016b4:	0800187d 	.word	0x0800187d
 80016b8:	0800187d 	.word	0x0800187d
 80016bc:	0800187d 	.word	0x0800187d
 80016c0:	0800187d 	.word	0x0800187d
 80016c4:	0800187d 	.word	0x0800187d
 80016c8:	0800187d 	.word	0x0800187d
 80016cc:	0800187d 	.word	0x0800187d
 80016d0:	0800187d 	.word	0x0800187d
 80016d4:	0800187d 	.word	0x0800187d
 80016d8:	0800187d 	.word	0x0800187d
 80016dc:	08001795 	.word	0x08001795
 80016e0:	0800179d 	.word	0x0800179d
 80016e4:	080017a5 	.word	0x080017a5
 80016e8:	080017ad 	.word	0x080017ad
 80016ec:	080017b5 	.word	0x080017b5
 80016f0:	080017bd 	.word	0x080017bd
 80016f4:	080017c5 	.word	0x080017c5
 80016f8:	080017cd 	.word	0x080017cd
 80016fc:	080017d5 	.word	0x080017d5
 8001700:	080017dd 	.word	0x080017dd
 8001704:	080017e5 	.word	0x080017e5
 8001708:	080017ed 	.word	0x080017ed
 800170c:	080017f5 	.word	0x080017f5
 8001710:	080017fd 	.word	0x080017fd
 8001714:	08001805 	.word	0x08001805
 8001718:	0800180d 	.word	0x0800180d
 800171c:	08001815 	.word	0x08001815
 8001720:	0800181d 	.word	0x0800181d
 8001724:	08001825 	.word	0x08001825
 8001728:	0800182d 	.word	0x0800182d
 800172c:	08001835 	.word	0x08001835
 8001730:	0800183d 	.word	0x0800183d
 8001734:	08001845 	.word	0x08001845
 8001738:	0800184d 	.word	0x0800184d
 800173c:	08001855 	.word	0x08001855
 8001740:	0800185d 	.word	0x0800185d
		case '0':
			DAT2LCD(0x30);
 8001744:	2030      	movs	r0, #48	; 0x30
 8001746:	f7ff fe99 	bl	800147c <DAT2LCD>
			break;
 800174a:	e098      	b.n	800187e <char2LCD+0x2ca>

		case '1':
			DAT2LCD(0x31);
 800174c:	2031      	movs	r0, #49	; 0x31
 800174e:	f7ff fe95 	bl	800147c <DAT2LCD>
			break;
 8001752:	e094      	b.n	800187e <char2LCD+0x2ca>

		case '2':
			DAT2LCD(0x32);
 8001754:	2032      	movs	r0, #50	; 0x32
 8001756:	f7ff fe91 	bl	800147c <DAT2LCD>
			break;
 800175a:	e090      	b.n	800187e <char2LCD+0x2ca>

		case '3':
			DAT2LCD(0x33);
 800175c:	2033      	movs	r0, #51	; 0x33
 800175e:	f7ff fe8d 	bl	800147c <DAT2LCD>
			break;
 8001762:	e08c      	b.n	800187e <char2LCD+0x2ca>

		case '4':
			DAT2LCD(0x34);
 8001764:	2034      	movs	r0, #52	; 0x34
 8001766:	f7ff fe89 	bl	800147c <DAT2LCD>
			break;
 800176a:	e088      	b.n	800187e <char2LCD+0x2ca>

		case '5':
			DAT2LCD(0x35);
 800176c:	2035      	movs	r0, #53	; 0x35
 800176e:	f7ff fe85 	bl	800147c <DAT2LCD>
			break;
 8001772:	e084      	b.n	800187e <char2LCD+0x2ca>

		case '6':
			DAT2LCD(0x36);
 8001774:	2036      	movs	r0, #54	; 0x36
 8001776:	f7ff fe81 	bl	800147c <DAT2LCD>
			break;
 800177a:	e080      	b.n	800187e <char2LCD+0x2ca>

		case '7':
			DAT2LCD(0x37);
 800177c:	2037      	movs	r0, #55	; 0x37
 800177e:	f7ff fe7d 	bl	800147c <DAT2LCD>
			break;
 8001782:	e07c      	b.n	800187e <char2LCD+0x2ca>

		case '8':
			DAT2LCD(0x38);
 8001784:	2038      	movs	r0, #56	; 0x38
 8001786:	f7ff fe79 	bl	800147c <DAT2LCD>
			break;
 800178a:	e078      	b.n	800187e <char2LCD+0x2ca>

		case '9':
			DAT2LCD(0x39);
 800178c:	2039      	movs	r0, #57	; 0x39
 800178e:	f7ff fe75 	bl	800147c <DAT2LCD>
			break;
 8001792:	e074      	b.n	800187e <char2LCD+0x2ca>

		case 'a':
			DAT2LCD(0x41);
 8001794:	2041      	movs	r0, #65	; 0x41
 8001796:	f7ff fe71 	bl	800147c <DAT2LCD>
			break;
 800179a:	e070      	b.n	800187e <char2LCD+0x2ca>

		case 'b':
			DAT2LCD(0x42);
 800179c:	2042      	movs	r0, #66	; 0x42
 800179e:	f7ff fe6d 	bl	800147c <DAT2LCD>
			break;
 80017a2:	e06c      	b.n	800187e <char2LCD+0x2ca>

		case 'c':
			DAT2LCD(0x43);
 80017a4:	2043      	movs	r0, #67	; 0x43
 80017a6:	f7ff fe69 	bl	800147c <DAT2LCD>
			break;
 80017aa:	e068      	b.n	800187e <char2LCD+0x2ca>

		case 'd':
			DAT2LCD(0x44);
 80017ac:	2044      	movs	r0, #68	; 0x44
 80017ae:	f7ff fe65 	bl	800147c <DAT2LCD>
			break;
 80017b2:	e064      	b.n	800187e <char2LCD+0x2ca>

		case 'e':
			DAT2LCD(0x45);
 80017b4:	2045      	movs	r0, #69	; 0x45
 80017b6:	f7ff fe61 	bl	800147c <DAT2LCD>
			break;
 80017ba:	e060      	b.n	800187e <char2LCD+0x2ca>

		case 'f':
			DAT2LCD(0x46);
 80017bc:	2046      	movs	r0, #70	; 0x46
 80017be:	f7ff fe5d 	bl	800147c <DAT2LCD>
			break;
 80017c2:	e05c      	b.n	800187e <char2LCD+0x2ca>

		case 'g':
			DAT2LCD(0x47);
 80017c4:	2047      	movs	r0, #71	; 0x47
 80017c6:	f7ff fe59 	bl	800147c <DAT2LCD>
			break;
 80017ca:	e058      	b.n	800187e <char2LCD+0x2ca>

		case 'h':
			DAT2LCD(0x48);
 80017cc:	2048      	movs	r0, #72	; 0x48
 80017ce:	f7ff fe55 	bl	800147c <DAT2LCD>
			break;
 80017d2:	e054      	b.n	800187e <char2LCD+0x2ca>

		case 'i':
			DAT2LCD(0x49);
 80017d4:	2049      	movs	r0, #73	; 0x49
 80017d6:	f7ff fe51 	bl	800147c <DAT2LCD>
			break;
 80017da:	e050      	b.n	800187e <char2LCD+0x2ca>

		case 'j':
			DAT2LCD(0x4A);
 80017dc:	204a      	movs	r0, #74	; 0x4a
 80017de:	f7ff fe4d 	bl	800147c <DAT2LCD>
			break;
 80017e2:	e04c      	b.n	800187e <char2LCD+0x2ca>

		case 'k':
			DAT2LCD(0x4B);
 80017e4:	204b      	movs	r0, #75	; 0x4b
 80017e6:	f7ff fe49 	bl	800147c <DAT2LCD>
			break;
 80017ea:	e048      	b.n	800187e <char2LCD+0x2ca>

		case 'l':
			DAT2LCD(0x4C);
 80017ec:	204c      	movs	r0, #76	; 0x4c
 80017ee:	f7ff fe45 	bl	800147c <DAT2LCD>
			break;
 80017f2:	e044      	b.n	800187e <char2LCD+0x2ca>

		case 'm':
			DAT2LCD(0x4D);
 80017f4:	204d      	movs	r0, #77	; 0x4d
 80017f6:	f7ff fe41 	bl	800147c <DAT2LCD>
			break;
 80017fa:	e040      	b.n	800187e <char2LCD+0x2ca>

		case 'n':
			DAT2LCD(0x4E);
 80017fc:	204e      	movs	r0, #78	; 0x4e
 80017fe:	f7ff fe3d 	bl	800147c <DAT2LCD>
			break;
 8001802:	e03c      	b.n	800187e <char2LCD+0x2ca>

		case 'o':
			DAT2LCD(0x4F);
 8001804:	204f      	movs	r0, #79	; 0x4f
 8001806:	f7ff fe39 	bl	800147c <DAT2LCD>
			break;
 800180a:	e038      	b.n	800187e <char2LCD+0x2ca>

		case 'p':
			DAT2LCD(0x50);
 800180c:	2050      	movs	r0, #80	; 0x50
 800180e:	f7ff fe35 	bl	800147c <DAT2LCD>
			break;
 8001812:	e034      	b.n	800187e <char2LCD+0x2ca>

		case 'q':
			DAT2LCD(0x51);
 8001814:	2051      	movs	r0, #81	; 0x51
 8001816:	f7ff fe31 	bl	800147c <DAT2LCD>
			break;
 800181a:	e030      	b.n	800187e <char2LCD+0x2ca>

		case 'r':
			DAT2LCD(0x52);
 800181c:	2052      	movs	r0, #82	; 0x52
 800181e:	f7ff fe2d 	bl	800147c <DAT2LCD>
			break;
 8001822:	e02c      	b.n	800187e <char2LCD+0x2ca>

		case 's':
			DAT2LCD(0x53);
 8001824:	2053      	movs	r0, #83	; 0x53
 8001826:	f7ff fe29 	bl	800147c <DAT2LCD>
			break;
 800182a:	e028      	b.n	800187e <char2LCD+0x2ca>

		case 't':
			DAT2LCD(0x54);
 800182c:	2054      	movs	r0, #84	; 0x54
 800182e:	f7ff fe25 	bl	800147c <DAT2LCD>
			break;
 8001832:	e024      	b.n	800187e <char2LCD+0x2ca>

		case 'u':
			DAT2LCD(0x55);
 8001834:	2055      	movs	r0, #85	; 0x55
 8001836:	f7ff fe21 	bl	800147c <DAT2LCD>
			break;
 800183a:	e020      	b.n	800187e <char2LCD+0x2ca>

		case 'v':
			DAT2LCD(0x56);
 800183c:	2056      	movs	r0, #86	; 0x56
 800183e:	f7ff fe1d 	bl	800147c <DAT2LCD>
			break;
 8001842:	e01c      	b.n	800187e <char2LCD+0x2ca>

		case 'w':
			DAT2LCD(0x57);
 8001844:	2057      	movs	r0, #87	; 0x57
 8001846:	f7ff fe19 	bl	800147c <DAT2LCD>
			break;
 800184a:	e018      	b.n	800187e <char2LCD+0x2ca>

		case 'x':
			DAT2LCD(0x58);
 800184c:	2058      	movs	r0, #88	; 0x58
 800184e:	f7ff fe15 	bl	800147c <DAT2LCD>
			break;
 8001852:	e014      	b.n	800187e <char2LCD+0x2ca>

		case 'y':
			DAT2LCD(0x59);
 8001854:	2059      	movs	r0, #89	; 0x59
 8001856:	f7ff fe11 	bl	800147c <DAT2LCD>
			break;
 800185a:	e010      	b.n	800187e <char2LCD+0x2ca>

		case 'z':
			DAT2LCD(0x5A);
 800185c:	205a      	movs	r0, #90	; 0x5a
 800185e:	f7ff fe0d 	bl	800147c <DAT2LCD>
			break;
 8001862:	e00c      	b.n	800187e <char2LCD+0x2ca>

		case ' ':
			DAT2LCD(0x20);
 8001864:	2020      	movs	r0, #32
 8001866:	f7ff fe09 	bl	800147c <DAT2LCD>
			break;
 800186a:	e008      	b.n	800187e <char2LCD+0x2ca>

		case '.':
			DAT2LCD(0x2E);
 800186c:	202e      	movs	r0, #46	; 0x2e
 800186e:	f7ff fe05 	bl	800147c <DAT2LCD>
			break;
 8001872:	e004      	b.n	800187e <char2LCD+0x2ca>

		case ':':
			DAT2LCD(0x3A);
 8001874:	203a      	movs	r0, #58	; 0x3a
 8001876:	f7ff fe01 	bl	800147c <DAT2LCD>
			break;
 800187a:	e000      	b.n	800187e <char2LCD+0x2ca>

		default:
			break;
 800187c:	bf00      	nop
		}
		i++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3301      	adds	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f47f ae98 	bne.w	80015c2 <char2LCD+0xe>
	}
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop

0800189c <TempConversion>:
  }
 /*CO2 has a 100ms delay before looping*/
}

uint16_t TempConversion(uint32_t input)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return input / 10;   /* voltage to degree celsius conversion*/
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <TempConversion+0x20>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	b29b      	uxth	r3, r3
  /* has an 500ms delay before looping*/
 }
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	cccccccd 	.word	0xcccccccd

080018c0 <TEMP_Select>:
		Error_Handler();
	}
}

void TEMP_Select(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 80018d0:	2304      	movs	r3, #4
 80018d2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <TEMP_Select+0x34>)
 80018de:	f000 fb57 	bl	8001f90 <HAL_ADC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <TEMP_Select+0x2c>
	{
		Error_Handler();
 80018e8:	f7ff fba2 	bl	8001030 <Error_Handler>
	}
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200019bc 	.word	0x200019bc

080018f8 <ADC_Read>:
		Error_Handler();
	}
}

uint32_t ADC_Read(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	uint32_t temp;
	HAL_ADC_Start(&hadc1);
 80018fe:	480a      	ldr	r0, [pc, #40]	; (8001928 <ADC_Read+0x30>)
 8001900:	f000 f966 	bl	8001bd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 1000);
 8001904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <ADC_Read+0x30>)
 800190a:	f000 fa3b 	bl	8001d84 <HAL_ADC_PollForConversion>
	temp = HAL_ADC_GetValue(&hadc1);
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <ADC_Read+0x30>)
 8001910:	f000 fb32 	bl	8001f78 <HAL_ADC_GetValue>
 8001914:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <ADC_Read+0x30>)
 8001918:	f000 fa08 	bl	8001d2c <HAL_ADC_Stop>
	return temp;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200019bc 	.word	0x200019bc

0800192c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800192c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800192e:	e003      	b.n	8001938 <LoopCopyDataInit>

08001930 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001932:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001934:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001936:	3104      	adds	r1, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001938:	480a      	ldr	r0, [pc, #40]	; (8001964 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800193c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001940:	d3f6      	bcc.n	8001930 <CopyDataInit>
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001944:	e002      	b.n	800194c <LoopFillZerobss>

08001946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001948:	f842 3b04 	str.w	r3, [r2], #4

0800194c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800194e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001950:	d3f9      	bcc.n	8001946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001952:	f7ff fce1 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f004 ffa7 	bl	80068a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195a:	f7fe ffe7 	bl	800092c <main>
  bx lr
 800195e:	4770      	bx	lr
  ldr r3, =_sidata
 8001960:	08007354 	.word	0x08007354
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001968:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 800196c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001970:	20001ac4 	.word	0x20001ac4

08001974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_2_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x28>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x28>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 fd2f 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fc0c 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fb52 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x1c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x20>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_IncTick+0x20>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	20001a7c 	.word	0x20001a7c

080019c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_GetTick+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20001a7c 	.word	0x20001a7c

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_Delay+0x40>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffe0 	bl	80019c8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000000c 	.word	0x2000000c

08001a20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0be      	b.n	8001bc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fb1e 	bl	80010a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fbdd 	bl	8002224 <ADC_ConversionStop_Disable>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 8099 	bne.w	8001bae <HAL_ADC_Init+0x18e>
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8095 	bne.w	8001bae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a8c:	f023 0302 	bic.w	r3, r3, #2
 8001a90:	f043 0202 	orr.w	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7b1b      	ldrb	r3, [r3, #12]
 8001aa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_Init+0xa2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_ADC_Init+0xa8>
 8001ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_Init+0xaa>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d119      	bne.n	8001b0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7b1b      	ldrb	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	035a      	lsls	r2, r3, #13
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	e00b      	b.n	8001b0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_ADC_Init+0x1a8>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3c:	d003      	beq.n	8001b46 <HAL_ADC_Init+0x126>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d104      	bne.n	8001b50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	051b      	lsls	r3, r3, #20
 8001b4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_ADC_Init+0x1ac>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10b      	bne.n	8001b8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b8a:	e018      	b.n	8001bbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f023 0312 	bic.w	r3, r3, #18
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bac:	e007      	b.n	8001bbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f043 0210 	orr.w	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	ffe1f7fd 	.word	0xffe1f7fd
 8001bcc:	ff1f0efe 	.word	0xff1f0efe

08001bd0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Start+0x1a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e098      	b.n	8001d1c <HAL_ADC_Start+0x14c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fac4 	bl	8002180 <ADC_Enable>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8087 	bne.w	8001d12 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_ADC_Start+0x154>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_Start+0x5e>
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d115      	bne.n	8001c5a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d026      	beq.n	8001c96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c58:	e01d      	b.n	8001c96 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_ADC_Start+0xaa>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_ADC_Start+0x154>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10d      	bne.n	8001c96 <HAL_ADC_Start+0xc6>
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f023 0206 	bic.w	r2, r3, #6
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cae:	e002      	b.n	8001cb6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0202 	mvn.w	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cd6:	d113      	bne.n	8001d00 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_ADC_Start+0x154>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	e00c      	b.n	8001d1a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e003      	b.n	8001d1a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40012800 	.word	0x40012800
 8001d28:	40012400 	.word	0x40012400

08001d2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Stop+0x1a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e01a      	b.n	8001d7c <HAL_ADC_Stop+0x50>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fa68 	bl	8002224 <ADC_ConversionStop_Disable>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d9a:	f7ff fe15 	bl	80019c8 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	f043 0220 	orr.w	r2, r3, #32
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0c8      	b.n	8001f58 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d12a      	bne.n	8001e2a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d123      	bne.n	8001e2a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001de2:	e01a      	b.n	8001e1a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dea:	d016      	beq.n	8001e1a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_ADC_PollForConversion+0x7e>
 8001df2:	f7ff fde9 	bl	80019c8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d20b      	bcs.n	8001e1a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f043 0204 	orr.w	r2, r3, #4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e09e      	b.n	8001f58 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0dd      	beq.n	8001de4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e28:	e06c      	b.n	8001f04 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_ADC_PollForConversion+0x1dc>)
 8001e2c:	681c      	ldr	r4, [r3, #0]
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f001 f9b8 	bl	80031a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e34:	4603      	mov	r3, r0
 8001e36:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6919      	ldr	r1, [r3, #16]
 8001e40:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_ADC_PollForConversion+0x1e0>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d118      	bne.n	8001e7a <HAL_ADC_PollForConversion+0xf6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68d9      	ldr	r1, [r3, #12]
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_ADC_PollForConversion+0x1e4>)
 8001e50:	400b      	ands	r3, r1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d111      	bne.n	8001e7a <HAL_ADC_PollForConversion+0xf6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6919      	ldr	r1, [r3, #16]
 8001e5c:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <HAL_ADC_PollForConversion+0x1e8>)
 8001e5e:	400b      	ands	r3, r1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d108      	bne.n	8001e76 <HAL_ADC_PollForConversion+0xf2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_ADC_PollForConversion+0x1ec>)
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_PollForConversion+0xf2>
 8001e72:	2314      	movs	r3, #20
 8001e74:	e020      	b.n	8001eb8 <HAL_ADC_PollForConversion+0x134>
 8001e76:	2329      	movs	r3, #41	; 0x29
 8001e78:	e01e      	b.n	8001eb8 <HAL_ADC_PollForConversion+0x134>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6919      	ldr	r1, [r3, #16]
 8001e80:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_ADC_PollForConversion+0x1e8>)
 8001e82:	400b      	ands	r3, r1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x112>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <HAL_ADC_PollForConversion+0x1ec>)
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0x12e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6919      	ldr	r1, [r3, #16]
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_ADC_PollForConversion+0x1f0>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x132>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_ADC_PollForConversion+0x1f0>)
 8001eac:	400b      	ands	r3, r1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x132>
 8001eb2:	2354      	movs	r3, #84	; 0x54
 8001eb4:	e000      	b.n	8001eb8 <HAL_ADC_PollForConversion+0x134>
 8001eb6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ebe:	e01d      	b.n	8001efc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec6:	d016      	beq.n	8001ef6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_ADC_PollForConversion+0x15a>
 8001ece:	f7ff fd7b 	bl	80019c8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d20b      	bcs.n	8001ef6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f043 0204 	orr.w	r2, r3, #4
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e030      	b.n	8001f58 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8dd      	bhi.n	8001ec0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0212 	mvn.w	r2, #18
 8001f0c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f24:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f28:	d115      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d111      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd90      	pop	{r4, r7, pc}
 8001f60:	20000004 	.word	0x20000004
 8001f64:	24924924 	.word	0x24924924
 8001f68:	00924924 	.word	0x00924924
 8001f6c:	12492492 	.word	0x12492492
 8001f70:	00492492 	.word	0x00492492
 8001f74:	00249249 	.word	0x00249249

08001f78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x20>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0dc      	b.n	800216a <HAL_ADC_ConfigChannel+0x1da>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d81c      	bhi.n	8001ffa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b05      	subs	r3, #5
 8001fd2:	221f      	movs	r2, #31
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4019      	ands	r1, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b05      	subs	r3, #5
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff8:	e03c      	b.n	8002074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d81c      	bhi.n	800203c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b23      	subs	r3, #35	; 0x23
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4019      	ands	r1, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b23      	subs	r3, #35	; 0x23
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
 800203a:	e01b      	b.n	8002074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b41      	subs	r3, #65	; 0x41
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	4019      	ands	r1, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b41      	subs	r3, #65	; 0x41
 8002068:	fa00 f203 	lsl.w	r2, r0, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d91c      	bls.n	80020b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3b1e      	subs	r3, #30
 800208e:	2207      	movs	r2, #7
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	4019      	ands	r1, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6898      	ldr	r0, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	3b1e      	subs	r3, #30
 80020a8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	e019      	b.n	80020ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6919      	ldr	r1, [r3, #16]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	2207      	movs	r2, #7
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	4019      	ands	r1, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6898      	ldr	r0, [r3, #8]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	fa00 f203 	lsl.w	r2, r0, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020f6:	2b11      	cmp	r3, #17
 80020f8:	d132      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_ADC_ConfigChannel+0x1e4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d125      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d126      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002120:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d11a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_ADC_ConfigChannel+0x1e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a13      	ldr	r2, [pc, #76]	; (800217c <HAL_ADC_ConfigChannel+0x1ec>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9a      	lsrs	r2, r3, #18
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002140:	e002      	b.n	8002148 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3b01      	subs	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x1b2>
 800214e:	e007      	b.n	8002160 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012400 	.word	0x40012400
 8002178:	20000004 	.word	0x20000004
 800217c:	431bde83 	.word	0x431bde83

08002180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d039      	beq.n	8002212 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <ADC_Enable+0x9c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <ADC_Enable+0xa0>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	0c9b      	lsrs	r3, r3, #18
 80021ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021bc:	e002      	b.n	80021c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ca:	f7ff fbfd 	bl	80019c8 <HAL_GetTick>
 80021ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021d0:	e018      	b.n	8002204 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d2:	f7ff fbf9 	bl	80019c8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d911      	bls.n	8002204 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e007      	b.n	8002214 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d1df      	bne.n	80021d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000004 	.word	0x20000004
 8002220:	431bde83 	.word	0x431bde83

08002224 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d127      	bne.n	800228e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800224e:	f7ff fbbb 	bl	80019c8 <HAL_GetTick>
 8002252:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002254:	e014      	b.n	8002280 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002256:	f7ff fbb7 	bl	80019c8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d90d      	bls.n	8002280 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d0e3      	beq.n	8002256 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <__NVIC_EnableIRQ+0x34>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff4f 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff64 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ffb2 	bl	8002388 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff81 	bl	8002334 <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff57 	bl	80022fc <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b08b      	sub	sp, #44	; 0x2c
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e127      	b.n	80026bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800246c:	2201      	movs	r2, #1
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 8116 	bne.w	80026b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b12      	cmp	r3, #18
 8002490:	d034      	beq.n	80024fc <HAL_GPIO_Init+0xa4>
 8002492:	2b12      	cmp	r3, #18
 8002494:	d80d      	bhi.n	80024b2 <HAL_GPIO_Init+0x5a>
 8002496:	2b02      	cmp	r3, #2
 8002498:	d02b      	beq.n	80024f2 <HAL_GPIO_Init+0x9a>
 800249a:	2b02      	cmp	r3, #2
 800249c:	d804      	bhi.n	80024a8 <HAL_GPIO_Init+0x50>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d031      	beq.n	8002506 <HAL_GPIO_Init+0xae>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d01c      	beq.n	80024e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024a6:	e048      	b.n	800253a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d043      	beq.n	8002534 <HAL_GPIO_Init+0xdc>
 80024ac:	2b11      	cmp	r3, #17
 80024ae:	d01b      	beq.n	80024e8 <HAL_GPIO_Init+0x90>
          break;
 80024b0:	e043      	b.n	800253a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024b2:	4a89      	ldr	r2, [pc, #548]	; (80026d8 <HAL_GPIO_Init+0x280>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d026      	beq.n	8002506 <HAL_GPIO_Init+0xae>
 80024b8:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_GPIO_Init+0x280>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d806      	bhi.n	80024cc <HAL_GPIO_Init+0x74>
 80024be:	4a87      	ldr	r2, [pc, #540]	; (80026dc <HAL_GPIO_Init+0x284>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d020      	beq.n	8002506 <HAL_GPIO_Init+0xae>
 80024c4:	4a86      	ldr	r2, [pc, #536]	; (80026e0 <HAL_GPIO_Init+0x288>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_GPIO_Init+0xae>
          break;
 80024ca:	e036      	b.n	800253a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024cc:	4a85      	ldr	r2, [pc, #532]	; (80026e4 <HAL_GPIO_Init+0x28c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0xae>
 80024d2:	4a85      	ldr	r2, [pc, #532]	; (80026e8 <HAL_GPIO_Init+0x290>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d016      	beq.n	8002506 <HAL_GPIO_Init+0xae>
 80024d8:	4a84      	ldr	r2, [pc, #528]	; (80026ec <HAL_GPIO_Init+0x294>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0xae>
          break;
 80024de:	e02c      	b.n	800253a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	623b      	str	r3, [r7, #32]
          break;
 80024e6:	e028      	b.n	800253a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	3304      	adds	r3, #4
 80024ee:	623b      	str	r3, [r7, #32]
          break;
 80024f0:	e023      	b.n	800253a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	3308      	adds	r3, #8
 80024f8:	623b      	str	r3, [r7, #32]
          break;
 80024fa:	e01e      	b.n	800253a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	330c      	adds	r3, #12
 8002502:	623b      	str	r3, [r7, #32]
          break;
 8002504:	e019      	b.n	800253a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250e:	2304      	movs	r3, #4
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e012      	b.n	800253a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800251c:	2308      	movs	r3, #8
 800251e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	611a      	str	r2, [r3, #16]
          break;
 8002526:	e008      	b.n	800253a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002528:	2308      	movs	r3, #8
 800252a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	615a      	str	r2, [r3, #20]
          break;
 8002532:	e002      	b.n	800253a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
          break;
 8002538:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2bff      	cmp	r3, #255	; 0xff
 800253e:	d801      	bhi.n	8002544 <HAL_GPIO_Init+0xec>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	e001      	b.n	8002548 <HAL_GPIO_Init+0xf0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2bff      	cmp	r3, #255	; 0xff
 800254e:	d802      	bhi.n	8002556 <HAL_GPIO_Init+0xfe>
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	e002      	b.n	800255c <HAL_GPIO_Init+0x104>
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3b08      	subs	r3, #8
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	210f      	movs	r1, #15
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	6a39      	ldr	r1, [r7, #32]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8096 	beq.w	80026b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800258a:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_GPIO_Init+0x298>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_GPIO_Init+0x298>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6193      	str	r3, [r2, #24]
 8002596:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x298>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a2:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_GPIO_Init+0x29c>)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_GPIO_Init+0x2a0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x19e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4a      	ldr	r2, [pc, #296]	; (80026fc <HAL_GPIO_Init+0x2a4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x19a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_GPIO_Init+0x2a8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x196>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_GPIO_Init+0x2ac>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x192>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x1a0>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e004      	b.n	80025f8 <HAL_GPIO_Init+0x1a0>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e002      	b.n	80025f8 <HAL_GPIO_Init+0x1a0>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_Init+0x1a0>
 80025f6:	2300      	movs	r3, #0
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	4093      	lsls	r3, r2
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002608:	493a      	ldr	r1, [pc, #232]	; (80026f4 <HAL_GPIO_Init+0x29c>)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4938      	ldr	r1, [pc, #224]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
 800262e:	e006      	b.n	800263e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	43db      	mvns	r3, r3
 8002638:	4933      	ldr	r1, [pc, #204]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 800263a:	4013      	ands	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	492e      	ldr	r1, [pc, #184]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
 8002656:	e006      	b.n	8002666 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	43db      	mvns	r3, r3
 8002660:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002662:	4013      	ands	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	4924      	ldr	r1, [pc, #144]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
 800267e:	e006      	b.n	800268e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	43db      	mvns	r3, r3
 8002688:	491f      	ldr	r1, [pc, #124]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 800268a:	4013      	ands	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	491a      	ldr	r1, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60cb      	str	r3, [r1, #12]
 80026a6:	e006      	b.n	80026b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	4915      	ldr	r1, [pc, #84]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	3301      	adds	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f47f aed0 	bne.w	800246c <HAL_GPIO_Init+0x14>
  }
}
 80026cc:	bf00      	nop
 80026ce:	372c      	adds	r7, #44	; 0x2c
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	10210000 	.word	0x10210000
 80026dc:	10110000 	.word	0x10110000
 80026e0:	10120000 	.word	0x10120000
 80026e4:	10310000 	.word	0x10310000
 80026e8:	10320000 	.word	0x10320000
 80026ec:	10220000 	.word	0x10220000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000
 80026f8:	40010800 	.word	0x40010800
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	40011000 	.word	0x40011000
 8002704:	40011400 	.word	0x40011400
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43d9      	mvns	r1, r3
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	400b      	ands	r3, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fa7e 	bl	8000c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e26c      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c0:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d00c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027cc:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d112      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
 80027d8:	4b8c      	ldr	r3, [pc, #560]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d06c      	beq.n	80028cc <HAL_RCC_OscConfig+0x12c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d168      	bne.n	80028cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e246      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x76>
 8002808:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a7f      	ldr	r2, [pc, #508]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e02e      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7a      	ldr	r2, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b78      	ldr	r3, [pc, #480]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a77      	ldr	r2, [pc, #476]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xbc>
 8002842:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a71      	ldr	r2, [pc, #452]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 800285c:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6a      	ldr	r2, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a67      	ldr	r2, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff f8a4 	bl	80019c8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff f8a0 	bl	80019c8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1fa      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xe4>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff f890 	bl	80019c8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff f88c 	bl	80019c8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1e6      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x10c>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d063      	beq.n	80029a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d11c      	bne.n	800292c <HAL_RCC_OscConfig+0x18c>
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x176>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e1ba      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4939      	ldr	r1, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	e03a      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff f845 	bl	80019c8 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002942:	f7ff f841 	bl	80019c8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e19b      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4927      	ldr	r1, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff f824 	bl	80019c8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7ff f820 	bl	80019c8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e17a      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d03a      	beq.n	8002a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d019      	beq.n	80029ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x274>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7ff f804 	bl	80019c8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7ff f800 	bl	80019c8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e15a      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 fb0a 	bl	8002ffc <RCC_Delay>
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_OscConfig+0x274>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7fe ffea 	bl	80019c8 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f6:	e00f      	b.n	8002a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe ffe6 	bl	80019c8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d908      	bls.n	8002a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e140      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	42420000 	.word	0x42420000
 8002a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b9e      	ldr	r3, [pc, #632]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e9      	bne.n	80029f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a6 	beq.w	8002b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b97      	ldr	r3, [pc, #604]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b94      	ldr	r3, [pc, #592]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a93      	ldr	r2, [pc, #588]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x4f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a8a      	ldr	r2, [pc, #552]	; (8002c98 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe ffa7 	bl	80019c8 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe ffa3 	bl	80019c8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	; 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0fd      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x312>
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a7a      	ldr	r2, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	e02d      	b.n	8002b0e <HAL_RCC_OscConfig+0x36e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x334>
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a75      	ldr	r2, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a72      	ldr	r2, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x36e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x356>
 8002adc:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a6c      	ldr	r2, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	4b6a      	ldr	r3, [pc, #424]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a69      	ldr	r2, [pc, #420]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x36e>
 8002af6:	4b67      	ldr	r3, [pc, #412]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a66      	ldr	r2, [pc, #408]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6213      	str	r3, [r2, #32]
 8002b02:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a63      	ldr	r2, [pc, #396]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b16:	f7fe ff57 	bl	80019c8 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe ff53 	bl	80019c8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0ab      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCC_OscConfig+0x37e>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe ff41 	bl	80019c8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe ff3d 	bl	80019c8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e095      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b48      	ldr	r3, [pc, #288]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4a47      	ldr	r2, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8081 	beq.w	8002c8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d061      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d146      	bne.n	8002c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_OscConfig+0x4fc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe ff11 	bl	80019c8 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe ff0d 	bl	80019c8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e067      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	492d      	ldr	r1, [pc, #180]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a19      	ldr	r1, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	4927      	ldr	r1, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x4fc>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe fee1 	bl	80019c8 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fedd 	bl	80019c8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e037      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x46a>
 8002c28:	e02f      	b.n	8002c8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <HAL_RCC_OscConfig+0x4fc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe feca 	bl	80019c8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fec6 	bl	80019c8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e020      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x498>
 8002c56:	e018      	b.n	8002c8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e013      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	42420060 	.word	0x42420060

08002ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0d0      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d910      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4965      	ldr	r1, [pc, #404]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d040      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d115      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e073      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06b      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4936      	ldr	r1, [pc, #216]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fe1a 	bl	80019c8 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7fe fe16 	bl	80019c8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e053      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 020c 	and.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d1eb      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d210      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 0207 	bic.w	r2, r3, #7
 8002dd6:	4922      	ldr	r1, [pc, #136]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f821 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e32:	4601      	mov	r1, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	fa21 f303 	lsr.w	r3, r1, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1cc>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1d0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f9ac 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08007300 	.word	0x08007300
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	20000008 	.word	0x20000008

08002e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	b490      	push	{r4, r7}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e7c:	1d3c      	adds	r4, r7, #4
 8002e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x46>
 8002eb2:	e02d      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb6:	623b      	str	r3, [r7, #32]
      break;
 8002eb8:	e02d      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	0c9b      	lsrs	r3, r3, #18
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ecc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0c5b      	lsrs	r3, r3, #17
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef2:	fb02 f203 	mul.w	r2, r2, r3
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	e004      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	623b      	str	r3, [r7, #32]
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f12:	623b      	str	r3, [r7, #32]
      break;
 8002f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc90      	pop	{r4, r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	080071e8 	.word	0x080071e8
 8002f28:	080071f8 	.word	0x080071f8
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	007a1200 	.word	0x007a1200
 8002f34:	003d0900 	.word	0x003d0900

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b02      	ldr	r3, [pc, #8]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	20000004 	.word	0x20000004

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff2 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f54:	4601      	mov	r1, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08007310 	.word	0x08007310

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4601      	mov	r1, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0adb      	lsrs	r3, r3, #11
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08007310 	.word	0x08007310

08002f9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	220f      	movs	r2, #15
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0207 	and.w	r2, r3, #7
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022000 	.word	0x40022000

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000004 	.word	0x20000004
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d07d      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
 8003070:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d118      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003098:	f7fe fc96 	bl	80019c8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fe fc92 	bl	80019c8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e06d      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02e      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d027      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe fc61 	bl	80019c8 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fe fc5d 	bl	80019c8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e036      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ee      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4917      	ldr	r1, [pc, #92]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	4313      	orrs	r3, r2
 800313c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	490b      	ldr	r1, [pc, #44]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4904      	ldr	r1, [pc, #16]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420440 	.word	0x42420440

080031a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b08d      	sub	sp, #52	; 0x34
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031ac:	4b55      	ldr	r3, [pc, #340]	; (8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80031ae:	f107 040c 	add.w	r4, r7, #12
 80031b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	2300      	movs	r3, #0
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d07f      	beq.n	80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d002      	beq.n	80031e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d048      	beq.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80031e0:	e08b      	b.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80031e8:	4b48      	ldr	r3, [pc, #288]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d07f      	beq.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	0c9b      	lsrs	r3, r3, #18
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003200:	4413      	add	r3, r2
 8003202:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003206:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0c5b      	lsrs	r3, r3, #17
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003220:	4413      	add	r3, r2
 8003222:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003232:	4a37      	ldr	r2, [pc, #220]	; (8003310 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	fbb2 f2f3 	udiv	r2, r2, r3
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003242:	e004      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	4a33      	ldr	r2, [pc, #204]	; (8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325a:	d102      	bne.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003260:	e048      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4a2c      	ldr	r2, [pc, #176]	; (8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003270:	e040      	b.n	80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003282:	d108      	bne.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
 8003294:	e01f      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a0:	d109      	bne.n	80032b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80032ae:	f649 4340 	movw	r3, #40000	; 0x9c40
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b4:	e00f      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c0:	d11a      	bne.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d014      	beq.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80032ce:	f24f 4324 	movw	r3, #62500	; 0xf424
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032d4:	e010      	b.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80032d6:	e00f      	b.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032d8:	f7ff fe4c 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0b9b      	lsrs	r3, r3, #14
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	3301      	adds	r3, #1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80032f8:	bf00      	nop
    }
  }
  return (frequency);
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3734      	adds	r7, #52	; 0x34
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	080071fc 	.word	0x080071fc
 8003308:	0800720c 	.word	0x0800720c
 800330c:	40021000 	.word	0x40021000
 8003310:	007a1200 	.word	0x007a1200
 8003314:	003d0900 	.word	0x003d0900
 8003318:	aaaaaaab 	.word	0xaaaaaaab

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e041      	b.n	80033b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f839 	bl	80033ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 f9b4 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e03a      	b.n	800345a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_TIM_Base_Start_IT+0x98>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x58>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d009      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x58>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_TIM_Base_Start_IT+0x9c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x58>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <HAL_TIM_Base_Start_IT+0xa0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d111      	bne.n	8003448 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d010      	beq.n	8003458 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	e007      	b.n	8003458 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800

08003470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0202 	mvn.w	r2, #2
 800349c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8ed 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8e0 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8ef 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0204 	mvn.w	r2, #4
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8c3 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8b6 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f8c5 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0208 	mvn.w	r2, #8
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2204      	movs	r2, #4
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f899 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f88c 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f89b 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b10      	cmp	r3, #16
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b10      	cmp	r3, #16
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0210 	mvn.w	r2, #16
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2208      	movs	r2, #8
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f86f 	bl	8003692 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f862 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f871 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10e      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d107      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0201 	mvn.w	r2, #1
 80035ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fd0c 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8bf 	bl	800379e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f835 	bl	80036b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b20      	cmp	r3, #32
 8003658:	d10e      	bne.n	8003678 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d107      	bne.n	8003678 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0220 	mvn.w	r2, #32
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f88a 	bl	800378c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a29      	ldr	r2, [pc, #164]	; (8003780 <TIM_Base_SetConfig+0xb8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00b      	beq.n	80036f8 <TIM_Base_SetConfig+0x30>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d007      	beq.n	80036f8 <TIM_Base_SetConfig+0x30>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a26      	ldr	r2, [pc, #152]	; (8003784 <TIM_Base_SetConfig+0xbc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a25      	ldr	r2, [pc, #148]	; (8003788 <TIM_Base_SetConfig+0xc0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d108      	bne.n	800370a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <TIM_Base_SetConfig+0xb8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00b      	beq.n	800372a <TIM_Base_SetConfig+0x62>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d007      	beq.n	800372a <TIM_Base_SetConfig+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <TIM_Base_SetConfig+0xbc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <TIM_Base_SetConfig+0xc0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <TIM_Base_SetConfig+0xb8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	615a      	str	r2, [r3, #20]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e03f      	b.n	8003842 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fc9e 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f905 	bl	8003a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b08a      	sub	sp, #40	; 0x28
 800384e:	af02      	add	r7, sp, #8
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b20      	cmp	r3, #32
 8003868:	d17c      	bne.n	8003964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_UART_Transmit+0x2c>
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e075      	b.n	8003966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_UART_Transmit+0x3e>
 8003884:	2302      	movs	r3, #2
 8003886:	e06e      	b.n	8003966 <HAL_UART_Transmit+0x11c>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2221      	movs	r2, #33	; 0x21
 800389a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800389e:	f7fe f893 	bl	80019c8 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d108      	bne.n	80038cc <HAL_UART_Transmit+0x82>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038dc:	e02a      	b.n	8003934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f840 	bl	800396e <UART_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e036      	b.n	8003966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	3302      	adds	r3, #2
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e007      	b.n	8003926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3301      	adds	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1cf      	bne.n	80038de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f810 	bl	800396e <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e006      	b.n	8003966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4613      	mov	r3, r2
 800397c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397e:	e02c      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003986:	d028      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0x30>
 800398e:	f7fe f81b 	bl	80019c8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	429a      	cmp	r2, r3
 800399c:	d21d      	bcs.n	80039da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e00f      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d0c3      	beq.n	8003980 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a3e:	f023 030c 	bic.w	r3, r3, #12
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <UART_SetConfig+0x114>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7ff fa82 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	e002      	b.n	8003a7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a74:	f7ff fa6a 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8003a78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <UART_SetConfig+0x118>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	0119      	lsls	r1, r3, #4
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <UART_SetConfig+0x118>)
 8003ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2064      	movs	r0, #100	; 0x64
 8003aba:	fb00 f303 	mul.w	r3, r0, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <UART_SetConfig+0x118>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad0:	4419      	add	r1, r3
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <UART_SetConfig+0x118>)
 8003aea:	fba3 0302 	umull	r0, r3, r3, r2
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2064      	movs	r0, #100	; 0x64
 8003af2:	fb00 f303 	mul.w	r3, r0, r3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	3332      	adds	r3, #50	; 0x32
 8003afc:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <UART_SetConfig+0x118>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	f003 020f 	and.w	r2, r3, #15
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	51eb851f 	.word	0x51eb851f

08003b20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b26:	f3ef 8305 	mrs	r3, IPSR
 8003b2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b32:	f3ef 8310 	mrs	r3, PRIMASK
 8003b36:	607b      	str	r3, [r7, #4]
  return(result);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <osKernelInitialize+0x32>
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <osKernelInitialize+0x60>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d109      	bne.n	8003b5a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b46:	f3ef 8311 	mrs	r3, BASEPRI
 8003b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b52:	f06f 0305 	mvn.w	r3, #5
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e00c      	b.n	8003b74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <osKernelInitialize+0x60>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <osKernelInitialize+0x60>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b74:	68fb      	ldr	r3, [r7, #12]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000098 	.word	0x20000098

08003b84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b8a:	f3ef 8305 	mrs	r3, IPSR
 8003b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	607b      	str	r3, [r7, #4]
  return(result);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <osKernelStart+0x32>
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <osKernelStart+0x64>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d109      	bne.n	8003bbe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003baa:	f3ef 8311 	mrs	r3, BASEPRI
 8003bae:	603b      	str	r3, [r7, #0]
  return(result);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <osKernelStart+0x3a>
    stat = osErrorISR;
 8003bb6:	f06f 0305 	mvn.w	r3, #5
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e00e      	b.n	8003bdc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <osKernelStart+0x64>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <osKernelStart+0x64>)
 8003bc8:	2202      	movs	r2, #2
 8003bca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003bcc:	f001 fa8a 	bl	80050e4 <vTaskStartScheduler>
      stat = osOK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e002      	b.n	8003bdc <osKernelStart+0x58>
    } else {
      stat = osError;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000098 	.word	0x20000098

08003bec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b092      	sub	sp, #72	; 0x48
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bfc:	f3ef 8305 	mrs	r3, IPSR
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 8094 	bne.w	8003d32 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0e:	623b      	str	r3, [r7, #32]
  return(result);
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 808d 	bne.w	8003d32 <osThreadNew+0x146>
 8003c18:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <osThreadNew+0x150>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d106      	bne.n	8003c2e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c20:	f3ef 8311 	mrs	r3, BASEPRI
 8003c24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8082 	bne.w	8003d32 <osThreadNew+0x146>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07e      	beq.n	8003d32 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003c38:	2318      	movs	r3, #24
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003c40:	f107 031b 	add.w	r3, r7, #27
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d045      	beq.n	8003cde <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <osThreadNew+0x74>
        name = attr->name;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <osThreadNew+0x9a>
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	2b38      	cmp	r3, #56	; 0x38
 8003c78:	d805      	bhi.n	8003c86 <osThreadNew+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <osThreadNew+0x9e>
        return (NULL);
 8003c86:	2300      	movs	r3, #0
 8003c88:	e054      	b.n	8003d34 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <osThreadNew+0xd4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b5b      	cmp	r3, #91	; 0x5b
 8003ca8:	d90a      	bls.n	8003cc0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <osThreadNew+0xd4>
        mem = 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	e010      	b.n	8003ce2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10c      	bne.n	8003ce2 <osThreadNew+0xf6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <osThreadNew+0xf6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <osThreadNew+0xf6>
          mem = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cdc:	e001      	b.n	8003ce2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d110      	bne.n	8003d0a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f001 f828 	bl	8004d54 <xTaskCreateStatic>
 8003d04:	4603      	mov	r3, r0
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e013      	b.n	8003d32 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d110      	bne.n	8003d32 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f001 f86f 	bl	8004e06 <xTaskCreate>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <osThreadNew+0x146>
          hTask = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d32:	697b      	ldr	r3, [r7, #20]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3738      	adds	r7, #56	; 0x38
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000098 	.word	0x20000098

08003d40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d48:	f3ef 8305 	mrs	r3, IPSR
 8003d4c:	613b      	str	r3, [r7, #16]
  return(result);
 8003d4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8310 	mrs	r3, PRIMASK
 8003d58:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <osDelay+0x34>
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <osDelay+0x58>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d109      	bne.n	8003d7c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d68:	f3ef 8311 	mrs	r3, BASEPRI
 8003d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <osDelay+0x3c>
    stat = osErrorISR;
 8003d74:	f06f 0305 	mvn.w	r3, #5
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e007      	b.n	8003d8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 f978 	bl	800507c <vTaskDelay>
    }
  }

  return (stat);
 8003d8c:	697b      	ldr	r3, [r7, #20]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000098 	.word	0x20000098

08003d9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dac:	f3ef 8305 	mrs	r3, IPSR
 8003db0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003db2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d170      	bne.n	8003e9a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d16a      	bne.n	8003e9a <osMessageQueueNew+0xfe>
 8003dc4:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <osMessageQueueNew+0x108>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d105      	bne.n	8003dd8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd0:	613b      	str	r3, [r7, #16]
  return(result);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d160      	bne.n	8003e9a <osMessageQueueNew+0xfe>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d05d      	beq.n	8003e9a <osMessageQueueNew+0xfe>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05a      	beq.n	8003e9a <osMessageQueueNew+0xfe>
    mem = -1;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003de8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d029      	beq.n	8003e44 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <osMessageQueueNew+0x82>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b4f      	cmp	r3, #79	; 0x4f
 8003dfe:	d90e      	bls.n	8003e1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <osMessageQueueNew+0x82>
        mem = 1;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	e014      	b.n	8003e48 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d110      	bne.n	8003e48 <osMessageQueueNew+0xac>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <osMessageQueueNew+0xac>
          mem = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	e001      	b.n	8003e48 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d10c      	bne.n	8003e68 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	2300      	movs	r3, #0
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fa52 	bl	8004308 <xQueueGenericCreateStatic>
 8003e64:	6278      	str	r0, [r7, #36]	; 0x24
 8003e66:	e008      	b.n	8003e7a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 faba 	bl	80043ec <xQueueGenericCreate>
 8003e78:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <osMessageQueueNew+0xf2>
        name = attr->name;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e001      	b.n	8003e92 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e96:	f000 ff01 	bl	8004c9c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000098 	.word	0x20000098

08003ea8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec0:	f3ef 8305 	mrs	r3, IPSR
 8003ec4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ec6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <osMessageQueuePut+0x44>
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <osMessageQueuePut+0xe0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d12e      	bne.n	8003f3e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ee4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d028      	beq.n	8003f3e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <osMessageQueuePut+0x56>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <osMessageQueuePut+0x56>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003efe:	f06f 0303 	mvn.w	r3, #3
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f04:	e039      	b.n	8003f7a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003f0a:	f107 0210 	add.w	r2, r7, #16
 8003f0e:	2300      	movs	r3, #0
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6a38      	ldr	r0, [r7, #32]
 8003f14:	f000 fbc4 	bl	80046a0 <xQueueGenericSendFromISR>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d003      	beq.n	8003f26 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003f1e:	f06f 0302 	mvn.w	r3, #2
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f24:	e029      	b.n	8003f7a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d026      	beq.n	8003f7a <osMessageQueuePut+0xd2>
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <osMessageQueuePut+0xe4>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f3c:	e01d      	b.n	8003f7a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <osMessageQueuePut+0xa2>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003f4a:	f06f 0303 	mvn.w	r3, #3
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	e014      	b.n	8003f7c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f52:	2300      	movs	r3, #0
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	6a38      	ldr	r0, [r7, #32]
 8003f5a:	f000 faa7 	bl	80044ac <xQueueGenericSend>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d00b      	beq.n	8003f7c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003f6a:	f06f 0301 	mvn.w	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	e004      	b.n	8003f7c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003f72:	f06f 0302 	mvn.w	r3, #2
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e000      	b.n	8003f7c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3728      	adds	r7, #40	; 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000098 	.word	0x20000098
 8003f8c:	e000ed04 	.word	0xe000ed04

08003f90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa6:	f3ef 8305 	mrs	r3, IPSR
 8003faa:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <osMessageQueueGet+0x42>
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	; (800406c <osMessageQueueGet+0xdc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d12e      	bne.n	8004024 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fca:	617b      	str	r3, [r7, #20]
  return(result);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d028      	beq.n	8004024 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <osMessageQueueGet+0x54>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <osMessageQueueGet+0x54>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003fe4:	f06f 0303 	mvn.w	r3, #3
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003fea:	e038      	b.n	800405e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	6a38      	ldr	r0, [r7, #32]
 8003ffa:	f000 fcc1 	bl	8004980 <xQueueReceiveFromISR>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b01      	cmp	r3, #1
 8004002:	d003      	beq.n	800400c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004004:	f06f 0302 	mvn.w	r3, #2
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800400a:	e028      	b.n	800405e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d025      	beq.n	800405e <osMessageQueueGet+0xce>
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <osMessageQueueGet+0xe0>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004022:	e01c      	b.n	800405e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <osMessageQueueGet+0xa0>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004030:	f06f 0303 	mvn.w	r3, #3
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	e013      	b.n	8004060 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	6a38      	ldr	r0, [r7, #32]
 800403e:	f000 fbc3 	bl	80047c8 <xQueueReceive>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d00b      	beq.n	8004060 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800404e:	f06f 0301 	mvn.w	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	e004      	b.n	8004060 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004056:	f06f 0302 	mvn.w	r3, #2
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
 800405c:	e000      	b.n	8004060 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800405e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004062:	4618      	mov	r0, r3
 8004064:	3728      	adds	r7, #40	; 0x28
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000098 	.word	0x20000098
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a06      	ldr	r2, [pc, #24]	; (800409c <vApplicationGetIdleTaskMemory+0x28>)
 8004084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800408a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	2000009c 	.word	0x2000009c
 80040a0:	200000f8 	.word	0x200000f8

080040a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80040b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <vApplicationGetTimerTaskMemory+0x30>)
 80040ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	200002f8 	.word	0x200002f8
 80040d4:	20000354 	.word	0x20000354

080040d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f103 0208 	add.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 0208 	add.w	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f103 0208 	add.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800418a:	d103      	bne.n	8004194 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e00c      	b.n	80041ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3308      	adds	r3, #8
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e002      	b.n	80041a2 <vListInsert+0x2e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d2f6      	bcs.n	800419c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6892      	ldr	r2, [r2, #8]
 80041fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6852      	ldr	r2, [r2, #4]
 8004204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d103      	bne.n	8004218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
	...

08004238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	e7fe      	b.n	800425e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004260:	f002 f852 	bl	8006308 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	441a      	add	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	3b01      	subs	r3, #1
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	441a      	add	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	22ff      	movs	r2, #255	; 0xff
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	22ff      	movs	r2, #255	; 0xff
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d114      	bne.n	80042e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3310      	adds	r3, #16
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f992 	bl	80055ec <xTaskRemoveFromEventList>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d012      	beq.n	80042f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <xQueueGenericReset+0xcc>)
 80042d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	e009      	b.n	80042f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3310      	adds	r3, #16
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fef7 	bl	80040d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3324      	adds	r3, #36	; 0x24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fef2 	bl	80040d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042f4:	f002 f836 	bl	8006364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042f8:	2301      	movs	r3, #1
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	; 0x38
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <xQueueGenericCreateStatic+0x28>
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
 800432e:	e7fe      	b.n	800432e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <xQueueGenericCreateStatic+0x42>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	e7fe      	b.n	8004348 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <xQueueGenericCreateStatic+0x4e>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <xQueueGenericCreateStatic+0x52>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueGenericCreateStatic+0x54>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <xQueueGenericCreateStatic+0x6c>
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	623b      	str	r3, [r7, #32]
 8004372:	e7fe      	b.n	8004372 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <xQueueGenericCreateStatic+0x78>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <xQueueGenericCreateStatic+0x7c>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <xQueueGenericCreateStatic+0x7e>
 8004384:	2300      	movs	r3, #0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <xQueueGenericCreateStatic+0x96>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e7fe      	b.n	800439c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800439e:	2350      	movs	r3, #80	; 0x50
 80043a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b50      	cmp	r3, #80	; 0x50
 80043a6:	d009      	beq.n	80043bc <xQueueGenericCreateStatic+0xb4>
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e7fe      	b.n	80043ba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f842 	bl	8004466 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3730      	adds	r7, #48	; 0x30
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <xQueueGenericCreate+0x28>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e7fe      	b.n	8004412 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e004      	b.n	800442a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	fb02 f303 	mul.w	r3, r2, r3
 8004428:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3350      	adds	r3, #80	; 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f002 f860 	bl	80064f4 <pvPortMalloc>
 8004434:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00f      	beq.n	800445c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3350      	adds	r3, #80	; 0x50
 8004440:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800444a:	79fa      	ldrb	r2, [r7, #7]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f805 	bl	8004466 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800445c:	69bb      	ldr	r3, [r7, #24]
	}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e002      	b.n	8004488 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004494:	2101      	movs	r1, #1
 8004496:	69b8      	ldr	r0, [r7, #24]
 8004498:	f7ff fece 	bl	8004238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	; 0x38
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <xQueueGenericSend+0x30>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044da:	e7fe      	b.n	80044da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <xQueueGenericSend+0x3e>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueGenericSend+0x42>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueGenericSend+0x44>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <xQueueGenericSend+0x5c>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	e7fe      	b.n	8004506 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d103      	bne.n	8004516 <xQueueGenericSend+0x6a>
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <xQueueGenericSend+0x6e>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <xQueueGenericSend+0x70>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <xQueueGenericSend+0x88>
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	e7fe      	b.n	8004532 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004534:	f001 fa14 	bl	8005960 <xTaskGetSchedulerState>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <xQueueGenericSend+0x98>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xQueueGenericSend+0x9c>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <xQueueGenericSend+0x9e>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <xQueueGenericSend+0xb6>
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e7fe      	b.n	8004560 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004562:	f001 fed1 	bl	8006308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <xQueueGenericSend+0xcc>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d129      	bne.n	80045cc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800457e:	f000 fa7c 	bl	8004a7a <prvCopyDataToQueue>
 8004582:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2b00      	cmp	r3, #0
 800458a:	d010      	beq.n	80045ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	3324      	adds	r3, #36	; 0x24
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f82b 	bl	80055ec <xTaskRemoveFromEventList>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800459c:	4b3f      	ldr	r3, [pc, #252]	; (800469c <xQueueGenericSend+0x1f0>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	e00a      	b.n	80045c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045b4:	4b39      	ldr	r3, [pc, #228]	; (800469c <xQueueGenericSend+0x1f0>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045c4:	f001 fece 	bl	8006364 <vPortExitCritical>
				return pdPASS;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e063      	b.n	8004694 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045d2:	f001 fec7 	bl	8006364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e05c      	b.n	8004694 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 f863 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ea:	2301      	movs	r3, #1
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045ee:	f001 feb9 	bl	8006364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045f2:	f000 fddb 	bl	80051ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045f6:	f001 fe87 	bl	8006308 <vPortEnterCritical>
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004600:	b25b      	sxtb	r3, r3
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004606:	d103      	bne.n	8004610 <xQueueGenericSend+0x164>
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004616:	b25b      	sxtb	r3, r3
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461c:	d103      	bne.n	8004626 <xQueueGenericSend+0x17a>
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004626:	f001 fe9d 	bl	8006364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800462a:	1d3a      	adds	r2, r7, #4
 800462c:	f107 0314 	add.w	r3, r7, #20
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f852 	bl	80056dc <xTaskCheckForTimeOut>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d124      	bne.n	8004688 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800463e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004640:	f000 fb13 	bl	8004c6a <prvIsQueueFull>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	3310      	adds	r3, #16
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff7c 	bl	8005550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800465a:	f000 fa9e 	bl	8004b9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800465e:	f000 fdb3 	bl	80051c8 <xTaskResumeAll>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f47f af7c 	bne.w	8004562 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800466a:	4b0c      	ldr	r3, [pc, #48]	; (800469c <xQueueGenericSend+0x1f0>)
 800466c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	e772      	b.n	8004562 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800467c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467e:	f000 fa8c 	bl	8004b9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004682:	f000 fda1 	bl	80051c8 <xTaskResumeAll>
 8004686:	e76c      	b.n	8004562 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800468a:	f000 fa86 	bl	8004b9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800468e:	f000 fd9b 	bl	80051c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004692:	2300      	movs	r3, #0
		}
	}
}
 8004694:	4618      	mov	r0, r3
 8004696:	3738      	adds	r7, #56	; 0x38
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	; 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <xQueueGenericSendFromISR+0x2c>
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e7fe      	b.n	80046ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <xQueueGenericSendFromISR+0x3a>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <xQueueGenericSendFromISR+0x3e>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueGenericSendFromISR+0x40>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <xQueueGenericSendFromISR+0x58>
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	e7fe      	b.n	80046f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d103      	bne.n	8004706 <xQueueGenericSendFromISR+0x66>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <xQueueGenericSendFromISR+0x6a>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <xQueueGenericSendFromISR+0x6c>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <xQueueGenericSendFromISR+0x84>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e7fe      	b.n	8004722 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004724:	f001 feaa 	bl	800647c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004728:	f3ef 8211 	mrs	r2, BASEPRI
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61ba      	str	r2, [r7, #24]
 800473e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004740:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	429a      	cmp	r2, r3
 800474e:	d302      	bcc.n	8004756 <xQueueGenericSendFromISR+0xb6>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d12c      	bne.n	80047b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004766:	f000 f988 	bl	8004a7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800476a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004772:	d112      	bne.n	800479a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d016      	beq.n	80047aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	3324      	adds	r3, #36	; 0x24
 8004780:	4618      	mov	r0, r3
 8004782:	f000 ff33 	bl	80055ec <xTaskRemoveFromEventList>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800479a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800479e:	3301      	adds	r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	b25a      	sxtb	r2, r3
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047aa:	2301      	movs	r3, #1
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047ae:	e001      	b.n	80047b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3738      	adds	r7, #56	; 0x38
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <xQueueReceive+0x2e>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	e7fe      	b.n	80047f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <xQueueReceive+0x3c>
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <xQueueReceive+0x40>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <xQueueReceive+0x42>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <xQueueReceive+0x5a>
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e7fe      	b.n	8004820 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004822:	f001 f89d 	bl	8005960 <xTaskGetSchedulerState>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <xQueueReceive+0x6a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <xQueueReceive+0x6e>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <xQueueReceive+0x70>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <xQueueReceive+0x88>
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e7fe      	b.n	800484e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004850:	f001 fd5a 	bl	8006308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01f      	beq.n	80048a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004864:	f000 f973 	bl	8004b4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f000 feb5 	bl	80055ec <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b3c      	ldr	r3, [pc, #240]	; (800497c <xQueueReceive+0x1b4>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004898:	f001 fd64 	bl	8006364 <vPortExitCritical>
				return pdPASS;
 800489c:	2301      	movs	r3, #1
 800489e:	e069      	b.n	8004974 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048a6:	f001 fd5d 	bl	8006364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e062      	b.n	8004974 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048b4:	f107 0310 	add.w	r3, r7, #16
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fef9 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048c2:	f001 fd4f 	bl	8006364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048c6:	f000 fc71 	bl	80051ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ca:	f001 fd1d 	bl	8006308 <vPortEnterCritical>
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048da:	d103      	bne.n	80048e4 <xQueueReceive+0x11c>
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f0:	d103      	bne.n	80048fa <xQueueReceive+0x132>
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048fa:	f001 fd33 	bl	8006364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048fe:	1d3a      	adds	r2, r7, #4
 8004900:	f107 0310 	add.w	r3, r7, #16
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fee8 	bl	80056dc <xTaskCheckForTimeOut>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d123      	bne.n	800495a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004914:	f000 f993 	bl	8004c3e <prvIsQueueEmpty>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d017      	beq.n	800494e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fe12 	bl	8005550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800492c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492e:	f000 f934 	bl	8004b9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004932:	f000 fc49 	bl	80051c8 <xTaskResumeAll>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d189      	bne.n	8004850 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <xQueueReceive+0x1b4>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	e780      	b.n	8004850 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800494e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004950:	f000 f923 	bl	8004b9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004954:	f000 fc38 	bl	80051c8 <xTaskResumeAll>
 8004958:	e77a      	b.n	8004850 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800495a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495c:	f000 f91d 	bl	8004b9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004960:	f000 fc32 	bl	80051c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004966:	f000 f96a 	bl	8004c3e <prvIsQueueEmpty>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	f43f af6f 	beq.w	8004850 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004972:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004974:	4618      	mov	r0, r3
 8004976:	3730      	adds	r7, #48	; 0x30
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	; 0x38
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <xQueueReceiveFromISR+0x2a>
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	e7fe      	b.n	80049a8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <xQueueReceiveFromISR+0x38>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <xQueueReceiveFromISR+0x3c>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <xQueueReceiveFromISR+0x3e>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <xQueueReceiveFromISR+0x56>
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	e7fe      	b.n	80049d4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049d6:	f001 fd51 	bl	800647c <vPortValidateInterruptPriority>
	__asm volatile
 80049da:	f3ef 8211 	mrs	r2, BASEPRI
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	61ba      	str	r2, [r7, #24]
 80049f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80049f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d02f      	beq.n	8004a62 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a10:	f000 f89d 	bl	8004b4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	1e5a      	subs	r2, r3, #1
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a24:	d112      	bne.n	8004a4c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	3310      	adds	r3, #16
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fdda 	bl	80055ec <xTaskRemoveFromEventList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00b      	beq.n	8004a5c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e007      	b.n	8004a5c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a50:	3301      	adds	r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	b25a      	sxtb	r2, r3
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a60:	e001      	b.n	8004a66 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3738      	adds	r7, #56	; 0x38
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d14d      	bne.n	8004b3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 ff79 	bl	800599c <xTaskPriorityDisinherit>
 8004aaa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	e043      	b.n	8004b3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d119      	bne.n	8004aee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6898      	ldr	r0, [r3, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	f001 ff13 	bl	80068f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d32b      	bcc.n	8004b3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	e026      	b.n	8004b3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68d8      	ldr	r0, [r3, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	461a      	mov	r2, r3
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	f001 fef9 	bl	80068f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	425b      	negs	r3, r3
 8004b08:	441a      	add	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d207      	bcs.n	8004b2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	425b      	negs	r3, r3
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d105      	bne.n	8004b3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b44:	697b      	ldr	r3, [r7, #20]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d018      	beq.n	8004b92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d303      	bcc.n	8004b82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6838      	ldr	r0, [r7, #0]
 8004b8e:	f001 feaf 	bl	80068f0 <memcpy>
	}
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ba2:	f001 fbb1 	bl	8006308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bae:	e011      	b.n	8004bd4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fd15 	bl	80055ec <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bc8:	f000 fde8 	bl	800579c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dce9      	bgt.n	8004bb0 <prvUnlockQueue+0x16>
 8004bdc:	e000      	b.n	8004be0 <prvUnlockQueue+0x46>
					break;
 8004bde:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004be8:	f001 fbbc 	bl	8006364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bec:	f001 fb8c 	bl	8006308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bf8:	e011      	b.n	8004c1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d012      	beq.n	8004c28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3310      	adds	r3, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fcf0 	bl	80055ec <xTaskRemoveFromEventList>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c12:	f000 fdc3 	bl	800579c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c16:	7bbb      	ldrb	r3, [r7, #14]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dce9      	bgt.n	8004bfa <prvUnlockQueue+0x60>
 8004c26:	e000      	b.n	8004c2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c32:	f001 fb97 	bl	8006364 <vPortExitCritical>
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c46:	f001 fb5f 	bl	8006308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e001      	b.n	8004c5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c5c:	f001 fb82 	bl	8006364 <vPortExitCritical>

	return xReturn;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c72:	f001 fb49 	bl	8006308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d102      	bne.n	8004c88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e001      	b.n	8004c8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c8c:	f001 fb6a 	bl	8006364 <vPortExitCritical>

	return xReturn;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e014      	b.n	8004cd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <vQueueAddToRegistry+0x4c>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cb8:	490b      	ldr	r1, [pc, #44]	; (8004ce8 <vQueueAddToRegistry+0x4c>)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <vQueueAddToRegistry+0x4c>)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cce:	e005      	b.n	8004cdc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	d9e7      	bls.n	8004cac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20001a80 	.word	0x20001a80

08004cec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cfc:	f001 fb04 	bl	8006308 <vPortEnterCritical>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d06:	b25b      	sxtb	r3, r3
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d103      	bne.n	8004d16 <vQueueWaitForMessageRestricted+0x2a>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d22:	d103      	bne.n	8004d2c <vQueueWaitForMessageRestricted+0x40>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2c:	f001 fb1a 	bl	8006364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fc29 	bl	8005598 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f7ff ff27 	bl	8004b9a <prvUnlockQueue>
	}
 8004d4c:	bf00      	nop
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	; 0x38
 8004d58:	af04      	add	r7, sp, #16
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <xTaskCreateStatic+0x28>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e7fe      	b.n	8004d7a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <xTaskCreateStatic+0x42>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e7fe      	b.n	8004d94 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d96:	235c      	movs	r3, #92	; 0x5c
 8004d98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b5c      	cmp	r3, #92	; 0x5c
 8004d9e:	d009      	beq.n	8004db4 <xTaskCreateStatic+0x60>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e7fe      	b.n	8004db2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01e      	beq.n	8004df8 <xTaskCreateStatic+0xa4>
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9303      	str	r3, [sp, #12]
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f850 	bl	8004e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df2:	f000 f8d3 	bl	8004f9c <prvAddNewTaskToReadyList>
 8004df6:	e001      	b.n	8004dfc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dfc:	697b      	ldr	r3, [r7, #20]
	}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b08c      	sub	sp, #48	; 0x30
 8004e0a:	af04      	add	r7, sp, #16
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fb6a 	bl	80064f4 <pvPortMalloc>
 8004e20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e28:	205c      	movs	r0, #92	; 0x5c
 8004e2a:	f001 fb63 	bl	80064f4 <pvPortMalloc>
 8004e2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3c:	e005      	b.n	8004e4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f001 fc1a 	bl	8006678 <vPortFree>
 8004e44:	e001      	b.n	8004e4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d017      	beq.n	8004e80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9303      	str	r3, [sp, #12]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f80e 	bl	8004e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e74:	69f8      	ldr	r0, [r7, #28]
 8004e76:	f000 f891 	bl	8004f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e002      	b.n	8004e86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e86:	69bb      	ldr	r3, [r7, #24]
	}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	21a5      	movs	r1, #165	; 0xa5
 8004eaa:	f001 fd2c 	bl	8006906 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f023 0307 	bic.w	r3, r3, #7
 8004ec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <prvInitialiseNewTask+0x56>
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e7fe      	b.n	8004ee4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e012      	b.n	8004f12 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	7819      	ldrb	r1, [r3, #0]
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	3334      	adds	r3, #52	; 0x34
 8004efc:	460a      	mov	r2, r1
 8004efe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b0f      	cmp	r3, #15
 8004f16:	d9e9      	bls.n	8004eec <prvInitialiseNewTask+0x5c>
 8004f18:	e000      	b.n	8004f1c <prvInitialiseNewTask+0x8c>
		{
			break;
 8004f1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	2b37      	cmp	r3, #55	; 0x37
 8004f28:	d901      	bls.n	8004f2e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f2a:	2337      	movs	r3, #55	; 0x37
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	3304      	adds	r3, #4
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff f8e6 	bl	8004116 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	3318      	adds	r3, #24
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff f8e1 	bl	8004116 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	69b8      	ldr	r0, [r7, #24]
 8004f7e:	f001 f8d7 	bl	8006130 <pxPortInitialiseStack>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f94:	bf00      	nop
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fa4:	f001 f9b0 	bl	8006308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a2c      	ldr	r2, [pc, #176]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fba:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d110      	bne.n	8004fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fc8:	f000 fc0c 	bl	80057e4 <prvInitialiseTaskLists>
 8004fcc:	e00d      	b.n	8004fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fce:	4b26      	ldr	r3, [pc, #152]	; (8005068 <prvAddNewTaskToReadyList+0xcc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fd6:	4b23      	ldr	r3, [pc, #140]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d802      	bhi.n	8004fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <prvAddNewTaskToReadyList+0xd0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <prvAddNewTaskToReadyList+0xd0>)
 8004ff2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <prvAddNewTaskToReadyList+0xd0>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <prvAddNewTaskToReadyList+0xd4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d903      	bls.n	8005010 <prvAddNewTaskToReadyList+0x74>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4a18      	ldr	r2, [pc, #96]	; (8005070 <prvAddNewTaskToReadyList+0xd4>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4a15      	ldr	r2, [pc, #84]	; (8005074 <prvAddNewTaskToReadyList+0xd8>)
 800501e:	441a      	add	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7ff f881 	bl	800412e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800502c:	f001 f99a 	bl	8006364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <prvAddNewTaskToReadyList+0xcc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	429a      	cmp	r2, r3
 8005044:	d207      	bcs.n	8005056 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvAddNewTaskToReadyList+0xdc>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000c28 	.word	0x20000c28
 8005064:	20000754 	.word	0x20000754
 8005068:	20000c34 	.word	0x20000c34
 800506c:	20000c44 	.word	0x20000c44
 8005070:	20000c30 	.word	0x20000c30
 8005074:	20000758 	.word	0x20000758
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <vTaskDelay+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <vTaskDelay+0x2e>
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	e7fe      	b.n	80050a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80050aa:	f000 f87f 	bl	80051ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ae:	2100      	movs	r1, #0
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fcdf 	bl	8005a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050b6:	f000 f887 	bl	80051c8 <xTaskResumeAll>
 80050ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <vTaskDelay+0x64>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000c50 	.word	0x20000c50
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050f2:	463a      	mov	r2, r7
 80050f4:	1d39      	adds	r1, r7, #4
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe ffba 	bl	8004074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	9202      	str	r2, [sp, #8]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	2300      	movs	r3, #0
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	2300      	movs	r3, #0
 8005110:	460a      	mov	r2, r1
 8005112:	4920      	ldr	r1, [pc, #128]	; (8005194 <vTaskStartScheduler+0xb0>)
 8005114:	4820      	ldr	r0, [pc, #128]	; (8005198 <vTaskStartScheduler+0xb4>)
 8005116:	f7ff fe1d 	bl	8004d54 <xTaskCreateStatic>
 800511a:	4602      	mov	r2, r0
 800511c:	4b1f      	ldr	r3, [pc, #124]	; (800519c <vTaskStartScheduler+0xb8>)
 800511e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <vTaskStartScheduler+0xb8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e001      	b.n	8005132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005138:	f000 fcf0 	bl	8005b1c <xTimerCreateTimerTask>
 800513c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d115      	bne.n	8005170 <vTaskStartScheduler+0x8c>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <vTaskStartScheduler+0xbc>)
 8005158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800515c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <vTaskStartScheduler+0xc0>)
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <vTaskStartScheduler+0xc4>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800516a:	f001 f85d 	bl	8006228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800516e:	e00d      	b.n	800518c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005176:	d109      	bne.n	800518c <vTaskStartScheduler+0xa8>
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e7fe      	b.n	800518a <vTaskStartScheduler+0xa6>
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	08007210 	.word	0x08007210
 8005198:	080057b5 	.word	0x080057b5
 800519c:	20000c4c 	.word	0x20000c4c
 80051a0:	20000c48 	.word	0x20000c48
 80051a4:	20000c34 	.word	0x20000c34
 80051a8:	20000c2c 	.word	0x20000c2c

080051ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <vTaskSuspendAll+0x18>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a03      	ldr	r2, [pc, #12]	; (80051c4 <vTaskSuspendAll+0x18>)
 80051b8:	6013      	str	r3, [r2, #0]
}
 80051ba:	bf00      	nop
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000c50 	.word	0x20000c50

080051c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051d6:	4b41      	ldr	r3, [pc, #260]	; (80052dc <xTaskResumeAll+0x114>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <xTaskResumeAll+0x2a>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	e7fe      	b.n	80051f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051f2:	f001 f889 	bl	8006308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051f6:	4b39      	ldr	r3, [pc, #228]	; (80052dc <xTaskResumeAll+0x114>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	4a37      	ldr	r2, [pc, #220]	; (80052dc <xTaskResumeAll+0x114>)
 80051fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005200:	4b36      	ldr	r3, [pc, #216]	; (80052dc <xTaskResumeAll+0x114>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d162      	bne.n	80052ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005208:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <xTaskResumeAll+0x118>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05e      	beq.n	80052ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005210:	e02f      	b.n	8005272 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005212:	4b34      	ldr	r3, [pc, #208]	; (80052e4 <xTaskResumeAll+0x11c>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3318      	adds	r3, #24
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe ffe0 	bl	80041e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe ffdb 	bl	80041e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <xTaskResumeAll+0x120>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <xTaskResumeAll+0x7a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <xTaskResumeAll+0x120>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4a27      	ldr	r2, [pc, #156]	; (80052ec <xTaskResumeAll+0x124>)
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe ff68 	bl	800412e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <xTaskResumeAll+0x128>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <xTaskResumeAll+0x12c>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <xTaskResumeAll+0x11c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1cb      	bne.n	8005212 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005280:	f000 fb4a 	bl	8005918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <xTaskResumeAll+0x130>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005290:	f000 f844 	bl	800531c <xTaskIncrementTick>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <xTaskResumeAll+0x12c>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f1      	bne.n	8005290 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <xTaskResumeAll+0x130>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <xTaskResumeAll+0x12c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <xTaskResumeAll+0x134>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ce:	f001 f849 	bl	8006364 <vPortExitCritical>

	return xAlreadyYielded;
 80052d2:	68bb      	ldr	r3, [r7, #8]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000c50 	.word	0x20000c50
 80052e0:	20000c28 	.word	0x20000c28
 80052e4:	20000be8 	.word	0x20000be8
 80052e8:	20000c30 	.word	0x20000c30
 80052ec:	20000758 	.word	0x20000758
 80052f0:	20000754 	.word	0x20000754
 80052f4:	20000c3c 	.word	0x20000c3c
 80052f8:	20000c38 	.word	0x20000c38
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005306:	4b04      	ldr	r3, [pc, #16]	; (8005318 <xTaskGetTickCount+0x18>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800530c:	687b      	ldr	r3, [r7, #4]
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr
 8005318:	20000c2c 	.word	0x20000c2c

0800531c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005326:	4b51      	ldr	r3, [pc, #324]	; (800546c <xTaskIncrementTick+0x150>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 808d 	bne.w	800544a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005330:	4b4f      	ldr	r3, [pc, #316]	; (8005470 <xTaskIncrementTick+0x154>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005338:	4a4d      	ldr	r2, [pc, #308]	; (8005470 <xTaskIncrementTick+0x154>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11f      	bne.n	8005384 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005344:	4b4b      	ldr	r3, [pc, #300]	; (8005474 <xTaskIncrementTick+0x158>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <xTaskIncrementTick+0x46>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	e7fe      	b.n	8005360 <xTaskIncrementTick+0x44>
 8005362:	4b44      	ldr	r3, [pc, #272]	; (8005474 <xTaskIncrementTick+0x158>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	4b43      	ldr	r3, [pc, #268]	; (8005478 <xTaskIncrementTick+0x15c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a41      	ldr	r2, [pc, #260]	; (8005474 <xTaskIncrementTick+0x158>)
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4a41      	ldr	r2, [pc, #260]	; (8005478 <xTaskIncrementTick+0x15c>)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	4b41      	ldr	r3, [pc, #260]	; (800547c <xTaskIncrementTick+0x160>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3301      	adds	r3, #1
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <xTaskIncrementTick+0x160>)
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	f000 faca 	bl	8005918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005384:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <xTaskIncrementTick+0x164>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	429a      	cmp	r2, r3
 800538c:	d34e      	bcc.n	800542c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800538e:	4b39      	ldr	r3, [pc, #228]	; (8005474 <xTaskIncrementTick+0x158>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <xTaskIncrementTick+0x80>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <xTaskIncrementTick+0x82>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <xTaskIncrementTick+0x164>)
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053a8:	601a      	str	r2, [r3, #0]
					break;
 80053aa:	e03f      	b.n	800542c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053ac:	4b31      	ldr	r3, [pc, #196]	; (8005474 <xTaskIncrementTick+0x158>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d203      	bcs.n	80053cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053c4:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <xTaskIncrementTick+0x164>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6013      	str	r3, [r2, #0]
						break;
 80053ca:	e02f      	b.n	800542c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe ff07 	bl	80041e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	3318      	adds	r3, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fefe 	bl	80041e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4b25      	ldr	r3, [pc, #148]	; (8005484 <xTaskIncrementTick+0x168>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <xTaskIncrementTick+0xe0>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <xTaskIncrementTick+0x168>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <xTaskIncrementTick+0x16c>)
 800540a:	441a      	add	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fe fe8b 	bl	800412e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <xTaskIncrementTick+0x170>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d3b3      	bcc.n	800538e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005426:	2301      	movs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542a:	e7b0      	b.n	800538e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <xTaskIncrementTick+0x170>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	4915      	ldr	r1, [pc, #84]	; (8005488 <xTaskIncrementTick+0x16c>)
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d907      	bls.n	8005454 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e004      	b.n	8005454 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800544a:	4b11      	ldr	r3, [pc, #68]	; (8005490 <xTaskIncrementTick+0x174>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3301      	adds	r3, #1
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <xTaskIncrementTick+0x174>)
 8005452:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <xTaskIncrementTick+0x178>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005460:	697b      	ldr	r3, [r7, #20]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000c50 	.word	0x20000c50
 8005470:	20000c2c 	.word	0x20000c2c
 8005474:	20000be0 	.word	0x20000be0
 8005478:	20000be4 	.word	0x20000be4
 800547c:	20000c40 	.word	0x20000c40
 8005480:	20000c48 	.word	0x20000c48
 8005484:	20000c30 	.word	0x20000c30
 8005488:	20000758 	.word	0x20000758
 800548c:	20000754 	.word	0x20000754
 8005490:	20000c38 	.word	0x20000c38
 8005494:	20000c3c 	.word	0x20000c3c

08005498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800549e:	4b27      	ldr	r3, [pc, #156]	; (800553c <vTaskSwitchContext+0xa4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <vTaskSwitchContext+0xa8>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ac:	e040      	b.n	8005530 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <vTaskSwitchContext+0xa8>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054b4:	4b23      	ldr	r3, [pc, #140]	; (8005544 <vTaskSwitchContext+0xac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e00f      	b.n	80054dc <vTaskSwitchContext+0x44>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <vTaskSwitchContext+0x3e>
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	e7fe      	b.n	80054d4 <vTaskSwitchContext+0x3c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b01      	subs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	491a      	ldr	r1, [pc, #104]	; (8005548 <vTaskSwitchContext+0xb0>)
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0e5      	beq.n	80054bc <vTaskSwitchContext+0x24>
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4a13      	ldr	r2, [pc, #76]	; (8005548 <vTaskSwitchContext+0xb0>)
 80054fc:	4413      	add	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3308      	adds	r3, #8
 8005512:	429a      	cmp	r2, r3
 8005514:	d104      	bne.n	8005520 <vTaskSwitchContext+0x88>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <vTaskSwitchContext+0xb4>)
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <vTaskSwitchContext+0xac>)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000c50 	.word	0x20000c50
 8005540:	20000c3c 	.word	0x20000c3c
 8005544:	20000c30 	.word	0x20000c30
 8005548:	20000758 	.word	0x20000758
 800554c:	20000754 	.word	0x20000754

08005550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <vTaskPlaceOnEventList+0x24>
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e7fe      	b.n	8005572 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005574:	4b07      	ldr	r3, [pc, #28]	; (8005594 <vTaskPlaceOnEventList+0x44>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3318      	adds	r3, #24
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fe fdf9 	bl	8004174 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005582:	2101      	movs	r1, #1
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f000 fa75 	bl	8005a74 <prvAddCurrentTaskToDelayedList>
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000754 	.word	0x20000754

08005598 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <vTaskPlaceOnEventListRestricted+0x26>
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e7fe      	b.n	80055bc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3318      	adds	r3, #24
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7fe fdb1 	bl	800412e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	68b8      	ldr	r0, [r7, #8]
 80055dc:	f000 fa4a 	bl	8005a74 <prvAddCurrentTaskToDelayedList>
	}
 80055e0:	bf00      	nop
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000754 	.word	0x20000754

080055ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <xTaskRemoveFromEventList+0x2a>
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e7fe      	b.n	8005614 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3318      	adds	r3, #24
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fde2 	bl	80041e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <xTaskRemoveFromEventList+0xac>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11d      	bne.n	8005664 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3304      	adds	r3, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fdd9 	bl	80041e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	4b19      	ldr	r3, [pc, #100]	; (800569c <xTaskRemoveFromEventList+0xb0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <xTaskRemoveFromEventList+0x5a>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	4a16      	ldr	r2, [pc, #88]	; (800569c <xTaskRemoveFromEventList+0xb0>)
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <xTaskRemoveFromEventList+0xb4>)
 8005654:	441a      	add	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3304      	adds	r3, #4
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7fe fd66 	bl	800412e <vListInsertEnd>
 8005662:	e005      	b.n	8005670 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3318      	adds	r3, #24
 8005668:	4619      	mov	r1, r3
 800566a:	480e      	ldr	r0, [pc, #56]	; (80056a4 <xTaskRemoveFromEventList+0xb8>)
 800566c:	f7fe fd5f 	bl	800412e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <xTaskRemoveFromEventList+0xbc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	429a      	cmp	r2, r3
 800567c:	d905      	bls.n	800568a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <xTaskRemoveFromEventList+0xc0>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e001      	b.n	800568e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800568e:	697b      	ldr	r3, [r7, #20]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000c50 	.word	0x20000c50
 800569c:	20000c30 	.word	0x20000c30
 80056a0:	20000758 	.word	0x20000758
 80056a4:	20000be8 	.word	0x20000be8
 80056a8:	20000754 	.word	0x20000754
 80056ac:	20000c3c 	.word	0x20000c3c

080056b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vTaskInternalSetTimeOutState+0x24>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <vTaskInternalSetTimeOutState+0x28>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000c40 	.word	0x20000c40
 80056d8:	20000c2c 	.word	0x20000c2c

080056dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <xTaskCheckForTimeOut+0x24>
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	e7fe      	b.n	80056fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <xTaskCheckForTimeOut+0x3e>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e7fe      	b.n	8005718 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800571a:	f000 fdf5 	bl	8006308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800571e:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <xTaskCheckForTimeOut+0xb8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005736:	d102      	bne.n	800573e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	e023      	b.n	8005786 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <xTaskCheckForTimeOut+0xbc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d007      	beq.n	800575a <xTaskCheckForTimeOut+0x7e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	e015      	b.n	8005786 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	429a      	cmp	r2, r3
 8005762:	d20b      	bcs.n	800577c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	1ad2      	subs	r2, r2, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff9d 	bl	80056b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	e004      	b.n	8005786 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005782:	2301      	movs	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005786:	f000 fded 	bl	8006364 <vPortExitCritical>

	return xReturn;
 800578a:	69fb      	ldr	r3, [r7, #28]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000c2c 	.word	0x20000c2c
 8005798:	20000c40 	.word	0x20000c40

0800579c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <vTaskMissedYield+0x14>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000c3c 	.word	0x20000c3c

080057b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057bc:	f000 f852 	bl	8005864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <prvIdleTask+0x28>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d9f9      	bls.n	80057bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <prvIdleTask+0x2c>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057d8:	e7f0      	b.n	80057bc <prvIdleTask+0x8>
 80057da:	bf00      	nop
 80057dc:	20000758 	.word	0x20000758
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	e00c      	b.n	800580a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4a12      	ldr	r2, [pc, #72]	; (8005844 <prvInitialiseTaskLists+0x60>)
 80057fc:	4413      	add	r3, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fc6a 	bl	80040d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3301      	adds	r3, #1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b37      	cmp	r3, #55	; 0x37
 800580e:	d9ef      	bls.n	80057f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005810:	480d      	ldr	r0, [pc, #52]	; (8005848 <prvInitialiseTaskLists+0x64>)
 8005812:	f7fe fc61 	bl	80040d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005816:	480d      	ldr	r0, [pc, #52]	; (800584c <prvInitialiseTaskLists+0x68>)
 8005818:	f7fe fc5e 	bl	80040d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800581c:	480c      	ldr	r0, [pc, #48]	; (8005850 <prvInitialiseTaskLists+0x6c>)
 800581e:	f7fe fc5b 	bl	80040d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005822:	480c      	ldr	r0, [pc, #48]	; (8005854 <prvInitialiseTaskLists+0x70>)
 8005824:	f7fe fc58 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005828:	480b      	ldr	r0, [pc, #44]	; (8005858 <prvInitialiseTaskLists+0x74>)
 800582a:	f7fe fc55 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <prvInitialiseTaskLists+0x78>)
 8005830:	4a05      	ldr	r2, [pc, #20]	; (8005848 <prvInitialiseTaskLists+0x64>)
 8005832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <prvInitialiseTaskLists+0x7c>)
 8005836:	4a05      	ldr	r2, [pc, #20]	; (800584c <prvInitialiseTaskLists+0x68>)
 8005838:	601a      	str	r2, [r3, #0]
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000758 	.word	0x20000758
 8005848:	20000bb8 	.word	0x20000bb8
 800584c:	20000bcc 	.word	0x20000bcc
 8005850:	20000be8 	.word	0x20000be8
 8005854:	20000bfc 	.word	0x20000bfc
 8005858:	20000c14 	.word	0x20000c14
 800585c:	20000be0 	.word	0x20000be0
 8005860:	20000be4 	.word	0x20000be4

08005864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800586a:	e019      	b.n	80058a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800586c:	f000 fd4c 	bl	8006308 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <prvCheckTasksWaitingTermination+0x4c>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fcb1 	bl	80041e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <prvCheckTasksWaitingTermination+0x50>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3b01      	subs	r3, #1
 8005888:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <prvCheckTasksWaitingTermination+0x50>)
 800588a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <prvCheckTasksWaitingTermination+0x54>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3b01      	subs	r3, #1
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <prvCheckTasksWaitingTermination+0x54>)
 8005894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005896:	f000 fd65 	bl	8006364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f80e 	bl	80058bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <prvCheckTasksWaitingTermination+0x54>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e1      	bne.n	800586c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000bfc 	.word	0x20000bfc
 80058b4:	20000c28 	.word	0x20000c28
 80058b8:	20000c10 	.word	0x20000c10

080058bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d108      	bne.n	80058e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fed0 	bl	8006678 <vPortFree>
				vPortFree( pxTCB );
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fecd 	bl	8006678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058de:	e017      	b.n	8005910 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d103      	bne.n	80058f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fec4 	bl	8006678 <vPortFree>
	}
 80058f0:	e00e      	b.n	8005910 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d009      	beq.n	8005910 <prvDeleteTCB+0x54>
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e7fe      	b.n	800590e <prvDeleteTCB+0x52>
	}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800591e:	4b0e      	ldr	r3, [pc, #56]	; (8005958 <prvResetNextTaskUnblockTime+0x40>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <prvResetNextTaskUnblockTime+0x14>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <prvResetNextTaskUnblockTime+0x16>
 800592c:	2300      	movs	r3, #0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <prvResetNextTaskUnblockTime+0x44>)
 8005934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005938:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800593a:	e008      	b.n	800594e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <prvResetNextTaskUnblockTime+0x40>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4a04      	ldr	r2, [pc, #16]	; (800595c <prvResetNextTaskUnblockTime+0x44>)
 800594c:	6013      	str	r3, [r2, #0]
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr
 8005958:	20000be0 	.word	0x20000be0
 800595c:	20000c48 	.word	0x20000c48

08005960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <xTaskGetSchedulerState+0x34>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800596e:	2301      	movs	r3, #1
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	e008      	b.n	8005986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005974:	4b08      	ldr	r3, [pc, #32]	; (8005998 <xTaskGetSchedulerState+0x38>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800597c:	2302      	movs	r3, #2
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	e001      	b.n	8005986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005986:	687b      	ldr	r3, [r7, #4]
	}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000c34 	.word	0x20000c34
 8005998:	20000c50 	.word	0x20000c50

0800599c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d054      	beq.n	8005a5c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059b2:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <xTaskPriorityDisinherit+0xcc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d009      	beq.n	80059d0 <xTaskPriorityDisinherit+0x34>
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e7fe      	b.n	80059ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xTaskPriorityDisinherit+0x50>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	e7fe      	b.n	80059ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d02c      	beq.n	8005a5c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d128      	bne.n	8005a5c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fbe8 	bl	80041e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <xTaskPriorityDisinherit+0xd0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d903      	bls.n	8005a3c <xTaskPriorityDisinherit+0xa0>
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	4a0c      	ldr	r2, [pc, #48]	; (8005a6c <xTaskPriorityDisinherit+0xd0>)
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <xTaskPriorityDisinherit+0xd4>)
 8005a4a:	441a      	add	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7fe fb6b 	bl	800412e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a5c:	697b      	ldr	r3, [r7, #20]
	}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000754 	.word	0x20000754
 8005a6c:	20000c30 	.word	0x20000c30
 8005a70:	20000758 	.word	0x20000758

08005a74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a84:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fbaa 	bl	80041e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a96:	d10a      	bne.n	8005aae <prvAddCurrentTaskToDelayedList+0x3a>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4819      	ldr	r0, [pc, #100]	; (8005b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8005aa8:	f7fe fb41 	bl	800412e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005aac:	e026      	b.n	8005afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d209      	bcs.n	8005ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fe fb4e 	bl	8004174 <vListInsert>
}
 8005ad8:	e010      	b.n	8005afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ada:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f7fe fb44 	bl	8004174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d202      	bcs.n	8005afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005af6:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000c2c 	.word	0x20000c2c
 8005b08:	20000754 	.word	0x20000754
 8005b0c:	20000c14 	.word	0x20000c14
 8005b10:	20000be4 	.word	0x20000be4
 8005b14:	20000be0 	.word	0x20000be0
 8005b18:	20000c48 	.word	0x20000c48

08005b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b26:	f000 fac3 	bl	80060b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b2a:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <xTimerCreateTimerTask+0x80>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d021      	beq.n	8005b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b3a:	1d3a      	adds	r2, r7, #4
 8005b3c:	f107 0108 	add.w	r1, r7, #8
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe faad 	bl	80040a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	9202      	str	r2, [sp, #8]
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	2302      	movs	r3, #2
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	4910      	ldr	r1, [pc, #64]	; (8005ba0 <xTimerCreateTimerTask+0x84>)
 8005b5e:	4811      	ldr	r0, [pc, #68]	; (8005ba4 <xTimerCreateTimerTask+0x88>)
 8005b60:	f7ff f8f8 	bl	8004d54 <xTaskCreateStatic>
 8005b64:	4602      	mov	r2, r0
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <xTimerCreateTimerTask+0x8c>)
 8005b68:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <xTimerCreateTimerTask+0x8c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b72:	2301      	movs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xTimerCreateTimerTask+0x74>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e7fe      	b.n	8005b8e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005b90:	697b      	ldr	r3, [r7, #20]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000c84 	.word	0x20000c84
 8005ba0:	08007218 	.word	0x08007218
 8005ba4:	08005cc5 	.word	0x08005cc5
 8005ba8:	20000c88 	.word	0x20000c88

08005bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xTimerGenericCommand+0x2c>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	e7fe      	b.n	8005bd6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <xTimerGenericCommand+0x94>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02a      	beq.n	8005c36 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	dc18      	bgt.n	8005c24 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bf2:	f7ff feb5 	bl	8005960 <xTaskGetSchedulerState>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d109      	bne.n	8005c10 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <xTimerGenericCommand+0x94>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	f107 0110 	add.w	r1, r7, #16
 8005c04:	2300      	movs	r3, #0
 8005c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c08:	f7fe fc50 	bl	80044ac <xQueueGenericSend>
 8005c0c:	6278      	str	r0, [r7, #36]	; 0x24
 8005c0e:	e012      	b.n	8005c36 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <xTimerGenericCommand+0x94>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	f107 0110 	add.w	r1, r7, #16
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f7fe fc46 	bl	80044ac <xQueueGenericSend>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24
 8005c22:	e008      	b.n	8005c36 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <xTimerGenericCommand+0x94>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	f107 0110 	add.w	r1, r7, #16
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	f7fe fd36 	bl	80046a0 <xQueueGenericSendFromISR>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3728      	adds	r7, #40	; 0x28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000c84 	.word	0x20000c84

08005c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <prvProcessExpiredTimer+0x7c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fac1 	bl	80041e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d121      	bne.n	8005cae <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	18d1      	adds	r1, r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f000 f8c8 	bl	8005e0c <prvInsertTimerInActiveList>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d015      	beq.n	8005cae <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c82:	2300      	movs	r3, #0
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6978      	ldr	r0, [r7, #20]
 8005c8e:	f7ff ff8d 	bl	8005bac <xTimerGenericCommand>
 8005c92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <prvProcessExpiredTimer+0x6a>
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e7fe      	b.n	8005cac <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	6978      	ldr	r0, [r7, #20]
 8005cb4:	4798      	blx	r3
}
 8005cb6:	bf00      	nop
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000c7c 	.word	0x20000c7c

08005cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ccc:	f107 0308 	add.w	r3, r7, #8
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f857 	bl	8005d84 <prvGetNextExpireTime>
 8005cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f803 	bl	8005ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ce2:	f000 f8d5 	bl	8005e90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ce6:	e7f1      	b.n	8005ccc <prvTimerTask+0x8>

08005ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cf2:	f7ff fa5b 	bl	80051ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f866 	bl	8005dcc <prvSampleTimeNow>
 8005d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d130      	bne.n	8005d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <prvProcessTimerOrBlockTask+0x3c>
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d806      	bhi.n	8005d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d16:	f7ff fa57 	bl	80051c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff91 	bl	8005c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d22:	e024      	b.n	8005d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <prvProcessTimerOrBlockTask+0x90>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <prvProcessTimerOrBlockTask+0x94>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f7fe ffcf 	bl	8004cec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d4e:	f7ff fa3b 	bl	80051c8 <xTaskResumeAll>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <prvProcessTimerOrBlockTask+0x98>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
}
 8005d68:	e001      	b.n	8005d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d6a:	f7ff fa2d 	bl	80051c8 <xTaskResumeAll>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000c80 	.word	0x20000c80
 8005d7c:	20000c84 	.word	0x20000c84
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <prvGetNextExpireTime+0x44>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <prvGetNextExpireTime+0x44>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e001      	b.n	8005dba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000c7c 	.word	0x20000c7c

08005dcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005dd4:	f7ff fa94 	bl	8005300 <xTaskGetTickCount>
 8005dd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <prvSampleTimeNow+0x3c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d205      	bcs.n	8005df0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005de4:	f000 f904 	bl	8005ff0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e002      	b.n	8005df6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005df6:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <prvSampleTimeNow+0x3c>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000c8c 	.word	0x20000c8c

08005e0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d812      	bhi.n	8005e58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	e01b      	b.n	8005e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <prvInsertTimerInActiveList+0x7c>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f7fe f98f 	bl	8004174 <vListInsert>
 8005e56:	e012      	b.n	8005e7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d206      	bcs.n	8005e6e <prvInsertTimerInActiveList+0x62>
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d302      	bcc.n	8005e6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e007      	b.n	8005e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <prvInsertTimerInActiveList+0x80>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f7fe f97b 	bl	8004174 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000c80 	.word	0x20000c80
 8005e8c:	20000c7c 	.word	0x20000c7c

08005e90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	; 0x38
 8005e94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e96:	e099      	b.n	8005fcc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da17      	bge.n	8005ece <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <prvProcessReceivedCommands+0x2e>
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e7fe      	b.n	8005ebc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec4:	6850      	ldr	r0, [r2, #4]
 8005ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec8:	6892      	ldr	r2, [r2, #8]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	db7a      	blt.n	8005fca <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f97d 	bl	80041e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eea:	463b      	mov	r3, r7
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ff6d 	bl	8005dcc <prvSampleTimeNow>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b09      	cmp	r3, #9
 8005ef8:	d868      	bhi.n	8005fcc <prvProcessReceivedCommands+0x13c>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <prvProcessReceivedCommands+0x70>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f29 	.word	0x08005f29
 8005f0c:	08005fcd 	.word	0x08005fcd
 8005f10:	08005f83 	.word	0x08005f83
 8005f14:	08005fb9 	.word	0x08005fb9
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f29 	.word	0x08005f29
 8005f20:	08005fcd 	.word	0x08005fcd
 8005f24:	08005f83 	.word	0x08005f83
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	18d1      	adds	r1, r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f36:	f7ff ff69 	bl	8005e0c <prvInsertTimerInActiveList>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d045      	beq.n	8005fcc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d13d      	bne.n	8005fcc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	441a      	add	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f62:	f7ff fe23 	bl	8005bac <xTimerGenericCommand>
 8005f66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d12e      	bne.n	8005fcc <prvProcessReceivedCommands+0x13c>
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	e7fe      	b.n	8005f80 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <prvProcessReceivedCommands+0x114>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e7fe      	b.n	8005fa2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	18d1      	adds	r1, r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb2:	f7ff ff2b 	bl	8005e0c <prvInsertTimerInActiveList>
					break;
 8005fb6:	e009      	b.n	8005fcc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc4:	f000 fb58 	bl	8006678 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005fc8:	e000      	b.n	8005fcc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005fca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <prvProcessReceivedCommands+0x15c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	1d39      	adds	r1, r7, #4
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fbf7 	bl	80047c8 <xQueueReceive>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f47f af5b 	bne.w	8005e98 <prvProcessReceivedCommands+0x8>
	}
}
 8005fe2:	bf00      	nop
 8005fe4:	3730      	adds	r7, #48	; 0x30
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000c84 	.word	0x20000c84

08005ff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ff6:	e044      	b.n	8006082 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ff8:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <prvSwitchTimerLists+0xb8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006002:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <prvSwitchTimerLists+0xb8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3304      	adds	r3, #4
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe f8e7 	bl	80041e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d12d      	bne.n	8006082 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	429a      	cmp	r2, r3
 8006036:	d90e      	bls.n	8006056 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006044:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <prvSwitchTimerLists+0xb8>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7fe f890 	bl	8004174 <vListInsert>
 8006054:	e015      	b.n	8006082 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006056:	2300      	movs	r3, #0
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	2100      	movs	r1, #0
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fda3 	bl	8005bac <xTimerGenericCommand>
 8006066:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <prvSwitchTimerLists+0x92>
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	e7fe      	b.n	8006080 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <prvSwitchTimerLists+0xb8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1b5      	bne.n	8005ff8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <prvSwitchTimerLists+0xb8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <prvSwitchTimerLists+0xbc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <prvSwitchTimerLists+0xb8>)
 8006098:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800609a:	4a04      	ldr	r2, [pc, #16]	; (80060ac <prvSwitchTimerLists+0xbc>)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	6013      	str	r3, [r2, #0]
}
 80060a0:	bf00      	nop
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20000c7c 	.word	0x20000c7c
 80060ac:	20000c80 	.word	0x20000c80

080060b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060b6:	f000 f927 	bl	8006308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060ba:	4b15      	ldr	r3, [pc, #84]	; (8006110 <prvCheckForValidListAndQueue+0x60>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d120      	bne.n	8006104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060c2:	4814      	ldr	r0, [pc, #80]	; (8006114 <prvCheckForValidListAndQueue+0x64>)
 80060c4:	f7fe f808 	bl	80040d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060c8:	4813      	ldr	r0, [pc, #76]	; (8006118 <prvCheckForValidListAndQueue+0x68>)
 80060ca:	f7fe f805 	bl	80040d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <prvCheckForValidListAndQueue+0x6c>)
 80060d0:	4a10      	ldr	r2, [pc, #64]	; (8006114 <prvCheckForValidListAndQueue+0x64>)
 80060d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060d4:	4b12      	ldr	r3, [pc, #72]	; (8006120 <prvCheckForValidListAndQueue+0x70>)
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <prvCheckForValidListAndQueue+0x68>)
 80060d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060da:	2300      	movs	r3, #0
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	4b11      	ldr	r3, [pc, #68]	; (8006124 <prvCheckForValidListAndQueue+0x74>)
 80060e0:	4a11      	ldr	r2, [pc, #68]	; (8006128 <prvCheckForValidListAndQueue+0x78>)
 80060e2:	2110      	movs	r1, #16
 80060e4:	200a      	movs	r0, #10
 80060e6:	f7fe f90f 	bl	8004308 <xQueueGenericCreateStatic>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <prvCheckForValidListAndQueue+0x60>)
 80060ee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <prvCheckForValidListAndQueue+0x60>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <prvCheckForValidListAndQueue+0x60>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	490b      	ldr	r1, [pc, #44]	; (800612c <prvCheckForValidListAndQueue+0x7c>)
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fdcc 	bl	8004c9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006104:	f000 f92e 	bl	8006364 <vPortExitCritical>
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000c84 	.word	0x20000c84
 8006114:	20000c54 	.word	0x20000c54
 8006118:	20000c68 	.word	0x20000c68
 800611c:	20000c7c 	.word	0x20000c7c
 8006120:	20000c80 	.word	0x20000c80
 8006124:	20000d30 	.word	0x20000d30
 8006128:	20000c90 	.word	0x20000c90
 800612c:	08007220 	.word	0x08007220

08006130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3b04      	subs	r3, #4
 8006140:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b04      	subs	r3, #4
 800614e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b04      	subs	r3, #4
 800615e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <pxPortInitialiseStack+0x54>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b14      	subs	r3, #20
 800616a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3b20      	subs	r3, #32
 8006176:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	08006189 	.word	0x08006189

08006188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800618e:	2300      	movs	r3, #0
 8006190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <prvTaskExitError+0x4c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619a:	d009      	beq.n	80061b0 <prvTaskExitError+0x28>
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e7fe      	b.n	80061ae <prvTaskExitError+0x26>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061c2:	bf00      	nop
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0fc      	beq.n	80061c4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr
 80061d4:	20000010 	.word	0x20000010
	...

080061e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <pxCurrentTCBConst2>)
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ea:	f380 8809 	msr	PSP, r0
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80061fe:	4770      	bx	lr

08006200 <pxCurrentTCBConst2>:
 8006200:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006208:	4806      	ldr	r0, [pc, #24]	; (8006224 <prvPortStartFirstTask+0x1c>)
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f380 8808 	msr	MSP, r0
 8006212:	b662      	cpsie	i
 8006214:	b661      	cpsie	f
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	df00      	svc	0
 8006220:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006222:	bf00      	nop
 8006224:	e000ed08 	.word	0xe000ed08

08006228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800622e:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <xPortStartScheduler+0xcc>)
 8006230:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	22ff      	movs	r2, #255	; 0xff
 800623e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4b29      	ldr	r3, [pc, #164]	; (80062f8 <xPortStartScheduler+0xd0>)
 8006254:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006256:	4b29      	ldr	r3, [pc, #164]	; (80062fc <xPortStartScheduler+0xd4>)
 8006258:	2207      	movs	r2, #7
 800625a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800625c:	e009      	b.n	8006272 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800625e:	4b27      	ldr	r3, [pc, #156]	; (80062fc <xPortStartScheduler+0xd4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3b01      	subs	r3, #1
 8006264:	4a25      	ldr	r2, [pc, #148]	; (80062fc <xPortStartScheduler+0xd4>)
 8006266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d0ef      	beq.n	800625e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800627e:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <xPortStartScheduler+0xd4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1c3 0307 	rsb	r3, r3, #7
 8006286:	2b04      	cmp	r3, #4
 8006288:	d009      	beq.n	800629e <xPortStartScheduler+0x76>
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	e7fe      	b.n	800629c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800629e:	4b17      	ldr	r3, [pc, #92]	; (80062fc <xPortStartScheduler+0xd4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <xPortStartScheduler+0xd4>)
 80062a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062a8:	4b14      	ldr	r3, [pc, #80]	; (80062fc <xPortStartScheduler+0xd4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062b0:	4a12      	ldr	r2, [pc, #72]	; (80062fc <xPortStartScheduler+0xd4>)
 80062b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <xPortStartScheduler+0xd8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0f      	ldr	r2, [pc, #60]	; (8006300 <xPortStartScheduler+0xd8>)
 80062c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <xPortStartScheduler+0xd8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <xPortStartScheduler+0xd8>)
 80062ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062d4:	f000 f8b0 	bl	8006438 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <xPortStartScheduler+0xdc>)
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062de:	f7ff ff93 	bl	8006208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062e2:	f7ff f8d9 	bl	8005498 <vTaskSwitchContext>
	prvTaskExitError();
 80062e6:	f7ff ff4f 	bl	8006188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	e000e400 	.word	0xe000e400
 80062f8:	20000d80 	.word	0x20000d80
 80062fc:	20000d84 	.word	0x20000d84
 8006300:	e000ed20 	.word	0xe000ed20
 8006304:	20000010 	.word	0x20000010

08006308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006320:	4b0e      	ldr	r3, [pc, #56]	; (800635c <vPortEnterCritical+0x54>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	4a0d      	ldr	r2, [pc, #52]	; (800635c <vPortEnterCritical+0x54>)
 8006328:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <vPortEnterCritical+0x54>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d10e      	bne.n	8006350 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortEnterCritical+0x58>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <vPortEnterCritical+0x48>
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	e7fe      	b.n	800634e <vPortEnterCritical+0x46>
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000010 	.word	0x20000010
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <vPortExitCritical+0x48>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <vPortExitCritical+0x22>
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	e7fe      	b.n	8006384 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <vPortExitCritical+0x48>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	4a07      	ldr	r2, [pc, #28]	; (80063ac <vPortExitCritical+0x48>)
 800638e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <vPortExitCritical+0x48>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <vPortExitCritical+0x3e>
 8006398:	2300      	movs	r3, #0
 800639a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	20000010 	.word	0x20000010

080063b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063b0:	f3ef 8009 	mrs	r0, PSP
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <pxCurrentTCBConst>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063c0:	6010      	str	r0, [r2, #0]
 80063c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063ca:	f380 8811 	msr	BASEPRI, r0
 80063ce:	f7ff f863 	bl	8005498 <vTaskSwitchContext>
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8811 	msr	BASEPRI, r0
 80063da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063de:	6819      	ldr	r1, [r3, #0]
 80063e0:	6808      	ldr	r0, [r1, #0]
 80063e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063e6:	f380 8809 	msr	PSP, r0
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	4770      	bx	lr

080063f0 <pxCurrentTCBConst>:
 80063f0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop

080063f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006410:	f7fe ff84 	bl	800531c <xTaskIncrementTick>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <SysTick_Handler+0x3c>)
 800641c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	2300      	movs	r3, #0
 8006424:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <vPortSetupTimerInterrupt+0x30>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006442:	4b0a      	ldr	r3, [pc, #40]	; (800646c <vPortSetupTimerInterrupt+0x34>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <vPortSetupTimerInterrupt+0x38>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <vPortSetupTimerInterrupt+0x3c>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	099b      	lsrs	r3, r3, #6
 8006454:	4a08      	ldr	r2, [pc, #32]	; (8006478 <vPortSetupTimerInterrupt+0x40>)
 8006456:	3b01      	subs	r3, #1
 8006458:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800645a:	4b03      	ldr	r3, [pc, #12]	; (8006468 <vPortSetupTimerInterrupt+0x30>)
 800645c:	2207      	movs	r2, #7
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	e000e010 	.word	0xe000e010
 800646c:	e000e018 	.word	0xe000e018
 8006470:	20000004 	.word	0x20000004
 8006474:	10624dd3 	.word	0x10624dd3
 8006478:	e000e014 	.word	0xe000e014

0800647c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006482:	f3ef 8305 	mrs	r3, IPSR
 8006486:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b0f      	cmp	r3, #15
 800648c:	d913      	bls.n	80064b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800648e:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <vPortValidateInterruptPriority+0x68>)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006498:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <vPortValidateInterruptPriority+0x6c>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	7afa      	ldrb	r2, [r7, #11]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d209      	bcs.n	80064b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	e7fe      	b.n	80064b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <vPortValidateInterruptPriority+0x70>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064be:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <vPortValidateInterruptPriority+0x74>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d909      	bls.n	80064da <vPortValidateInterruptPriority+0x5e>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	e7fe      	b.n	80064d8 <vPortValidateInterruptPriority+0x5c>
	}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	e000e3f0 	.word	0xe000e3f0
 80064e8:	20000d80 	.word	0x20000d80
 80064ec:	e000ed0c 	.word	0xe000ed0c
 80064f0:	20000d84 	.word	0x20000d84

080064f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006500:	f7fe fe54 	bl	80051ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006504:	4b57      	ldr	r3, [pc, #348]	; (8006664 <pvPortMalloc+0x170>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800650c:	f000 f90c 	bl	8006728 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006510:	4b55      	ldr	r3, [pc, #340]	; (8006668 <pvPortMalloc+0x174>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 808c 	bne.w	8006636 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01c      	beq.n	800655e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006524:	2208      	movs	r2, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d013      	beq.n	800655e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f023 0307 	bic.w	r3, r3, #7
 800653c:	3308      	adds	r3, #8
 800653e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <pvPortMalloc+0x6a>
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e7fe      	b.n	800655c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d068      	beq.n	8006636 <pvPortMalloc+0x142>
 8006564:	4b41      	ldr	r3, [pc, #260]	; (800666c <pvPortMalloc+0x178>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d863      	bhi.n	8006636 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800656e:	4b40      	ldr	r3, [pc, #256]	; (8006670 <pvPortMalloc+0x17c>)
 8006570:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006572:	4b3f      	ldr	r3, [pc, #252]	; (8006670 <pvPortMalloc+0x17c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006578:	e004      	b.n	8006584 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d903      	bls.n	8006596 <pvPortMalloc+0xa2>
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f1      	bne.n	800657a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006596:	4b33      	ldr	r3, [pc, #204]	; (8006664 <pvPortMalloc+0x170>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659c:	429a      	cmp	r2, r3
 800659e:	d04a      	beq.n	8006636 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	4413      	add	r3, r2
 80065a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	1ad2      	subs	r2, r2, r3
 80065ba:	2308      	movs	r3, #8
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	429a      	cmp	r2, r3
 80065c0:	d91e      	bls.n	8006600 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4413      	add	r3, r2
 80065c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <pvPortMalloc+0xf4>
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	e7fe      	b.n	80065e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065fa:	69b8      	ldr	r0, [r7, #24]
 80065fc:	f000 f8f6 	bl	80067ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006600:	4b1a      	ldr	r3, [pc, #104]	; (800666c <pvPortMalloc+0x178>)
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	4a18      	ldr	r2, [pc, #96]	; (800666c <pvPortMalloc+0x178>)
 800660c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <pvPortMalloc+0x178>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b18      	ldr	r3, [pc, #96]	; (8006674 <pvPortMalloc+0x180>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d203      	bcs.n	8006622 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800661a:	4b14      	ldr	r3, [pc, #80]	; (800666c <pvPortMalloc+0x178>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a15      	ldr	r2, [pc, #84]	; (8006674 <pvPortMalloc+0x180>)
 8006620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <pvPortMalloc+0x174>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	431a      	orrs	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006636:	f7fe fdc7 	bl	80051c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <pvPortMalloc+0x164>
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e7fe      	b.n	8006656 <pvPortMalloc+0x162>
	return pvReturn;
 8006658:	69fb      	ldr	r3, [r7, #28]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3728      	adds	r7, #40	; 0x28
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20001990 	.word	0x20001990
 8006668:	2000199c 	.word	0x2000199c
 800666c:	20001994 	.word	0x20001994
 8006670:	20001988 	.word	0x20001988
 8006674:	20001998 	.word	0x20001998

08006678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d046      	beq.n	8006718 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800668a:	2308      	movs	r3, #8
 800668c:	425b      	negs	r3, r3
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	4b20      	ldr	r3, [pc, #128]	; (8006720 <vPortFree+0xa8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <vPortFree+0x42>
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e7fe      	b.n	80066b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <vPortFree+0x5e>
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	60bb      	str	r3, [r7, #8]
 80066d4:	e7fe      	b.n	80066d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <vPortFree+0xa8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d019      	beq.n	8006718 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortFree+0xa8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066fc:	f7fe fd56 	bl	80051ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <vPortFree+0xac>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4413      	add	r3, r2
 800670a:	4a06      	ldr	r2, [pc, #24]	; (8006724 <vPortFree+0xac>)
 800670c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f000 f86c 	bl	80067ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006714:	f7fe fd58 	bl	80051c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	2000199c 	.word	0x2000199c
 8006724:	20001994 	.word	0x20001994

08006728 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800672e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006732:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006734:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <prvHeapInit+0xac>)
 8006736:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <prvHeapInit+0xac>)
 8006758:	4413      	add	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006760:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <prvHeapInit+0xb0>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <prvHeapInit+0xb0>)
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006774:	2208      	movs	r2, #8
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a15      	ldr	r2, [pc, #84]	; (80067dc <prvHeapInit+0xb4>)
 8006788:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800678a:	4b14      	ldr	r3, [pc, #80]	; (80067dc <prvHeapInit+0xb4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <prvHeapInit+0xb4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <prvHeapInit+0xb4>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <prvHeapInit+0xb8>)
 80067b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <prvHeapInit+0xbc>)
 80067be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <prvHeapInit+0xc0>)
 80067c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000d88 	.word	0x20000d88
 80067d8:	20001988 	.word	0x20001988
 80067dc:	20001990 	.word	0x20001990
 80067e0:	20001998 	.word	0x20001998
 80067e4:	20001994 	.word	0x20001994
 80067e8:	2000199c 	.word	0x2000199c

080067ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <prvInsertBlockIntoFreeList+0xa8>)
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e002      	b.n	8006800 <prvInsertBlockIntoFreeList+0x14>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d8f7      	bhi.n	80067fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4413      	add	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d108      	bne.n	800682e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d118      	bne.n	8006874 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <prvInsertBlockIntoFreeList+0xac>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d00d      	beq.n	800686a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e008      	b.n	800687c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <prvInsertBlockIntoFreeList+0xac>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e003      	b.n	800687c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d002      	beq.n	800688a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr
 8006894:	20001988 	.word	0x20001988
 8006898:	20001990 	.word	0x20001990

0800689c <__errno>:
 800689c:	4b01      	ldr	r3, [pc, #4]	; (80068a4 <__errno+0x8>)
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000014 	.word	0x20000014

080068a8 <__libc_init_array>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	2500      	movs	r5, #0
 80068ac:	4e0c      	ldr	r6, [pc, #48]	; (80068e0 <__libc_init_array+0x38>)
 80068ae:	4c0d      	ldr	r4, [pc, #52]	; (80068e4 <__libc_init_array+0x3c>)
 80068b0:	1ba4      	subs	r4, r4, r6
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	42a5      	cmp	r5, r4
 80068b6:	d109      	bne.n	80068cc <__libc_init_array+0x24>
 80068b8:	f000 fc36 	bl	8007128 <_init>
 80068bc:	2500      	movs	r5, #0
 80068be:	4e0a      	ldr	r6, [pc, #40]	; (80068e8 <__libc_init_array+0x40>)
 80068c0:	4c0a      	ldr	r4, [pc, #40]	; (80068ec <__libc_init_array+0x44>)
 80068c2:	1ba4      	subs	r4, r4, r6
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	42a5      	cmp	r5, r4
 80068c8:	d105      	bne.n	80068d6 <__libc_init_array+0x2e>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068d0:	4798      	blx	r3
 80068d2:	3501      	adds	r5, #1
 80068d4:	e7ee      	b.n	80068b4 <__libc_init_array+0xc>
 80068d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068da:	4798      	blx	r3
 80068dc:	3501      	adds	r5, #1
 80068de:	e7f2      	b.n	80068c6 <__libc_init_array+0x1e>
 80068e0:	0800734c 	.word	0x0800734c
 80068e4:	0800734c 	.word	0x0800734c
 80068e8:	0800734c 	.word	0x0800734c
 80068ec:	08007350 	.word	0x08007350

080068f0 <memcpy>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	1e43      	subs	r3, r0, #1
 80068f4:	440a      	add	r2, r1
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d100      	bne.n	80068fc <memcpy+0xc>
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006904:	e7f7      	b.n	80068f6 <memcpy+0x6>

08006906 <memset>:
 8006906:	4603      	mov	r3, r0
 8006908:	4402      	add	r2, r0
 800690a:	4293      	cmp	r3, r2
 800690c:	d100      	bne.n	8006910 <memset+0xa>
 800690e:	4770      	bx	lr
 8006910:	f803 1b01 	strb.w	r1, [r3], #1
 8006914:	e7f9      	b.n	800690a <memset+0x4>
	...

08006918 <siprintf>:
 8006918:	b40e      	push	{r1, r2, r3}
 800691a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800691e:	b500      	push	{lr}
 8006920:	b09c      	sub	sp, #112	; 0x70
 8006922:	ab1d      	add	r3, sp, #116	; 0x74
 8006924:	9002      	str	r0, [sp, #8]
 8006926:	9006      	str	r0, [sp, #24]
 8006928:	9107      	str	r1, [sp, #28]
 800692a:	9104      	str	r1, [sp, #16]
 800692c:	4808      	ldr	r0, [pc, #32]	; (8006950 <siprintf+0x38>)
 800692e:	4909      	ldr	r1, [pc, #36]	; (8006954 <siprintf+0x3c>)
 8006930:	f853 2b04 	ldr.w	r2, [r3], #4
 8006934:	9105      	str	r1, [sp, #20]
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	a902      	add	r1, sp, #8
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	f000 f866 	bl	8006a0c <_svfiprintf_r>
 8006940:	2200      	movs	r2, #0
 8006942:	9b02      	ldr	r3, [sp, #8]
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	b01c      	add	sp, #112	; 0x70
 8006948:	f85d eb04 	ldr.w	lr, [sp], #4
 800694c:	b003      	add	sp, #12
 800694e:	4770      	bx	lr
 8006950:	20000014 	.word	0x20000014
 8006954:	ffff0208 	.word	0xffff0208

08006958 <__ssputs_r>:
 8006958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	688e      	ldr	r6, [r1, #8]
 800695e:	4682      	mov	sl, r0
 8006960:	429e      	cmp	r6, r3
 8006962:	460c      	mov	r4, r1
 8006964:	4690      	mov	r8, r2
 8006966:	4699      	mov	r9, r3
 8006968:	d837      	bhi.n	80069da <__ssputs_r+0x82>
 800696a:	898a      	ldrh	r2, [r1, #12]
 800696c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006970:	d031      	beq.n	80069d6 <__ssputs_r+0x7e>
 8006972:	2302      	movs	r3, #2
 8006974:	6825      	ldr	r5, [r4, #0]
 8006976:	6909      	ldr	r1, [r1, #16]
 8006978:	1a6f      	subs	r7, r5, r1
 800697a:	6965      	ldr	r5, [r4, #20]
 800697c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006980:	fb95 f5f3 	sdiv	r5, r5, r3
 8006984:	f109 0301 	add.w	r3, r9, #1
 8006988:	443b      	add	r3, r7
 800698a:	429d      	cmp	r5, r3
 800698c:	bf38      	it	cc
 800698e:	461d      	movcc	r5, r3
 8006990:	0553      	lsls	r3, r2, #21
 8006992:	d530      	bpl.n	80069f6 <__ssputs_r+0x9e>
 8006994:	4629      	mov	r1, r5
 8006996:	f000 fb2d 	bl	8006ff4 <_malloc_r>
 800699a:	4606      	mov	r6, r0
 800699c:	b950      	cbnz	r0, 80069b4 <__ssputs_r+0x5c>
 800699e:	230c      	movs	r3, #12
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a4:	f8ca 3000 	str.w	r3, [sl]
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	463a      	mov	r2, r7
 80069b6:	6921      	ldr	r1, [r4, #16]
 80069b8:	f7ff ff9a 	bl	80068f0 <memcpy>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	6126      	str	r6, [r4, #16]
 80069ca:	443e      	add	r6, r7
 80069cc:	6026      	str	r6, [r4, #0]
 80069ce:	464e      	mov	r6, r9
 80069d0:	6165      	str	r5, [r4, #20]
 80069d2:	1bed      	subs	r5, r5, r7
 80069d4:	60a5      	str	r5, [r4, #8]
 80069d6:	454e      	cmp	r6, r9
 80069d8:	d900      	bls.n	80069dc <__ssputs_r+0x84>
 80069da:	464e      	mov	r6, r9
 80069dc:	4632      	mov	r2, r6
 80069de:	4641      	mov	r1, r8
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	f000 faa1 	bl	8006f28 <memmove>
 80069e6:	68a3      	ldr	r3, [r4, #8]
 80069e8:	2000      	movs	r0, #0
 80069ea:	1b9b      	subs	r3, r3, r6
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	441e      	add	r6, r3
 80069f2:	6026      	str	r6, [r4, #0]
 80069f4:	e7dc      	b.n	80069b0 <__ssputs_r+0x58>
 80069f6:	462a      	mov	r2, r5
 80069f8:	f000 fb56 	bl	80070a8 <_realloc_r>
 80069fc:	4606      	mov	r6, r0
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d1e2      	bne.n	80069c8 <__ssputs_r+0x70>
 8006a02:	6921      	ldr	r1, [r4, #16]
 8006a04:	4650      	mov	r0, sl
 8006a06:	f000 faa9 	bl	8006f5c <_free_r>
 8006a0a:	e7c8      	b.n	800699e <__ssputs_r+0x46>

08006a0c <_svfiprintf_r>:
 8006a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	461d      	mov	r5, r3
 8006a12:	898b      	ldrh	r3, [r1, #12]
 8006a14:	b09d      	sub	sp, #116	; 0x74
 8006a16:	061f      	lsls	r7, r3, #24
 8006a18:	4680      	mov	r8, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	d50f      	bpl.n	8006a40 <_svfiprintf_r+0x34>
 8006a20:	690b      	ldr	r3, [r1, #16]
 8006a22:	b96b      	cbnz	r3, 8006a40 <_svfiprintf_r+0x34>
 8006a24:	2140      	movs	r1, #64	; 0x40
 8006a26:	f000 fae5 	bl	8006ff4 <_malloc_r>
 8006a2a:	6020      	str	r0, [r4, #0]
 8006a2c:	6120      	str	r0, [r4, #16]
 8006a2e:	b928      	cbnz	r0, 8006a3c <_svfiprintf_r+0x30>
 8006a30:	230c      	movs	r3, #12
 8006a32:	f8c8 3000 	str.w	r3, [r8]
 8006a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a3a:	e0c8      	b.n	8006bce <_svfiprintf_r+0x1c2>
 8006a3c:	2340      	movs	r3, #64	; 0x40
 8006a3e:	6163      	str	r3, [r4, #20]
 8006a40:	2300      	movs	r3, #0
 8006a42:	9309      	str	r3, [sp, #36]	; 0x24
 8006a44:	2320      	movs	r3, #32
 8006a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a4a:	2330      	movs	r3, #48	; 0x30
 8006a4c:	f04f 0b01 	mov.w	fp, #1
 8006a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a54:	9503      	str	r5, [sp, #12]
 8006a56:	4637      	mov	r7, r6
 8006a58:	463d      	mov	r5, r7
 8006a5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a5e:	b10b      	cbz	r3, 8006a64 <_svfiprintf_r+0x58>
 8006a60:	2b25      	cmp	r3, #37	; 0x25
 8006a62:	d13e      	bne.n	8006ae2 <_svfiprintf_r+0xd6>
 8006a64:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a68:	d00b      	beq.n	8006a82 <_svfiprintf_r+0x76>
 8006a6a:	4653      	mov	r3, sl
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4640      	mov	r0, r8
 8006a72:	f7ff ff71 	bl	8006958 <__ssputs_r>
 8006a76:	3001      	adds	r0, #1
 8006a78:	f000 80a4 	beq.w	8006bc4 <_svfiprintf_r+0x1b8>
 8006a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7e:	4453      	add	r3, sl
 8006a80:	9309      	str	r3, [sp, #36]	; 0x24
 8006a82:	783b      	ldrb	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 809d 	beq.w	8006bc4 <_svfiprintf_r+0x1b8>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a94:	9304      	str	r3, [sp, #16]
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a9e:	462f      	mov	r7, r5
 8006aa0:	2205      	movs	r2, #5
 8006aa2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006aa6:	4850      	ldr	r0, [pc, #320]	; (8006be8 <_svfiprintf_r+0x1dc>)
 8006aa8:	f000 fa30 	bl	8006f0c <memchr>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	b9d0      	cbnz	r0, 8006ae6 <_svfiprintf_r+0xda>
 8006ab0:	06d9      	lsls	r1, r3, #27
 8006ab2:	bf44      	itt	mi
 8006ab4:	2220      	movmi	r2, #32
 8006ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006aba:	071a      	lsls	r2, r3, #28
 8006abc:	bf44      	itt	mi
 8006abe:	222b      	movmi	r2, #43	; 0x2b
 8006ac0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ac4:	782a      	ldrb	r2, [r5, #0]
 8006ac6:	2a2a      	cmp	r2, #42	; 0x2a
 8006ac8:	d015      	beq.n	8006af6 <_svfiprintf_r+0xea>
 8006aca:	462f      	mov	r7, r5
 8006acc:	2000      	movs	r0, #0
 8006ace:	250a      	movs	r5, #10
 8006ad0:	9a07      	ldr	r2, [sp, #28]
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad8:	3b30      	subs	r3, #48	; 0x30
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d94d      	bls.n	8006b7a <_svfiprintf_r+0x16e>
 8006ade:	b1b8      	cbz	r0, 8006b10 <_svfiprintf_r+0x104>
 8006ae0:	e00f      	b.n	8006b02 <_svfiprintf_r+0xf6>
 8006ae2:	462f      	mov	r7, r5
 8006ae4:	e7b8      	b.n	8006a58 <_svfiprintf_r+0x4c>
 8006ae6:	4a40      	ldr	r2, [pc, #256]	; (8006be8 <_svfiprintf_r+0x1dc>)
 8006ae8:	463d      	mov	r5, r7
 8006aea:	1a80      	subs	r0, r0, r2
 8006aec:	fa0b f000 	lsl.w	r0, fp, r0
 8006af0:	4318      	orrs	r0, r3
 8006af2:	9004      	str	r0, [sp, #16]
 8006af4:	e7d3      	b.n	8006a9e <_svfiprintf_r+0x92>
 8006af6:	9a03      	ldr	r2, [sp, #12]
 8006af8:	1d11      	adds	r1, r2, #4
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	9103      	str	r1, [sp, #12]
 8006afe:	2a00      	cmp	r2, #0
 8006b00:	db01      	blt.n	8006b06 <_svfiprintf_r+0xfa>
 8006b02:	9207      	str	r2, [sp, #28]
 8006b04:	e004      	b.n	8006b10 <_svfiprintf_r+0x104>
 8006b06:	4252      	negs	r2, r2
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	783b      	ldrb	r3, [r7, #0]
 8006b12:	2b2e      	cmp	r3, #46	; 0x2e
 8006b14:	d10c      	bne.n	8006b30 <_svfiprintf_r+0x124>
 8006b16:	787b      	ldrb	r3, [r7, #1]
 8006b18:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1a:	d133      	bne.n	8006b84 <_svfiprintf_r+0x178>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	3702      	adds	r7, #2
 8006b20:	1d1a      	adds	r2, r3, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	9203      	str	r2, [sp, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfb8      	it	lt
 8006b2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	4d2e      	ldr	r5, [pc, #184]	; (8006bec <_svfiprintf_r+0x1e0>)
 8006b32:	2203      	movs	r2, #3
 8006b34:	7839      	ldrb	r1, [r7, #0]
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 f9e8 	bl	8006f0c <memchr>
 8006b3c:	b138      	cbz	r0, 8006b4e <_svfiprintf_r+0x142>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	1b40      	subs	r0, r0, r5
 8006b42:	fa03 f000 	lsl.w	r0, r3, r0
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	3701      	adds	r7, #1
 8006b4a:	4303      	orrs	r3, r0
 8006b4c:	9304      	str	r3, [sp, #16]
 8006b4e:	7839      	ldrb	r1, [r7, #0]
 8006b50:	2206      	movs	r2, #6
 8006b52:	4827      	ldr	r0, [pc, #156]	; (8006bf0 <_svfiprintf_r+0x1e4>)
 8006b54:	1c7e      	adds	r6, r7, #1
 8006b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b5a:	f000 f9d7 	bl	8006f0c <memchr>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d038      	beq.n	8006bd4 <_svfiprintf_r+0x1c8>
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <_svfiprintf_r+0x1e8>)
 8006b64:	bb13      	cbnz	r3, 8006bac <_svfiprintf_r+0x1a0>
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	3307      	adds	r3, #7
 8006b6a:	f023 0307 	bic.w	r3, r3, #7
 8006b6e:	3308      	adds	r3, #8
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b74:	444b      	add	r3, r9
 8006b76:	9309      	str	r3, [sp, #36]	; 0x24
 8006b78:	e76d      	b.n	8006a56 <_svfiprintf_r+0x4a>
 8006b7a:	fb05 3202 	mla	r2, r5, r2, r3
 8006b7e:	2001      	movs	r0, #1
 8006b80:	460f      	mov	r7, r1
 8006b82:	e7a6      	b.n	8006ad2 <_svfiprintf_r+0xc6>
 8006b84:	2300      	movs	r3, #0
 8006b86:	250a      	movs	r5, #10
 8006b88:	4619      	mov	r1, r3
 8006b8a:	3701      	adds	r7, #1
 8006b8c:	9305      	str	r3, [sp, #20]
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b94:	3a30      	subs	r2, #48	; 0x30
 8006b96:	2a09      	cmp	r2, #9
 8006b98:	d903      	bls.n	8006ba2 <_svfiprintf_r+0x196>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0c8      	beq.n	8006b30 <_svfiprintf_r+0x124>
 8006b9e:	9105      	str	r1, [sp, #20]
 8006ba0:	e7c6      	b.n	8006b30 <_svfiprintf_r+0x124>
 8006ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4607      	mov	r7, r0
 8006baa:	e7f0      	b.n	8006b8e <_svfiprintf_r+0x182>
 8006bac:	ab03      	add	r3, sp, #12
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <_svfiprintf_r+0x1ec>)
 8006bb4:	a904      	add	r1, sp, #16
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f3af 8000 	nop.w
 8006bbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006bc0:	4681      	mov	r9, r0
 8006bc2:	d1d6      	bne.n	8006b72 <_svfiprintf_r+0x166>
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	065b      	lsls	r3, r3, #25
 8006bc8:	f53f af35 	bmi.w	8006a36 <_svfiprintf_r+0x2a>
 8006bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bce:	b01d      	add	sp, #116	; 0x74
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	ab03      	add	r3, sp, #12
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <_svfiprintf_r+0x1ec>)
 8006bdc:	a904      	add	r1, sp, #16
 8006bde:	4640      	mov	r0, r8
 8006be0:	f000 f882 	bl	8006ce8 <_printf_i>
 8006be4:	e7ea      	b.n	8006bbc <_svfiprintf_r+0x1b0>
 8006be6:	bf00      	nop
 8006be8:	08007318 	.word	0x08007318
 8006bec:	0800731e 	.word	0x0800731e
 8006bf0:	08007322 	.word	0x08007322
 8006bf4:	00000000 	.word	0x00000000
 8006bf8:	08006959 	.word	0x08006959

08006bfc <_printf_common>:
 8006bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	4691      	mov	r9, r2
 8006c02:	461f      	mov	r7, r3
 8006c04:	688a      	ldr	r2, [r1, #8]
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	4606      	mov	r6, r0
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	bfb8      	it	lt
 8006c0e:	4613      	movlt	r3, r2
 8006c10:	f8c9 3000 	str.w	r3, [r9]
 8006c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c18:	460c      	mov	r4, r1
 8006c1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c1e:	b112      	cbz	r2, 8006c26 <_printf_common+0x2a>
 8006c20:	3301      	adds	r3, #1
 8006c22:	f8c9 3000 	str.w	r3, [r9]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	0699      	lsls	r1, r3, #26
 8006c2a:	bf42      	ittt	mi
 8006c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c30:	3302      	addmi	r3, #2
 8006c32:	f8c9 3000 	strmi.w	r3, [r9]
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	f015 0506 	ands.w	r5, r5, #6
 8006c3c:	d107      	bne.n	8006c4e <_printf_common+0x52>
 8006c3e:	f104 0a19 	add.w	sl, r4, #25
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	f8d9 2000 	ldr.w	r2, [r9]
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	42ab      	cmp	r3, r5
 8006c4c:	dc29      	bgt.n	8006ca2 <_printf_common+0xa6>
 8006c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	3300      	adds	r3, #0
 8006c56:	bf18      	it	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	0692      	lsls	r2, r2, #26
 8006c5c:	d42e      	bmi.n	8006cbc <_printf_common+0xc0>
 8006c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c62:	4639      	mov	r1, r7
 8006c64:	4630      	mov	r0, r6
 8006c66:	47c0      	blx	r8
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d021      	beq.n	8006cb0 <_printf_common+0xb4>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	68e5      	ldr	r5, [r4, #12]
 8006c70:	f003 0306 	and.w	r3, r3, #6
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	bf18      	it	ne
 8006c78:	2500      	movne	r5, #0
 8006c7a:	f8d9 2000 	ldr.w	r2, [r9]
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	bf08      	it	eq
 8006c84:	1aad      	subeq	r5, r5, r2
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	6922      	ldr	r2, [r4, #16]
 8006c8a:	bf08      	it	eq
 8006c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c90:	4293      	cmp	r3, r2
 8006c92:	bfc4      	itt	gt
 8006c94:	1a9b      	subgt	r3, r3, r2
 8006c96:	18ed      	addgt	r5, r5, r3
 8006c98:	341a      	adds	r4, #26
 8006c9a:	454d      	cmp	r5, r9
 8006c9c:	d11a      	bne.n	8006cd4 <_printf_common+0xd8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e008      	b.n	8006cb4 <_printf_common+0xb8>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4630      	mov	r0, r6
 8006caa:	47c0      	blx	r8
 8006cac:	3001      	adds	r0, #1
 8006cae:	d103      	bne.n	8006cb8 <_printf_common+0xbc>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	e7c2      	b.n	8006c42 <_printf_common+0x46>
 8006cbc:	2030      	movs	r0, #48	; 0x30
 8006cbe:	18e1      	adds	r1, r4, r3
 8006cc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cca:	4422      	add	r2, r4
 8006ccc:	3302      	adds	r3, #2
 8006cce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd2:	e7c4      	b.n	8006c5e <_printf_common+0x62>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0e6      	beq.n	8006cb0 <_printf_common+0xb4>
 8006ce2:	f109 0901 	add.w	r9, r9, #1
 8006ce6:	e7d8      	b.n	8006c9a <_printf_common+0x9e>

08006ce8 <_printf_i>:
 8006ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	7e09      	ldrb	r1, [r1, #24]
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	296e      	cmp	r1, #110	; 0x6e
 8006cf8:	4617      	mov	r7, r2
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	4698      	mov	r8, r3
 8006cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d00:	f000 80b3 	beq.w	8006e6a <_printf_i+0x182>
 8006d04:	d822      	bhi.n	8006d4c <_printf_i+0x64>
 8006d06:	2963      	cmp	r1, #99	; 0x63
 8006d08:	d036      	beq.n	8006d78 <_printf_i+0x90>
 8006d0a:	d80a      	bhi.n	8006d22 <_printf_i+0x3a>
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	f000 80b9 	beq.w	8006e84 <_printf_i+0x19c>
 8006d12:	2958      	cmp	r1, #88	; 0x58
 8006d14:	f000 8083 	beq.w	8006e1e <_printf_i+0x136>
 8006d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d20:	e032      	b.n	8006d88 <_printf_i+0xa0>
 8006d22:	2964      	cmp	r1, #100	; 0x64
 8006d24:	d001      	beq.n	8006d2a <_printf_i+0x42>
 8006d26:	2969      	cmp	r1, #105	; 0x69
 8006d28:	d1f6      	bne.n	8006d18 <_printf_i+0x30>
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	0605      	lsls	r5, r0, #24
 8006d30:	f103 0104 	add.w	r1, r3, #4
 8006d34:	d52a      	bpl.n	8006d8c <_printf_i+0xa4>
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da03      	bge.n	8006d46 <_printf_i+0x5e>
 8006d3e:	222d      	movs	r2, #45	; 0x2d
 8006d40:	425b      	negs	r3, r3
 8006d42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d46:	486f      	ldr	r0, [pc, #444]	; (8006f04 <_printf_i+0x21c>)
 8006d48:	220a      	movs	r2, #10
 8006d4a:	e039      	b.n	8006dc0 <_printf_i+0xd8>
 8006d4c:	2973      	cmp	r1, #115	; 0x73
 8006d4e:	f000 809d 	beq.w	8006e8c <_printf_i+0x1a4>
 8006d52:	d808      	bhi.n	8006d66 <_printf_i+0x7e>
 8006d54:	296f      	cmp	r1, #111	; 0x6f
 8006d56:	d020      	beq.n	8006d9a <_printf_i+0xb2>
 8006d58:	2970      	cmp	r1, #112	; 0x70
 8006d5a:	d1dd      	bne.n	8006d18 <_printf_i+0x30>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	f043 0320 	orr.w	r3, r3, #32
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	e003      	b.n	8006d6e <_printf_i+0x86>
 8006d66:	2975      	cmp	r1, #117	; 0x75
 8006d68:	d017      	beq.n	8006d9a <_printf_i+0xb2>
 8006d6a:	2978      	cmp	r1, #120	; 0x78
 8006d6c:	d1d4      	bne.n	8006d18 <_printf_i+0x30>
 8006d6e:	2378      	movs	r3, #120	; 0x78
 8006d70:	4865      	ldr	r0, [pc, #404]	; (8006f08 <_printf_i+0x220>)
 8006d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d76:	e055      	b.n	8006e24 <_printf_i+0x13c>
 8006d78:	6813      	ldr	r3, [r2, #0]
 8006d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d7e:	1d19      	adds	r1, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6011      	str	r1, [r2, #0]
 8006d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e08c      	b.n	8006ea6 <_printf_i+0x1be>
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d92:	6011      	str	r1, [r2, #0]
 8006d94:	bf18      	it	ne
 8006d96:	b21b      	sxthne	r3, r3
 8006d98:	e7cf      	b.n	8006d3a <_printf_i+0x52>
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	6825      	ldr	r5, [r4, #0]
 8006d9e:	1d18      	adds	r0, r3, #4
 8006da0:	6010      	str	r0, [r2, #0]
 8006da2:	0628      	lsls	r0, r5, #24
 8006da4:	d501      	bpl.n	8006daa <_printf_i+0xc2>
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	e002      	b.n	8006db0 <_printf_i+0xc8>
 8006daa:	0668      	lsls	r0, r5, #25
 8006dac:	d5fb      	bpl.n	8006da6 <_printf_i+0xbe>
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	296f      	cmp	r1, #111	; 0x6f
 8006db2:	bf14      	ite	ne
 8006db4:	220a      	movne	r2, #10
 8006db6:	2208      	moveq	r2, #8
 8006db8:	4852      	ldr	r0, [pc, #328]	; (8006f04 <_printf_i+0x21c>)
 8006dba:	2100      	movs	r1, #0
 8006dbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dc0:	6865      	ldr	r5, [r4, #4]
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	60a5      	str	r5, [r4, #8]
 8006dc6:	f2c0 8095 	blt.w	8006ef4 <_printf_i+0x20c>
 8006dca:	6821      	ldr	r1, [r4, #0]
 8006dcc:	f021 0104 	bic.w	r1, r1, #4
 8006dd0:	6021      	str	r1, [r4, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d13d      	bne.n	8006e52 <_printf_i+0x16a>
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	f040 808e 	bne.w	8006ef8 <_printf_i+0x210>
 8006ddc:	4665      	mov	r5, ip
 8006dde:	2a08      	cmp	r2, #8
 8006de0:	d10b      	bne.n	8006dfa <_printf_i+0x112>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	07db      	lsls	r3, r3, #31
 8006de6:	d508      	bpl.n	8006dfa <_printf_i+0x112>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bfde      	ittt	le
 8006df0:	2330      	movle	r3, #48	; 0x30
 8006df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006df6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006dfa:	ebac 0305 	sub.w	r3, ip, r5
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	f8cd 8000 	str.w	r8, [sp]
 8006e04:	463b      	mov	r3, r7
 8006e06:	aa03      	add	r2, sp, #12
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff fef6 	bl	8006bfc <_printf_common>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d14d      	bne.n	8006eb0 <_printf_i+0x1c8>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e18:	b005      	add	sp, #20
 8006e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1e:	4839      	ldr	r0, [pc, #228]	; (8006f04 <_printf_i+0x21c>)
 8006e20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	6821      	ldr	r1, [r4, #0]
 8006e28:	1d1d      	adds	r5, r3, #4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6015      	str	r5, [r2, #0]
 8006e2e:	060a      	lsls	r2, r1, #24
 8006e30:	d50b      	bpl.n	8006e4a <_printf_i+0x162>
 8006e32:	07ca      	lsls	r2, r1, #31
 8006e34:	bf44      	itt	mi
 8006e36:	f041 0120 	orrmi.w	r1, r1, #32
 8006e3a:	6021      	strmi	r1, [r4, #0]
 8006e3c:	b91b      	cbnz	r3, 8006e46 <_printf_i+0x15e>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	f022 0220 	bic.w	r2, r2, #32
 8006e44:	6022      	str	r2, [r4, #0]
 8006e46:	2210      	movs	r2, #16
 8006e48:	e7b7      	b.n	8006dba <_printf_i+0xd2>
 8006e4a:	064d      	lsls	r5, r1, #25
 8006e4c:	bf48      	it	mi
 8006e4e:	b29b      	uxthmi	r3, r3
 8006e50:	e7ef      	b.n	8006e32 <_printf_i+0x14a>
 8006e52:	4665      	mov	r5, ip
 8006e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e58:	fb02 3311 	mls	r3, r2, r1, r3
 8006e5c:	5cc3      	ldrb	r3, [r0, r3]
 8006e5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e62:	460b      	mov	r3, r1
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d1f5      	bne.n	8006e54 <_printf_i+0x16c>
 8006e68:	e7b9      	b.n	8006dde <_printf_i+0xf6>
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	1d18      	adds	r0, r3, #4
 8006e70:	6961      	ldr	r1, [r4, #20]
 8006e72:	6010      	str	r0, [r2, #0]
 8006e74:	0628      	lsls	r0, r5, #24
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	d501      	bpl.n	8006e7e <_printf_i+0x196>
 8006e7a:	6019      	str	r1, [r3, #0]
 8006e7c:	e002      	b.n	8006e84 <_printf_i+0x19c>
 8006e7e:	066a      	lsls	r2, r5, #25
 8006e80:	d5fb      	bpl.n	8006e7a <_printf_i+0x192>
 8006e82:	8019      	strh	r1, [r3, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	4665      	mov	r5, ip
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	e7b9      	b.n	8006e00 <_printf_i+0x118>
 8006e8c:	6813      	ldr	r3, [r2, #0]
 8006e8e:	1d19      	adds	r1, r3, #4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	681d      	ldr	r5, [r3, #0]
 8006e94:	6862      	ldr	r2, [r4, #4]
 8006e96:	2100      	movs	r1, #0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 f837 	bl	8006f0c <memchr>
 8006e9e:	b108      	cbz	r0, 8006ea4 <_printf_i+0x1bc>
 8006ea0:	1b40      	subs	r0, r0, r5
 8006ea2:	6060      	str	r0, [r4, #4]
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eae:	e7a7      	b.n	8006e00 <_printf_i+0x118>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d0aa      	beq.n	8006e14 <_printf_i+0x12c>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	079b      	lsls	r3, r3, #30
 8006ec2:	d413      	bmi.n	8006eec <_printf_i+0x204>
 8006ec4:	68e0      	ldr	r0, [r4, #12]
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	4298      	cmp	r0, r3
 8006eca:	bfb8      	it	lt
 8006ecc:	4618      	movlt	r0, r3
 8006ece:	e7a3      	b.n	8006e18 <_printf_i+0x130>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	464a      	mov	r2, r9
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	47c0      	blx	r8
 8006eda:	3001      	adds	r0, #1
 8006edc:	d09a      	beq.n	8006e14 <_printf_i+0x12c>
 8006ede:	3501      	adds	r5, #1
 8006ee0:	68e3      	ldr	r3, [r4, #12]
 8006ee2:	9a03      	ldr	r2, [sp, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	42ab      	cmp	r3, r5
 8006ee8:	dcf2      	bgt.n	8006ed0 <_printf_i+0x1e8>
 8006eea:	e7eb      	b.n	8006ec4 <_printf_i+0x1dc>
 8006eec:	2500      	movs	r5, #0
 8006eee:	f104 0919 	add.w	r9, r4, #25
 8006ef2:	e7f5      	b.n	8006ee0 <_printf_i+0x1f8>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1ac      	bne.n	8006e52 <_printf_i+0x16a>
 8006ef8:	7803      	ldrb	r3, [r0, #0]
 8006efa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006efe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f02:	e76c      	b.n	8006dde <_printf_i+0xf6>
 8006f04:	08007329 	.word	0x08007329
 8006f08:	0800733a 	.word	0x0800733a

08006f0c <memchr>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	b2c9      	uxtb	r1, r1
 8006f10:	4402      	add	r2, r0
 8006f12:	4290      	cmp	r0, r2
 8006f14:	4603      	mov	r3, r0
 8006f16:	d101      	bne.n	8006f1c <memchr+0x10>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e003      	b.n	8006f24 <memchr+0x18>
 8006f1c:	781c      	ldrb	r4, [r3, #0]
 8006f1e:	3001      	adds	r0, #1
 8006f20:	428c      	cmp	r4, r1
 8006f22:	d1f6      	bne.n	8006f12 <memchr+0x6>
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <memmove>:
 8006f28:	4288      	cmp	r0, r1
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	eb01 0302 	add.w	r3, r1, r2
 8006f30:	d807      	bhi.n	8006f42 <memmove+0x1a>
 8006f32:	1e42      	subs	r2, r0, #1
 8006f34:	4299      	cmp	r1, r3
 8006f36:	d00a      	beq.n	8006f4e <memmove+0x26>
 8006f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f40:	e7f8      	b.n	8006f34 <memmove+0xc>
 8006f42:	4283      	cmp	r3, r0
 8006f44:	d9f5      	bls.n	8006f32 <memmove+0xa>
 8006f46:	1881      	adds	r1, r0, r2
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	42d3      	cmn	r3, r2
 8006f4c:	d100      	bne.n	8006f50 <memmove+0x28>
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f58:	e7f7      	b.n	8006f4a <memmove+0x22>
	...

08006f5c <_free_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4605      	mov	r5, r0
 8006f60:	2900      	cmp	r1, #0
 8006f62:	d043      	beq.n	8006fec <_free_r+0x90>
 8006f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f68:	1f0c      	subs	r4, r1, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bfb8      	it	lt
 8006f6e:	18e4      	addlt	r4, r4, r3
 8006f70:	f000 f8d0 	bl	8007114 <__malloc_lock>
 8006f74:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <_free_r+0x94>)
 8006f76:	6813      	ldr	r3, [r2, #0]
 8006f78:	4610      	mov	r0, r2
 8006f7a:	b933      	cbnz	r3, 8006f8a <_free_r+0x2e>
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	6014      	str	r4, [r2, #0]
 8006f80:	4628      	mov	r0, r5
 8006f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f86:	f000 b8c6 	b.w	8007116 <__malloc_unlock>
 8006f8a:	42a3      	cmp	r3, r4
 8006f8c:	d90b      	bls.n	8006fa6 <_free_r+0x4a>
 8006f8e:	6821      	ldr	r1, [r4, #0]
 8006f90:	1862      	adds	r2, r4, r1
 8006f92:	4293      	cmp	r3, r2
 8006f94:	bf01      	itttt	eq
 8006f96:	681a      	ldreq	r2, [r3, #0]
 8006f98:	685b      	ldreq	r3, [r3, #4]
 8006f9a:	1852      	addeq	r2, r2, r1
 8006f9c:	6022      	streq	r2, [r4, #0]
 8006f9e:	6063      	str	r3, [r4, #4]
 8006fa0:	6004      	str	r4, [r0, #0]
 8006fa2:	e7ed      	b.n	8006f80 <_free_r+0x24>
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	b10a      	cbz	r2, 8006fae <_free_r+0x52>
 8006faa:	42a2      	cmp	r2, r4
 8006fac:	d9fa      	bls.n	8006fa4 <_free_r+0x48>
 8006fae:	6819      	ldr	r1, [r3, #0]
 8006fb0:	1858      	adds	r0, r3, r1
 8006fb2:	42a0      	cmp	r0, r4
 8006fb4:	d10b      	bne.n	8006fce <_free_r+0x72>
 8006fb6:	6820      	ldr	r0, [r4, #0]
 8006fb8:	4401      	add	r1, r0
 8006fba:	1858      	adds	r0, r3, r1
 8006fbc:	4282      	cmp	r2, r0
 8006fbe:	6019      	str	r1, [r3, #0]
 8006fc0:	d1de      	bne.n	8006f80 <_free_r+0x24>
 8006fc2:	6810      	ldr	r0, [r2, #0]
 8006fc4:	6852      	ldr	r2, [r2, #4]
 8006fc6:	4401      	add	r1, r0
 8006fc8:	6019      	str	r1, [r3, #0]
 8006fca:	605a      	str	r2, [r3, #4]
 8006fcc:	e7d8      	b.n	8006f80 <_free_r+0x24>
 8006fce:	d902      	bls.n	8006fd6 <_free_r+0x7a>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	e7d4      	b.n	8006f80 <_free_r+0x24>
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	1821      	adds	r1, r4, r0
 8006fda:	428a      	cmp	r2, r1
 8006fdc:	bf01      	itttt	eq
 8006fde:	6811      	ldreq	r1, [r2, #0]
 8006fe0:	6852      	ldreq	r2, [r2, #4]
 8006fe2:	1809      	addeq	r1, r1, r0
 8006fe4:	6021      	streq	r1, [r4, #0]
 8006fe6:	6062      	str	r2, [r4, #4]
 8006fe8:	605c      	str	r4, [r3, #4]
 8006fea:	e7c9      	b.n	8006f80 <_free_r+0x24>
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	200019a0 	.word	0x200019a0

08006ff4 <_malloc_r>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	1ccd      	adds	r5, r1, #3
 8006ff8:	f025 0503 	bic.w	r5, r5, #3
 8006ffc:	3508      	adds	r5, #8
 8006ffe:	2d0c      	cmp	r5, #12
 8007000:	bf38      	it	cc
 8007002:	250c      	movcc	r5, #12
 8007004:	2d00      	cmp	r5, #0
 8007006:	4606      	mov	r6, r0
 8007008:	db01      	blt.n	800700e <_malloc_r+0x1a>
 800700a:	42a9      	cmp	r1, r5
 800700c:	d903      	bls.n	8007016 <_malloc_r+0x22>
 800700e:	230c      	movs	r3, #12
 8007010:	6033      	str	r3, [r6, #0]
 8007012:	2000      	movs	r0, #0
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	f000 f87d 	bl	8007114 <__malloc_lock>
 800701a:	4a21      	ldr	r2, [pc, #132]	; (80070a0 <_malloc_r+0xac>)
 800701c:	6814      	ldr	r4, [r2, #0]
 800701e:	4621      	mov	r1, r4
 8007020:	b991      	cbnz	r1, 8007048 <_malloc_r+0x54>
 8007022:	4c20      	ldr	r4, [pc, #128]	; (80070a4 <_malloc_r+0xb0>)
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	b91b      	cbnz	r3, 8007030 <_malloc_r+0x3c>
 8007028:	4630      	mov	r0, r6
 800702a:	f000 f863 	bl	80070f4 <_sbrk_r>
 800702e:	6020      	str	r0, [r4, #0]
 8007030:	4629      	mov	r1, r5
 8007032:	4630      	mov	r0, r6
 8007034:	f000 f85e 	bl	80070f4 <_sbrk_r>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d124      	bne.n	8007086 <_malloc_r+0x92>
 800703c:	230c      	movs	r3, #12
 800703e:	4630      	mov	r0, r6
 8007040:	6033      	str	r3, [r6, #0]
 8007042:	f000 f868 	bl	8007116 <__malloc_unlock>
 8007046:	e7e4      	b.n	8007012 <_malloc_r+0x1e>
 8007048:	680b      	ldr	r3, [r1, #0]
 800704a:	1b5b      	subs	r3, r3, r5
 800704c:	d418      	bmi.n	8007080 <_malloc_r+0x8c>
 800704e:	2b0b      	cmp	r3, #11
 8007050:	d90f      	bls.n	8007072 <_malloc_r+0x7e>
 8007052:	600b      	str	r3, [r1, #0]
 8007054:	18cc      	adds	r4, r1, r3
 8007056:	50cd      	str	r5, [r1, r3]
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f85c 	bl	8007116 <__malloc_unlock>
 800705e:	f104 000b 	add.w	r0, r4, #11
 8007062:	1d23      	adds	r3, r4, #4
 8007064:	f020 0007 	bic.w	r0, r0, #7
 8007068:	1ac3      	subs	r3, r0, r3
 800706a:	d0d3      	beq.n	8007014 <_malloc_r+0x20>
 800706c:	425a      	negs	r2, r3
 800706e:	50e2      	str	r2, [r4, r3]
 8007070:	e7d0      	b.n	8007014 <_malloc_r+0x20>
 8007072:	684b      	ldr	r3, [r1, #4]
 8007074:	428c      	cmp	r4, r1
 8007076:	bf16      	itet	ne
 8007078:	6063      	strne	r3, [r4, #4]
 800707a:	6013      	streq	r3, [r2, #0]
 800707c:	460c      	movne	r4, r1
 800707e:	e7eb      	b.n	8007058 <_malloc_r+0x64>
 8007080:	460c      	mov	r4, r1
 8007082:	6849      	ldr	r1, [r1, #4]
 8007084:	e7cc      	b.n	8007020 <_malloc_r+0x2c>
 8007086:	1cc4      	adds	r4, r0, #3
 8007088:	f024 0403 	bic.w	r4, r4, #3
 800708c:	42a0      	cmp	r0, r4
 800708e:	d005      	beq.n	800709c <_malloc_r+0xa8>
 8007090:	1a21      	subs	r1, r4, r0
 8007092:	4630      	mov	r0, r6
 8007094:	f000 f82e 	bl	80070f4 <_sbrk_r>
 8007098:	3001      	adds	r0, #1
 800709a:	d0cf      	beq.n	800703c <_malloc_r+0x48>
 800709c:	6025      	str	r5, [r4, #0]
 800709e:	e7db      	b.n	8007058 <_malloc_r+0x64>
 80070a0:	200019a0 	.word	0x200019a0
 80070a4:	200019a4 	.word	0x200019a4

080070a8 <_realloc_r>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	4607      	mov	r7, r0
 80070ac:	4614      	mov	r4, r2
 80070ae:	460e      	mov	r6, r1
 80070b0:	b921      	cbnz	r1, 80070bc <_realloc_r+0x14>
 80070b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070b6:	4611      	mov	r1, r2
 80070b8:	f7ff bf9c 	b.w	8006ff4 <_malloc_r>
 80070bc:	b922      	cbnz	r2, 80070c8 <_realloc_r+0x20>
 80070be:	f7ff ff4d 	bl	8006f5c <_free_r>
 80070c2:	4625      	mov	r5, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c8:	f000 f826 	bl	8007118 <_malloc_usable_size_r>
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d20f      	bcs.n	80070f0 <_realloc_r+0x48>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4638      	mov	r0, r7
 80070d4:	f7ff ff8e 	bl	8006ff4 <_malloc_r>
 80070d8:	4605      	mov	r5, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	d0f2      	beq.n	80070c4 <_realloc_r+0x1c>
 80070de:	4631      	mov	r1, r6
 80070e0:	4622      	mov	r2, r4
 80070e2:	f7ff fc05 	bl	80068f0 <memcpy>
 80070e6:	4631      	mov	r1, r6
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7ff ff37 	bl	8006f5c <_free_r>
 80070ee:	e7e9      	b.n	80070c4 <_realloc_r+0x1c>
 80070f0:	4635      	mov	r5, r6
 80070f2:	e7e7      	b.n	80070c4 <_realloc_r+0x1c>

080070f4 <_sbrk_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	2300      	movs	r3, #0
 80070f8:	4c05      	ldr	r4, [pc, #20]	; (8007110 <_sbrk_r+0x1c>)
 80070fa:	4605      	mov	r5, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	6023      	str	r3, [r4, #0]
 8007100:	f7fa f8d4 	bl	80012ac <_sbrk>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_sbrk_r+0x1a>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	b103      	cbz	r3, 800710e <_sbrk_r+0x1a>
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20001ac0 	.word	0x20001ac0

08007114 <__malloc_lock>:
 8007114:	4770      	bx	lr

08007116 <__malloc_unlock>:
 8007116:	4770      	bx	lr

08007118 <_malloc_usable_size_r>:
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f18      	subs	r0, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbc      	itt	lt
 8007122:	580b      	ldrlt	r3, [r1, r0]
 8007124:	18c0      	addlt	r0, r0, r3
 8007126:	4770      	bx	lr

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
