
OccupancyDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006780  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a6c  08006a6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006a6c  08006a6c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a6c  08006a6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a84  20000074  08006ae8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af8  08006ae8  00021af8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fa6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035c4  00000000  00000000  0003a043  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003d608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  0003ead0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004682  00000000  00000000  0003fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cd2  00000000  00000000  00044472  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000998c5  00000000  00000000  00057144  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0a09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  000f0a84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006878 	.word	0x08006878

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006878 	.word	0x08006878

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 ffc8 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f892 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f93a 	bl	80003d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f90e 	bl	8000380 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000164:	f000 f8dc 	bl	8000320 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  lcd_IO_init();
 8000168:	f000 fcaa 	bl	8000ac0 <lcd_IO_init>

  lcd_init();
 800016c:	f000 fcec 	bl	8000b48 <lcd_init>
//  uint8_t textTX[56];
//
//  while(num < 100)
//  {
//  timStart = timer_start();
  CMD2LCD(0x01);
 8000170:	2001      	movs	r0, #1
 8000172:	f000 fcc1 	bl	8000af8 <CMD2LCD>
//  while((HAL_UART_Receive(&huart2, cliBufferRX, 1, 500) != HAL_OK) || (strcmp((char *)cliBufferRX, "x") != 0))
//  {}
//
//
//
  char2LCD("use inputs");
 8000176:	482f      	ldr	r0, [pc, #188]	; (8000234 <main+0xe4>)
 8000178:	f000 fd3e 	bl	8000bf8 <char2LCD>
  CMD2LCD(0xC0);
 800017c:	20c0      	movs	r0, #192	; 0xc0
 800017e:	f000 fcbb 	bl	8000af8 <CMD2LCD>
  char2LCD("room size: ");
 8000182:	482d      	ldr	r0, [pc, #180]	; (8000238 <main+0xe8>)
 8000184:	f000 fd38 	bl	8000bf8 <char2LCD>
  POT_Select();
 8000188:	f000 ff52 	bl	8001030 <POT_Select>
  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800018c:	e011      	b.n	80001b2 <main+0x62>
  {
	  CMD2LCD(0xCB);
 800018e:	20cb      	movs	r0, #203	; 0xcb
 8000190:	f000 fcb2 	bl	8000af8 <CMD2LCD>
	  //			else if(roomSz < 0xFFF)
	  //			{
	  //				strcpy((char *)room_str, "cl110");
	  //			}

	  strcpy((char *)room_str, roomSelect(ADC_Read()));
 8000194:	f000 ff68 	bl	8001068 <ADC_Read>
 8000198:	4603      	mov	r3, r0
 800019a:	b29b      	uxth	r3, r3
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fc67 	bl	8000a70 <roomSelect>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4619      	mov	r1, r3
 80001a6:	4825      	ldr	r0, [pc, #148]	; (800023c <main+0xec>)
 80001a8:	f005 ff76 	bl	8006098 <strcpy>
	  char2LCD((char *)room_str);
 80001ac:	4823      	ldr	r0, [pc, #140]	; (800023c <main+0xec>)
 80001ae:	f000 fd23 	bl	8000bf8 <char2LCD>
  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80001b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b6:	4822      	ldr	r0, [pc, #136]	; (8000240 <main+0xf0>)
 80001b8:	f001 fe60 	bl	8001e7c <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d1e5      	bne.n	800018e <main+0x3e>
	  //		char2LCD("2");
	  //		HAL_Delay(300);
  }
//  printString((char *)room_str);
//  printString("\r\n");
  CMD2LCD(0x01);
 80001c2:	2001      	movs	r0, #1
 80001c4:	f000 fc98 	bl	8000af8 <CMD2LCD>
//
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001c8:	f003 f848 	bl	800325c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structQueue */
  structQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &structQueue_attributes);
 80001cc:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <main+0xf4>)
 80001ce:	2106      	movs	r1, #6
 80001d0:	2001      	movs	r0, #1
 80001d2:	f003 f981 	bl	80034d8 <osMessageQueueNew>
 80001d6:	4602      	mov	r2, r0
 80001d8:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <main+0xf8>)
 80001da:	601a      	str	r2, [r3, #0]

  /* creation of rawQueue */
  rawQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &rawQueue_attributes);
 80001dc:	4a1b      	ldr	r2, [pc, #108]	; (800024c <main+0xfc>)
 80001de:	2106      	movs	r1, #6
 80001e0:	2001      	movs	r0, #1
 80001e2:	f003 f979 	bl	80034d8 <osMessageQueueNew>
 80001e6:	4602      	mov	r2, r0
 80001e8:	4b19      	ldr	r3, [pc, #100]	; (8000250 <main+0x100>)
 80001ea:	601a      	str	r2, [r3, #0]

  /* creation of roomQueue */
  roomQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &roomQueue_attributes);
 80001ec:	4a19      	ldr	r2, [pc, #100]	; (8000254 <main+0x104>)
 80001ee:	2102      	movs	r1, #2
 80001f0:	2001      	movs	r0, #1
 80001f2:	f003 f971 	bl	80034d8 <osMessageQueueNew>
 80001f6:	4602      	mov	r2, r0
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <main+0x108>)
 80001fa:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calcTask */
  calcTaskHandle = osThreadNew(StartCalcTask, NULL, &calcTask_attributes);
 80001fc:	4a17      	ldr	r2, [pc, #92]	; (800025c <main+0x10c>)
 80001fe:	2100      	movs	r1, #0
 8000200:	4817      	ldr	r0, [pc, #92]	; (8000260 <main+0x110>)
 8000202:	f003 f891 	bl	8003328 <osThreadNew>
 8000206:	4602      	mov	r2, r0
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <main+0x114>)
 800020a:	601a      	str	r2, [r3, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 800020c:	4a16      	ldr	r2, [pc, #88]	; (8000268 <main+0x118>)
 800020e:	2100      	movs	r1, #0
 8000210:	4816      	ldr	r0, [pc, #88]	; (800026c <main+0x11c>)
 8000212:	f003 f889 	bl	8003328 <osThreadNew>
 8000216:	4602      	mov	r2, r0
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <main+0x120>)
 800021a:	601a      	str	r2, [r3, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartLcdTask, NULL, &lcdTask_attributes);
 800021c:	4a15      	ldr	r2, [pc, #84]	; (8000274 <main+0x124>)
 800021e:	2100      	movs	r1, #0
 8000220:	4815      	ldr	r0, [pc, #84]	; (8000278 <main+0x128>)
 8000222:	f003 f881 	bl	8003328 <osThreadNew>
 8000226:	4602      	mov	r2, r0
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <main+0x12c>)
 800022a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800022c:	f003 f848 	bl	80032c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	e7fe      	b.n	8000230 <main+0xe0>
 8000232:	bf00      	nop
 8000234:	080068d4 	.word	0x080068d4
 8000238:	080068e0 	.word	0x080068e0
 800023c:	20001a00 	.word	0x20001a00
 8000240:	40011000 	.word	0x40011000
 8000244:	080069d8 	.word	0x080069d8
 8000248:	200019a8 	.word	0x200019a8
 800024c:	080069f0 	.word	0x080069f0
 8000250:	200019a4 	.word	0x200019a4
 8000254:	08006a08 	.word	0x08006a08
 8000258:	200019b4 	.word	0x200019b4
 800025c:	0800696c 	.word	0x0800696c
 8000260:	080004ed 	.word	0x080004ed
 8000264:	200019b0 	.word	0x200019b0
 8000268:	08006990 	.word	0x08006990
 800026c:	08000585 	.word	0x08000585
 8000270:	200019ac 	.word	0x200019ac
 8000274:	080069b4 	.word	0x080069b4
 8000278:	0800062d 	.word	0x0800062d
 800027c:	200019e8 	.word	0x200019e8

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	; 0x50
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f005 fed9 	bl	8006046 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	2302      	movs	r3, #2
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2310      	movs	r3, #16
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	2300      	movs	r3, #0
 80002be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fe09 	bl	8001edc <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002d0:	f000 fa22 	bl	8000718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f874 	bl	80023dc <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002fa:	f000 fa0d 	bl	8000718 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002fe:	2302      	movs	r3, #2
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f002 fa33 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000314:	f000 fa00 	bl	8000718 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3750      	adds	r7, #80	; 0x50
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_ADC1_Init+0x58>)
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <MX_ADC1_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_ADC1_Init+0x58>)
 8000338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800033c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_ADC1_Init+0x58>)
 8000340:	2201      	movs	r2, #1
 8000342:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_ADC1_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_ADC1_Init+0x58>)
 800034c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000350:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_ADC1_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_ADC1_Init+0x58>)
 800035a:	2201      	movs	r2, #1
 800035c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <MX_ADC1_Init+0x58>)
 8000360:	f000 ff16 	bl	8001190 <HAL_ADC_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800036a:	f000 f9d5 	bl	8000718 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200019b8 	.word	0x200019b8
 800037c:	40012400 	.word	0x40012400

08000380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_USART2_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 800038c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003b8:	f002 fd98 	bl	8002eec <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f9a9 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20001a28 	.word	0x20001a28
 80003d0:	40004400 	.word	0x40004400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b3c      	ldr	r3, [pc, #240]	; (80004dc <MX_GPIO_Init+0x108>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a3b      	ldr	r2, [pc, #236]	; (80004dc <MX_GPIO_Init+0x108>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b39      	ldr	r3, [pc, #228]	; (80004dc <MX_GPIO_Init+0x108>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b36      	ldr	r3, [pc, #216]	; (80004dc <MX_GPIO_Init+0x108>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <MX_GPIO_Init+0x108>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b33      	ldr	r3, [pc, #204]	; (80004dc <MX_GPIO_Init+0x108>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b30      	ldr	r3, [pc, #192]	; (80004dc <MX_GPIO_Init+0x108>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a2f      	ldr	r2, [pc, #188]	; (80004dc <MX_GPIO_Init+0x108>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <MX_GPIO_Init+0x108>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000430:	2200      	movs	r2, #0
 8000432:	21ff      	movs	r1, #255	; 0xff
 8000434:	482a      	ldr	r0, [pc, #168]	; (80004e0 <MX_GPIO_Init+0x10c>)
 8000436:	f001 fd38 	bl	8001eaa <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	4829      	ldr	r0, [pc, #164]	; (80004e4 <MX_GPIO_Init+0x110>)
 8000440:	f001 fd33 	bl	8001eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2123      	movs	r1, #35	; 0x23
 8000448:	4827      	ldr	r0, [pc, #156]	; (80004e8 <MX_GPIO_Init+0x114>)
 800044a:	f001 fd2e 	bl	8001eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800044e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	481f      	ldr	r0, [pc, #124]	; (80004e0 <MX_GPIO_Init+0x10c>)
 8000464:	f001 fbb0 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000468:	23ff      	movs	r3, #255	; 0xff
 800046a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2302      	movs	r3, #2
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4818      	ldr	r0, [pc, #96]	; (80004e0 <MX_GPIO_Init+0x10c>)
 8000480:	f001 fba2 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000484:	2320      	movs	r3, #32
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <MX_GPIO_Init+0x110>)
 800049c:	f001 fb94 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80004a0:	2323      	movs	r3, #35	; 0x23
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x114>)
 80004b8:	f001 fb86 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004bc:	2340      	movs	r3, #64	; 0x40
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	; (80004e8 <MX_GPIO_Init+0x114>)
 80004d0:	f001 fb7a 	bl	8001bc8 <HAL_GPIO_Init>

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40011000 	.word	0x40011000
 80004e4:	40010800 	.word	0x40010800
 80004e8:	40010c00 	.word	0x40010c00

080004ec <StartCalcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalcTask */
void StartCalcTask(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//uint16_t data = 0;
	struct DataStruct dc;
	dc.temp = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	813b      	strh	r3, [r7, #8]
	dc.CO2 = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	817b      	strh	r3, [r7, #10]
	dc.dB = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		TEMP_Select();
 8000500:	f000 fd5e 	bl	8000fc0 <TEMP_Select>
		dc.temp = TempConversion(ADC_Read());
 8000504:	f000 fdb0 	bl	8001068 <ADC_Read>
 8000508:	4603      	mov	r3, r0
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fd0a 	bl	8000f24 <TempConversion>
 8000510:	4603      	mov	r3, r0
 8000512:	813b      	strh	r3, [r7, #8]

		CO2_Select();
 8000514:	f000 fd36 	bl	8000f84 <CO2_Select>
		dc.CO2 = CO2Conversion(ADC_Read());
 8000518:	f000 fda6 	bl	8001068 <ADC_Read>
 800051c:	4603      	mov	r3, r0
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fcde 	bl	8000ee0 <CO2Conversion>
 8000524:	4603      	mov	r3, r0
 8000526:	817b      	strh	r3, [r7, #10]

		NOISE_Select();
 8000528:	f000 fd66 	bl	8000ff8 <NOISE_Select>
		dc.dB = NoiseConversion(ADC_Read());
 800052c:	f000 fd9c 	bl	8001068 <ADC_Read>
 8000530:	4603      	mov	r3, r0
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fd08 	bl	8000f48 <NoiseConversion>
 8000538:	4603      	mov	r3, r0
 800053a:	81bb      	strh	r3, [r7, #12]

//		dc.CO2 += 5;
//		dc.dB += 10;

		if(osMessageQueuePut(rawQueueHandle, &dc, 1U, 0U) != osOK)
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <StartCalcTask+0x90>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	f107 0108 	add.w	r1, r7, #8
 8000544:	2300      	movs	r3, #0
 8000546:	2201      	movs	r2, #1
 8000548:	f003 f84c 	bl	80035e4 <osMessageQueuePut>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <StartCalcTask+0x6a>
		{
			Error_Handler();
 8000552:	f000 f8e1 	bl	8000718 <Error_Handler>
		}

		//DataFormat()
		//OccupancyCalculation()

		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U) != osOK)
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <StartCalcTask+0x94>)
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	f107 0108 	add.w	r1, r7, #8
 800055e:	2300      	movs	r3, #0
 8000560:	2201      	movs	r2, #1
 8000562:	f003 f83f 	bl	80035e4 <osMessageQueuePut>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <StartCalcTask+0x84>
		{
			Error_Handler();
 800056c:	f000 f8d4 	bl	8000718 <Error_Handler>
		}

		osDelay(500);
 8000570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000574:	f002 ff82 	bl	800347c <osDelay>
		TEMP_Select();
 8000578:	e7c2      	b.n	8000500 <StartCalcTask+0x14>
 800057a:	bf00      	nop
 800057c:	200019a4 	.word	0x200019a4
 8000580:	200019a8 	.word	0x200019a8

08000584 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t data_str[40];
	struct DataStruct dc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <StartSendTask+0x94>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	f107 0108 	add.w	r1, r7, #8
 8000594:	2300      	movs	r3, #0
 8000596:	2200      	movs	r2, #0
 8000598:	f003 f898 	bl	80036cc <osMessageQueueGet>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d135      	bne.n	800060e <StartSendTask+0x8a>
		{
			sprintf((char *)data_str, "%d", dc.temp);
 80005a2:	893b      	ldrh	r3, [r7, #8]
 80005a4:	461a      	mov	r2, r3
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	491c      	ldr	r1, [pc, #112]	; (800061c <StartSendTask+0x98>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f005 fd53 	bl	8006058 <siprintf>
			printString((char *)data_str);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa20 	bl	80009fc <printString>
			printString(" ");
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <StartSendTask+0x9c>)
 80005be:	f000 fa1d 	bl	80009fc <printString>
			sprintf((char *)data_str, "%d", dc.CO2);
 80005c2:	897b      	ldrh	r3, [r7, #10]
 80005c4:	461a      	mov	r2, r3
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4914      	ldr	r1, [pc, #80]	; (800061c <StartSendTask+0x98>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 fd43 	bl	8006058 <siprintf>
			printString((char *)data_str);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa10 	bl	80009fc <printString>
			printString(" ");
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <StartSendTask+0x9c>)
 80005de:	f000 fa0d 	bl	80009fc <printString>
			sprintf((char *)data_str, "%d", dc.dB);
 80005e2:	89bb      	ldrh	r3, [r7, #12]
 80005e4:	461a      	mov	r2, r3
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	490c      	ldr	r1, [pc, #48]	; (800061c <StartSendTask+0x98>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f005 fd33 	bl	8006058 <siprintf>
			printString((char *)data_str);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fa00 	bl	80009fc <printString>
			printString(" ");
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <StartSendTask+0x9c>)
 80005fe:	f000 f9fd 	bl	80009fc <printString>
			printString((char *)room_str);
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <StartSendTask+0xa0>)
 8000604:	f000 f9fa 	bl	80009fc <printString>
			printString("\r\n");
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <StartSendTask+0xa4>)
 800060a:	f000 f9f7 	bl	80009fc <printString>
		}
		osDelay(5000);
 800060e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000612:	f002 ff33 	bl	800347c <osDelay>
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000616:	e7b9      	b.n	800058c <StartSendTask+0x8>
 8000618:	200019a8 	.word	0x200019a8
 800061c:	080068ec 	.word	0x080068ec
 8000620:	080068f0 	.word	0x080068f0
 8000624:	20001a00 	.word	0x20001a00
 8000628:	080068f4 	.word	0x080068f4

0800062c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08e      	sub	sp, #56	; 0x38
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	//uint16_t roomSz = 0;
	struct DataStruct rc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <StartLcdTask+0xac>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	f107 0108 	add.w	r1, r7, #8
 800063c:	2300      	movs	r3, #0
 800063e:	2200      	movs	r2, #0
 8000640:	f003 f844 	bl	80036cc <osMessageQueueGet>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d141      	bne.n	80006ce <StartLcdTask+0xa2>
//				CMD2LCD(0x80);
//				char2LCD("rs:");
//				char2LCD((char *)raw_str);
//			}

			CMD2LCD(0x80);
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	f000 fa54 	bl	8000af8 <CMD2LCD>
			char2LCD("rs:");
 8000650:	4822      	ldr	r0, [pc, #136]	; (80006dc <StartLcdTask+0xb0>)
 8000652:	f000 fad1 	bl	8000bf8 <char2LCD>
			char2LCD((char *)room_str);
 8000656:	4822      	ldr	r0, [pc, #136]	; (80006e0 <StartLcdTask+0xb4>)
 8000658:	f000 face 	bl	8000bf8 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.temp);
 800065c:	893b      	ldrh	r3, [r7, #8]
 800065e:	461a      	mov	r2, r3
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	491f      	ldr	r1, [pc, #124]	; (80006e4 <StartLcdTask+0xb8>)
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fcf6 	bl	8006058 <siprintf>
			CMD2LCD(0x89);
 800066c:	2089      	movs	r0, #137	; 0x89
 800066e:	f000 fa43 	bl	8000af8 <CMD2LCD>
			char2LCD("tmp:");
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <StartLcdTask+0xbc>)
 8000674:	f000 fac0 	bl	8000bf8 <char2LCD>
			char2LCD((char *)raw_str);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fabb 	bl	8000bf8 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.CO2);
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	461a      	mov	r2, r3
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4916      	ldr	r1, [pc, #88]	; (80006e4 <StartLcdTask+0xb8>)
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fce3 	bl	8006058 <siprintf>
			CMD2LCD(0xC0);
 8000692:	20c0      	movs	r0, #192	; 0xc0
 8000694:	f000 fa30 	bl	8000af8 <CMD2LCD>
			char2LCD("co2:");
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <StartLcdTask+0xc0>)
 800069a:	f000 faad 	bl	8000bf8 <char2LCD>
			char2LCD((char *)raw_str);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 faa8 	bl	8000bf8 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.dB);
 80006a8:	89bb      	ldrh	r3, [r7, #12]
 80006aa:	461a      	mov	r2, r3
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <StartLcdTask+0xb8>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fcd0 	bl	8006058 <siprintf>
			CMD2LCD(0xC9);
 80006b8:	20c9      	movs	r0, #201	; 0xc9
 80006ba:	f000 fa1d 	bl	8000af8 <CMD2LCD>
			char2LCD("nl:");
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <StartLcdTask+0xc4>)
 80006c0:	f000 fa9a 	bl	8000bf8 <char2LCD>
			char2LCD((char *)raw_str);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fa95 	bl	8000bf8 <char2LCD>

		}
		osDelay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f002 fed4 	bl	800347c <osDelay>
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 80006d4:	e7ae      	b.n	8000634 <StartLcdTask+0x8>
 80006d6:	bf00      	nop
 80006d8:	200019a4 	.word	0x200019a4
 80006dc:	080068f8 	.word	0x080068f8
 80006e0:	20001a00 	.word	0x20001a00
 80006e4:	080068ec 	.word	0x080068ec
 80006e8:	080068fc 	.word	0x080068fc
 80006ec:	08006904 	.word	0x08006904
 80006f0:	0800690c 	.word	0x0800690c

080006f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d101      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000706:	f000 fd05 	bl	8001114 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40000800 	.word	0x40000800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_MspInit+0x5c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <HAL_MspInit+0x5c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_MspInit+0x5c>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_MspInit+0x60>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_MspInit+0x60>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000
 8000784:	40010000 	.word	0x40010000

08000788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <HAL_ADC_MspInit+0x6c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d121      	bne.n	80007ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <HAL_ADC_MspInit+0x70>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <HAL_ADC_MspInit+0x70>)
 80007ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_ADC_MspInit+0x70>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_ADC_MspInit+0x70>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <HAL_ADC_MspInit+0x70>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_MspInit+0x70>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80007d8:	23d2      	movs	r3, #210	; 0xd2
 80007da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	2303      	movs	r3, #3
 80007de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <HAL_ADC_MspInit+0x74>)
 80007e8:	f001 f9ee 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40012400 	.word	0x40012400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_UART_MspInit+0x88>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d12f      	bne.n	8000880 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <HAL_UART_MspInit+0x8c>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <HAL_UART_MspInit+0x8c>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_UART_MspInit+0x8c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_UART_MspInit+0x8c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <HAL_UART_MspInit+0x8c>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_UART_MspInit+0x8c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000850:	2304      	movs	r3, #4
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <HAL_UART_MspInit+0x90>)
 8000864:	f001 f9b0 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000868:	2308      	movs	r3, #8
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_UART_MspInit+0x90>)
 800087c:	f001 f9a4 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800

08000894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	201e      	movs	r0, #30
 80008aa:	f001 f962 	bl	8001b72 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008ae:	201e      	movs	r0, #30
 80008b0:	f001 f97b 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <HAL_InitTick+0x9c>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_InitTick+0x9c>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_InitTick+0x9c>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008cc:	f107 0210 	add.w	r2, r7, #16
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fefe 	bl	80026d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008dc:	f001 fed4 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 80008e0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <HAL_InitTick+0xa0>)
 80008e6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ea:	0c9b      	lsrs	r3, r3, #18
 80008ec:	3b01      	subs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_InitTick+0xa4>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <HAL_InitTick+0xa8>)
 80008f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_InitTick+0xa4>)
 80008f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_InitTick+0xa4>)
 8000900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000902:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_InitTick+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_InitTick+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_InitTick+0xa4>)
 8000912:	f002 f8a1 	bl	8002a58 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d104      	bne.n	8000926 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <HAL_InitTick+0xa4>)
 800091e:	f002 f8f3 	bl	8002b08 <HAL_TIM_Base_Start_IT>
 8000922:	4603      	mov	r3, r0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	431bde83 	.word	0x431bde83
 8000938:	20001a68 	.word	0x20001a68
 800093c:	40000800 	.word	0x40000800

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <HardFault_Handler+0x4>

08000952 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <BusFault_Handler+0x4>

0800095e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <UsageFault_Handler+0x4>

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM4_IRQHandler+0x10>)
 8000976:	f002 f919 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20001a68 	.word	0x20001a68

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f005 fb12 	bl	8005fdc <__errno>
 80009b8:	4602      	mov	r2, r0
 80009ba:	230c      	movs	r3, #12
 80009bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20005000 	.word	0x20005000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	20000090 	.word	0x20000090
 80009ec:	20001af8 	.word	0x20001af8

080009f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <printString>:
 */

#include "CommMod.h"

void printString(const char* mess)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09e      	sub	sp, #120	; 0x78
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef st;
	uint8_t cliBufferTX[100];

	while(huart2.gState == HAL_UART_STATE_BUSY_TX){}
 8000a08:	bf00      	nop
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <printString+0x70>)
 8000a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b21      	cmp	r3, #33	; 0x21
 8000a14:	d0f9      	beq.n	8000a0a <printString+0xe>

	for(const char* p = mess; *p; ++p)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	673b      	str	r3, [r7, #112]	; 0x70
 8000a1a:	e00d      	b.n	8000a38 <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a1e:	7819      	ldrb	r1, [r3, #0]
 8000a20:	f107 0208 	add.w	r2, r7, #8
 8000a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a26:	4413      	add	r3, r2
 8000a28:	460a      	mov	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
		i++;
 8000a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a2e:	3301      	adds	r3, #1
 8000a30:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 8000a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a34:	3301      	adds	r3, #1
 8000a36:	673b      	str	r3, [r7, #112]	; 0x70
 8000a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1ed      	bne.n	8000a1c <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart2, cliBufferTX, i, 1000);
 8000a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f107 0108 	add.w	r1, r7, #8
 8000a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <printString+0x70>)
 8000a4e:	f002 fa9a 	bl	8002f86 <HAL_UART_Transmit>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 8000a58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <printString+0x68>
	{
		Error_Handler();
 8000a60:	f7ff fe5a 	bl	8000718 <Error_Handler>
	}

}
 8000a64:	bf00      	nop
 8000a66:	3778      	adds	r7, #120	; 0x78
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20001a28 	.word	0x20001a28

08000a70 <roomSelect>:
 */

#include "UserInput.h"

char * roomSelect(uint16_t pot)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	if(pot < 0x555)
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	f240 5254 	movw	r2, #1364	; 0x554
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d801      	bhi.n	8000a88 <roomSelect+0x18>
	{
		return "ed435";
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <roomSelect+0x40>)
 8000a86:	e00e      	b.n	8000aa6 <roomSelect+0x36>
	}
	else if(pot < 0xAAA)
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d801      	bhi.n	8000a96 <roomSelect+0x26>
	{
		return "ed486";
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <roomSelect+0x44>)
 8000a94:	e007      	b.n	8000aa6 <roomSelect+0x36>
	}
	else if(pot < 0xFFF)
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d801      	bhi.n	8000aa4 <roomSelect+0x34>
	{
		return "cl110";
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <roomSelect+0x48>)
 8000aa2:	e000      	b.n	8000aa6 <roomSelect+0x36>
	}
	else
	{
		return "err";
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <roomSelect+0x4c>)
	}
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	08006910 	.word	0x08006910
 8000ab4:	08006918 	.word	0x08006918
 8000ab8:	08006920 	.word	0x08006920
 8000abc:	08006928 	.word	0x08006928

08000ac0 <lcd_IO_init>:
#include "stm32f1xx.h"
#include "lcd.h"


void lcd_IO_init (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

	//Enable peripheral clocks for ports B and C

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <lcd_IO_init+0x28>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <lcd_IO_init+0x28>)
 8000aca:	f043 0318 	orr.w	r3, r3, #24
 8000ace:	6193      	str	r3, [r2, #24]

	//Set the config and mode bits for Port B bit 0, 1, and 5 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOB->CRL = 0x44344433;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <lcd_IO_init+0x2c>)
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <lcd_IO_init+0x30>)
 8000ad4:	601a      	str	r2, [r3, #0]

	//Set the config and mode bits for Port C bits 7 down to 0 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOC->CRL = 0x33333333;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <lcd_IO_init+0x34>)
 8000ad8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000adc:	601a      	str	r2, [r3, #0]

}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	44344433 	.word	0x44344433
 8000af4:	40011000 	.word	0x40011000

08000af8 <CMD2LCD>:

void CMD2LCD(uint8_t data)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = LCD_CM_ENA;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <CMD2LCD+0x44>)
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <CMD2LCD+0x48>)
 8000b06:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <CMD2LCD+0x4c>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <CMD2LCD+0x4c>)
 8000b0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000b12:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <CMD2LCD+0x4c>)
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	490a      	ldr	r1, [pc, #40]	; (8000b44 <CMD2LCD+0x4c>)
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60cb      	str	r3, [r1, #12]

	HAL_Delay(2);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f000 fb13 	bl	800114c <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_CM_DIS;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <CMD2LCD+0x44>)
 8000b28:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000b2c:	611a      	str	r2, [r3, #16]

	HAL_Delay(14);
 8000b2e:	200e      	movs	r0, #14
 8000b30:	f000 fb0c 	bl	800114c <HAL_Delay>
	//delay(80000);

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	00210002 	.word	0x00210002
 8000b44:	40011000 	.word	0x40011000

08000b48 <lcd_init>:

void lcd_init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	for(int j = 0; j < 3; j++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e008      	b.n	8000b66 <lcd_init+0x1e>
	{
		CMD2LCD(0X38);
 8000b54:	2038      	movs	r0, #56	; 0x38
 8000b56:	f7ff ffcf 	bl	8000af8 <CMD2LCD>
		HAL_Delay(5);
 8000b5a:	2005      	movs	r0, #5
 8000b5c:	f000 faf6 	bl	800114c <HAL_Delay>
	for(int j = 0; j < 3; j++)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	ddf3      	ble.n	8000b54 <lcd_init+0xc>
		//delay(24600);
	}

	CMD2LCD(0X38);
 8000b6c:	2038      	movs	r0, #56	; 0x38
 8000b6e:	f7ff ffc3 	bl	8000af8 <CMD2LCD>
	HAL_Delay(5);
 8000b72:	2005      	movs	r0, #5
 8000b74:	f000 faea 	bl	800114c <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X0F);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f7ff ffbd 	bl	8000af8 <CMD2LCD>
	HAL_Delay(5);
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f000 fae4 	bl	800114c <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X01);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ffb7 	bl	8000af8 <CMD2LCD>
	HAL_Delay(5);
 8000b8a:	2005      	movs	r0, #5
 8000b8c:	f000 fade 	bl	800114c <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X06);
 8000b90:	2006      	movs	r0, #6
 8000b92:	f7ff ffb1 	bl	8000af8 <CMD2LCD>
	HAL_Delay(5);
 8000b96:	2005      	movs	r0, #5
 8000b98:	f000 fad8 	bl	800114c <HAL_Delay>
	//delay(24600);

}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <DAT2LCD>:

void DAT2LCD(uint8_t data)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = LCD_DM_ENA;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <DAT2LCD+0x44>)
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <DAT2LCD+0x48>)
 8000bb2:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <DAT2LCD+0x4c>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <DAT2LCD+0x4c>)
 8000bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000bbe:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <DAT2LCD+0x4c>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	490a      	ldr	r1, [pc, #40]	; (8000bf0 <DAT2LCD+0x4c>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60cb      	str	r3, [r1, #12]
	HAL_Delay(2);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f000 fabd 	bl	800114c <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_DM_DIS;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <DAT2LCD+0x44>)
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <DAT2LCD+0x50>)
 8000bd6:	611a      	str	r2, [r3, #16]
	HAL_Delay(14);
 8000bd8:	200e      	movs	r0, #14
 8000bda:	f000 fab7 	bl	800114c <HAL_Delay>
	//delay(80000);

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	00200003 	.word	0x00200003
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	00220001 	.word	0x00220001

08000bf8 <char2LCD>:
		break;
	}
}

void char2LCD(char * val)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	//toLower()

	int i = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 8000c04:	e160      	b.n	8000ec8 <char2LCD+0x2d0>
	{
		switch(val[i]){
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3b20      	subs	r3, #32
 8000c10:	2b5a      	cmp	r3, #90	; 0x5a
 8000c12:	f200 8155 	bhi.w	8000ec0 <char2LCD+0x2c8>
 8000c16:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <char2LCD+0x24>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000ea9 	.word	0x08000ea9
 8000c20:	08000ec1 	.word	0x08000ec1
 8000c24:	08000ec1 	.word	0x08000ec1
 8000c28:	08000ec1 	.word	0x08000ec1
 8000c2c:	08000ec1 	.word	0x08000ec1
 8000c30:	08000ec1 	.word	0x08000ec1
 8000c34:	08000ec1 	.word	0x08000ec1
 8000c38:	08000ec1 	.word	0x08000ec1
 8000c3c:	08000ec1 	.word	0x08000ec1
 8000c40:	08000ec1 	.word	0x08000ec1
 8000c44:	08000ec1 	.word	0x08000ec1
 8000c48:	08000ec1 	.word	0x08000ec1
 8000c4c:	08000ec1 	.word	0x08000ec1
 8000c50:	08000ec1 	.word	0x08000ec1
 8000c54:	08000eb1 	.word	0x08000eb1
 8000c58:	08000ec1 	.word	0x08000ec1
 8000c5c:	08000d89 	.word	0x08000d89
 8000c60:	08000d91 	.word	0x08000d91
 8000c64:	08000d99 	.word	0x08000d99
 8000c68:	08000da1 	.word	0x08000da1
 8000c6c:	08000da9 	.word	0x08000da9
 8000c70:	08000db1 	.word	0x08000db1
 8000c74:	08000db9 	.word	0x08000db9
 8000c78:	08000dc1 	.word	0x08000dc1
 8000c7c:	08000dc9 	.word	0x08000dc9
 8000c80:	08000dd1 	.word	0x08000dd1
 8000c84:	08000eb9 	.word	0x08000eb9
 8000c88:	08000ec1 	.word	0x08000ec1
 8000c8c:	08000ec1 	.word	0x08000ec1
 8000c90:	08000ec1 	.word	0x08000ec1
 8000c94:	08000ec1 	.word	0x08000ec1
 8000c98:	08000ec1 	.word	0x08000ec1
 8000c9c:	08000ec1 	.word	0x08000ec1
 8000ca0:	08000ec1 	.word	0x08000ec1
 8000ca4:	08000ec1 	.word	0x08000ec1
 8000ca8:	08000ec1 	.word	0x08000ec1
 8000cac:	08000ec1 	.word	0x08000ec1
 8000cb0:	08000ec1 	.word	0x08000ec1
 8000cb4:	08000ec1 	.word	0x08000ec1
 8000cb8:	08000ec1 	.word	0x08000ec1
 8000cbc:	08000ec1 	.word	0x08000ec1
 8000cc0:	08000ec1 	.word	0x08000ec1
 8000cc4:	08000ec1 	.word	0x08000ec1
 8000cc8:	08000ec1 	.word	0x08000ec1
 8000ccc:	08000ec1 	.word	0x08000ec1
 8000cd0:	08000ec1 	.word	0x08000ec1
 8000cd4:	08000ec1 	.word	0x08000ec1
 8000cd8:	08000ec1 	.word	0x08000ec1
 8000cdc:	08000ec1 	.word	0x08000ec1
 8000ce0:	08000ec1 	.word	0x08000ec1
 8000ce4:	08000ec1 	.word	0x08000ec1
 8000ce8:	08000ec1 	.word	0x08000ec1
 8000cec:	08000ec1 	.word	0x08000ec1
 8000cf0:	08000ec1 	.word	0x08000ec1
 8000cf4:	08000ec1 	.word	0x08000ec1
 8000cf8:	08000ec1 	.word	0x08000ec1
 8000cfc:	08000ec1 	.word	0x08000ec1
 8000d00:	08000ec1 	.word	0x08000ec1
 8000d04:	08000ec1 	.word	0x08000ec1
 8000d08:	08000ec1 	.word	0x08000ec1
 8000d0c:	08000ec1 	.word	0x08000ec1
 8000d10:	08000ec1 	.word	0x08000ec1
 8000d14:	08000ec1 	.word	0x08000ec1
 8000d18:	08000ec1 	.word	0x08000ec1
 8000d1c:	08000ec1 	.word	0x08000ec1
 8000d20:	08000dd9 	.word	0x08000dd9
 8000d24:	08000de1 	.word	0x08000de1
 8000d28:	08000de9 	.word	0x08000de9
 8000d2c:	08000df1 	.word	0x08000df1
 8000d30:	08000df9 	.word	0x08000df9
 8000d34:	08000e01 	.word	0x08000e01
 8000d38:	08000e09 	.word	0x08000e09
 8000d3c:	08000e11 	.word	0x08000e11
 8000d40:	08000e19 	.word	0x08000e19
 8000d44:	08000e21 	.word	0x08000e21
 8000d48:	08000e29 	.word	0x08000e29
 8000d4c:	08000e31 	.word	0x08000e31
 8000d50:	08000e39 	.word	0x08000e39
 8000d54:	08000e41 	.word	0x08000e41
 8000d58:	08000e49 	.word	0x08000e49
 8000d5c:	08000e51 	.word	0x08000e51
 8000d60:	08000e59 	.word	0x08000e59
 8000d64:	08000e61 	.word	0x08000e61
 8000d68:	08000e69 	.word	0x08000e69
 8000d6c:	08000e71 	.word	0x08000e71
 8000d70:	08000e79 	.word	0x08000e79
 8000d74:	08000e81 	.word	0x08000e81
 8000d78:	08000e89 	.word	0x08000e89
 8000d7c:	08000e91 	.word	0x08000e91
 8000d80:	08000e99 	.word	0x08000e99
 8000d84:	08000ea1 	.word	0x08000ea1
		case '0':
			DAT2LCD(0x30);
 8000d88:	2030      	movs	r0, #48	; 0x30
 8000d8a:	f7ff ff0b 	bl	8000ba4 <DAT2LCD>
			break;
 8000d8e:	e098      	b.n	8000ec2 <char2LCD+0x2ca>

		case '1':
			DAT2LCD(0x31);
 8000d90:	2031      	movs	r0, #49	; 0x31
 8000d92:	f7ff ff07 	bl	8000ba4 <DAT2LCD>
			break;
 8000d96:	e094      	b.n	8000ec2 <char2LCD+0x2ca>

		case '2':
			DAT2LCD(0x32);
 8000d98:	2032      	movs	r0, #50	; 0x32
 8000d9a:	f7ff ff03 	bl	8000ba4 <DAT2LCD>
			break;
 8000d9e:	e090      	b.n	8000ec2 <char2LCD+0x2ca>

		case '3':
			DAT2LCD(0x33);
 8000da0:	2033      	movs	r0, #51	; 0x33
 8000da2:	f7ff feff 	bl	8000ba4 <DAT2LCD>
			break;
 8000da6:	e08c      	b.n	8000ec2 <char2LCD+0x2ca>

		case '4':
			DAT2LCD(0x34);
 8000da8:	2034      	movs	r0, #52	; 0x34
 8000daa:	f7ff fefb 	bl	8000ba4 <DAT2LCD>
			break;
 8000dae:	e088      	b.n	8000ec2 <char2LCD+0x2ca>

		case '5':
			DAT2LCD(0x35);
 8000db0:	2035      	movs	r0, #53	; 0x35
 8000db2:	f7ff fef7 	bl	8000ba4 <DAT2LCD>
			break;
 8000db6:	e084      	b.n	8000ec2 <char2LCD+0x2ca>

		case '6':
			DAT2LCD(0x36);
 8000db8:	2036      	movs	r0, #54	; 0x36
 8000dba:	f7ff fef3 	bl	8000ba4 <DAT2LCD>
			break;
 8000dbe:	e080      	b.n	8000ec2 <char2LCD+0x2ca>

		case '7':
			DAT2LCD(0x37);
 8000dc0:	2037      	movs	r0, #55	; 0x37
 8000dc2:	f7ff feef 	bl	8000ba4 <DAT2LCD>
			break;
 8000dc6:	e07c      	b.n	8000ec2 <char2LCD+0x2ca>

		case '8':
			DAT2LCD(0x38);
 8000dc8:	2038      	movs	r0, #56	; 0x38
 8000dca:	f7ff feeb 	bl	8000ba4 <DAT2LCD>
			break;
 8000dce:	e078      	b.n	8000ec2 <char2LCD+0x2ca>

		case '9':
			DAT2LCD(0x39);
 8000dd0:	2039      	movs	r0, #57	; 0x39
 8000dd2:	f7ff fee7 	bl	8000ba4 <DAT2LCD>
			break;
 8000dd6:	e074      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'a':
			DAT2LCD(0x41);
 8000dd8:	2041      	movs	r0, #65	; 0x41
 8000dda:	f7ff fee3 	bl	8000ba4 <DAT2LCD>
			break;
 8000dde:	e070      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'b':
			DAT2LCD(0x42);
 8000de0:	2042      	movs	r0, #66	; 0x42
 8000de2:	f7ff fedf 	bl	8000ba4 <DAT2LCD>
			break;
 8000de6:	e06c      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'c':
			DAT2LCD(0x43);
 8000de8:	2043      	movs	r0, #67	; 0x43
 8000dea:	f7ff fedb 	bl	8000ba4 <DAT2LCD>
			break;
 8000dee:	e068      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'd':
			DAT2LCD(0x44);
 8000df0:	2044      	movs	r0, #68	; 0x44
 8000df2:	f7ff fed7 	bl	8000ba4 <DAT2LCD>
			break;
 8000df6:	e064      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'e':
			DAT2LCD(0x45);
 8000df8:	2045      	movs	r0, #69	; 0x45
 8000dfa:	f7ff fed3 	bl	8000ba4 <DAT2LCD>
			break;
 8000dfe:	e060      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'f':
			DAT2LCD(0x46);
 8000e00:	2046      	movs	r0, #70	; 0x46
 8000e02:	f7ff fecf 	bl	8000ba4 <DAT2LCD>
			break;
 8000e06:	e05c      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'g':
			DAT2LCD(0x47);
 8000e08:	2047      	movs	r0, #71	; 0x47
 8000e0a:	f7ff fecb 	bl	8000ba4 <DAT2LCD>
			break;
 8000e0e:	e058      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'h':
			DAT2LCD(0x48);
 8000e10:	2048      	movs	r0, #72	; 0x48
 8000e12:	f7ff fec7 	bl	8000ba4 <DAT2LCD>
			break;
 8000e16:	e054      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'i':
			DAT2LCD(0x49);
 8000e18:	2049      	movs	r0, #73	; 0x49
 8000e1a:	f7ff fec3 	bl	8000ba4 <DAT2LCD>
			break;
 8000e1e:	e050      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'j':
			DAT2LCD(0x4A);
 8000e20:	204a      	movs	r0, #74	; 0x4a
 8000e22:	f7ff febf 	bl	8000ba4 <DAT2LCD>
			break;
 8000e26:	e04c      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'k':
			DAT2LCD(0x4B);
 8000e28:	204b      	movs	r0, #75	; 0x4b
 8000e2a:	f7ff febb 	bl	8000ba4 <DAT2LCD>
			break;
 8000e2e:	e048      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'l':
			DAT2LCD(0x4C);
 8000e30:	204c      	movs	r0, #76	; 0x4c
 8000e32:	f7ff feb7 	bl	8000ba4 <DAT2LCD>
			break;
 8000e36:	e044      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'm':
			DAT2LCD(0x4D);
 8000e38:	204d      	movs	r0, #77	; 0x4d
 8000e3a:	f7ff feb3 	bl	8000ba4 <DAT2LCD>
			break;
 8000e3e:	e040      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'n':
			DAT2LCD(0x4E);
 8000e40:	204e      	movs	r0, #78	; 0x4e
 8000e42:	f7ff feaf 	bl	8000ba4 <DAT2LCD>
			break;
 8000e46:	e03c      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'o':
			DAT2LCD(0x4F);
 8000e48:	204f      	movs	r0, #79	; 0x4f
 8000e4a:	f7ff feab 	bl	8000ba4 <DAT2LCD>
			break;
 8000e4e:	e038      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'p':
			DAT2LCD(0x50);
 8000e50:	2050      	movs	r0, #80	; 0x50
 8000e52:	f7ff fea7 	bl	8000ba4 <DAT2LCD>
			break;
 8000e56:	e034      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'q':
			DAT2LCD(0x51);
 8000e58:	2051      	movs	r0, #81	; 0x51
 8000e5a:	f7ff fea3 	bl	8000ba4 <DAT2LCD>
			break;
 8000e5e:	e030      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'r':
			DAT2LCD(0x52);
 8000e60:	2052      	movs	r0, #82	; 0x52
 8000e62:	f7ff fe9f 	bl	8000ba4 <DAT2LCD>
			break;
 8000e66:	e02c      	b.n	8000ec2 <char2LCD+0x2ca>

		case 's':
			DAT2LCD(0x53);
 8000e68:	2053      	movs	r0, #83	; 0x53
 8000e6a:	f7ff fe9b 	bl	8000ba4 <DAT2LCD>
			break;
 8000e6e:	e028      	b.n	8000ec2 <char2LCD+0x2ca>

		case 't':
			DAT2LCD(0x54);
 8000e70:	2054      	movs	r0, #84	; 0x54
 8000e72:	f7ff fe97 	bl	8000ba4 <DAT2LCD>
			break;
 8000e76:	e024      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'u':
			DAT2LCD(0x55);
 8000e78:	2055      	movs	r0, #85	; 0x55
 8000e7a:	f7ff fe93 	bl	8000ba4 <DAT2LCD>
			break;
 8000e7e:	e020      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'v':
			DAT2LCD(0x56);
 8000e80:	2056      	movs	r0, #86	; 0x56
 8000e82:	f7ff fe8f 	bl	8000ba4 <DAT2LCD>
			break;
 8000e86:	e01c      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'w':
			DAT2LCD(0x57);
 8000e88:	2057      	movs	r0, #87	; 0x57
 8000e8a:	f7ff fe8b 	bl	8000ba4 <DAT2LCD>
			break;
 8000e8e:	e018      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'x':
			DAT2LCD(0x58);
 8000e90:	2058      	movs	r0, #88	; 0x58
 8000e92:	f7ff fe87 	bl	8000ba4 <DAT2LCD>
			break;
 8000e96:	e014      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'y':
			DAT2LCD(0x59);
 8000e98:	2059      	movs	r0, #89	; 0x59
 8000e9a:	f7ff fe83 	bl	8000ba4 <DAT2LCD>
			break;
 8000e9e:	e010      	b.n	8000ec2 <char2LCD+0x2ca>

		case 'z':
			DAT2LCD(0x5A);
 8000ea0:	205a      	movs	r0, #90	; 0x5a
 8000ea2:	f7ff fe7f 	bl	8000ba4 <DAT2LCD>
			break;
 8000ea6:	e00c      	b.n	8000ec2 <char2LCD+0x2ca>

		case ' ':
			DAT2LCD(0x20);
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f7ff fe7b 	bl	8000ba4 <DAT2LCD>
			break;
 8000eae:	e008      	b.n	8000ec2 <char2LCD+0x2ca>

		case '.':
			DAT2LCD(0x2E);
 8000eb0:	202e      	movs	r0, #46	; 0x2e
 8000eb2:	f7ff fe77 	bl	8000ba4 <DAT2LCD>
			break;
 8000eb6:	e004      	b.n	8000ec2 <char2LCD+0x2ca>

		case ':':
			DAT2LCD(0x3A);
 8000eb8:	203a      	movs	r0, #58	; 0x3a
 8000eba:	f7ff fe73 	bl	8000ba4 <DAT2LCD>
			break;
 8000ebe:	e000      	b.n	8000ec2 <char2LCD+0x2ca>

		default:
			break;
 8000ec0:	bf00      	nop
		}
		i++;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f ae98 	bne.w	8000c06 <char2LCD+0xe>
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop

08000ee0 <CO2Conversion>:

#include "sensors.h"


uint16_t CO2Conversion(uint32_t input)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 if(input == 0)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <CO2Conversion+0x12>
 {
  return 0; /*this should print fault*/
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e013      	b.n	8000f1a <CO2Conversion+0x3a>
 }
 else if((input) < 400)  /*preheating voltage is from 0.2 to 0.4 */
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ef8:	d202      	bcs.n	8000f00 <CO2Conversion+0x20>
 {
  return -1; /* this should print "preheating CO2"*/
 8000efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efe:	e00c      	b.n	8000f1a <CO2Conversion+0x3a>
 }
 else 
 {
  uint16_t voltagedif = (input - 400) * 40 / 16; /*this is for voltage to PPM conversion*/
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	81fb      	strh	r3, [r7, #14]
  return voltagedif - 1000;
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000f18:	b29b      	uxth	r3, r3
  }
 /*CO2 has a 100ms delay before looping*/
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <TempConversion>:

uint16_t TempConversion(uint32_t input)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return input / 10;   /* voltage to degree celsius conversion*/
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <TempConversion+0x20>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	b29b      	uxth	r3, r3
  /* has an 500ms delay before looping*/
 }
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	cccccccd 	.word	0xcccccccd

08000f48 <NoiseConversion>:

uint16_t NoiseConversion(uint32_t input)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
//  return PinVoltage * 50.0; /* 50.0 is voltage to dB conversion value */
 /* has an 125ms delay before looping*/

//input = input * 50 / 1000;

 input = input - 600;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8000f56:	607b      	str	r3, [r7, #4]
 input /= 20;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <NoiseConversion+0x38>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	607b      	str	r3, [r7, #4]
 input += 30;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	331e      	adds	r3, #30
 8000f68:	607b      	str	r3, [r7, #4]
 input -= 8;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3b08      	subs	r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 return input;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b29b      	uxth	r3, r3

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	cccccccd 	.word	0xcccccccd

08000f84 <CO2_Select>:

void CO2_Select(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <CO2_Select+0x38>)
 8000fa6:	f000 fbab 	bl	8001700 <HAL_ADC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <CO2_Select+0x30>
	{
		Error_Handler();
 8000fb0:	f7ff fbb2 	bl	8000718 <Error_Handler>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200019b8 	.word	0x200019b8

08000fc0 <TEMP_Select>:

void TEMP_Select(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <TEMP_Select+0x34>)
 8000fde:	f000 fb8f 	bl	8001700 <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <TEMP_Select+0x2c>
	{
		Error_Handler();
 8000fe8:	f7ff fb96 	bl	8000718 <Error_Handler>
	}
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200019b8 	.word	0x200019b8

08000ff8 <NOISE_Select>:

void NOISE_Select(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_6;
 8001008:	2306      	movs	r3, #6
 800100a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800100c:	2301      	movs	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <NOISE_Select+0x34>)
 8001016:	f000 fb73 	bl	8001700 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <NOISE_Select+0x2c>
	{
		Error_Handler();
 8001020:	f7ff fb7a 	bl	8000718 <Error_Handler>
	}
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200019b8 	.word	0x200019b8

08001030 <POT_Select>:

void POT_Select(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_7;
 8001040:	2307      	movs	r3, #7
 8001042:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001044:	2301      	movs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <POT_Select+0x34>)
 800104e:	f000 fb57 	bl	8001700 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <POT_Select+0x2c>
	{
		Error_Handler();
 8001058:	f7ff fb5e 	bl	8000718 <Error_Handler>
	}
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200019b8 	.word	0x200019b8

08001068 <ADC_Read>:

uint32_t ADC_Read(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint32_t temp;
	HAL_ADC_Start(&hadc1);
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <ADC_Read+0x30>)
 8001070:	f000 f966 	bl	8001340 <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 1000);
 8001074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <ADC_Read+0x30>)
 800107a:	f000 fa3b 	bl	80014f4 <HAL_ADC_PollForConversion>
	temp = HAL_ADC_GetValue(&hadc1);
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <ADC_Read+0x30>)
 8001080:	f000 fb32 	bl	80016e8 <HAL_ADC_GetValue>
 8001084:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <ADC_Read+0x30>)
 8001088:	f000 fa08 	bl	800149c <HAL_ADC_Stop>
	return temp;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200019b8 	.word	0x200019b8

0800109c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800109c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010b8:	f842 3b04 	str.w	r3, [r2], #4

080010bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010c2:	f7ff fc95 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f004 ff8f 	bl	8005fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ca:	f7ff f841 	bl	8000150 <main>
  bx lr
 80010ce:	4770      	bx	lr
  ldr r3, =_sidata
 80010d0:	08006a74 	.word	0x08006a74
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010d8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80010dc:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80010e0:	20001af8 	.word	0x20001af8

080010e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_2_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x28>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x28>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 fd2f 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fbc8 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fb0e 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40022000 	.word	0x40022000

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x1c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_IncTick+0x20>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000008 	.word	0x20000008
 8001134:	20001ab0 	.word	0x20001ab0

08001138 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <HAL_GetTick+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20001ab0 	.word	0x20001ab0

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fff0 	bl	8001138 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_Delay+0x40>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffe0 	bl	8001138 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0be      	b.n	8001330 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fada 	bl	8000788 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fbdd 	bl	8001994 <ADC_ConversionStop_Disable>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 8099 	bne.w	800131e <HAL_ADC_Init+0x18e>
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 8095 	bne.w	800131e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011fc:	f023 0302 	bic.w	r3, r3, #2
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001210:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b1b      	ldrb	r3, [r3, #12]
 8001216:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001218:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	4313      	orrs	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001228:	d003      	beq.n	8001232 <HAL_ADC_Init+0xa2>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <HAL_ADC_Init+0xa8>
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	e000      	b.n	800123a <HAL_ADC_Init+0xaa>
 8001238:	2300      	movs	r3, #0
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7d1b      	ldrb	r3, [r3, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d119      	bne.n	800127c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d109      	bne.n	8001264 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	3b01      	subs	r3, #1
 8001256:	035a      	lsls	r2, r3, #13
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	e00b      	b.n	800127c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f043 0220 	orr.w	r2, r3, #32
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HAL_ADC_Init+0x1a8>)
 8001298:	4013      	ands	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ac:	d003      	beq.n	80012b6 <HAL_ADC_Init+0x126>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	051b      	lsls	r3, r3, #20
 80012be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_ADC_Init+0x1ac>)
 80012dc:	4013      	ands	r3, r2
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d10b      	bne.n	80012fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	f023 0303 	bic.w	r3, r3, #3
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012fa:	e018      	b.n	800132e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f023 0312 	bic.w	r3, r3, #18
 8001304:	f043 0210 	orr.w	r2, r3, #16
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131c:	e007      	b.n	800132e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	ffe1f7fd 	.word	0xffe1f7fd
 800133c:	ff1f0efe 	.word	0xff1f0efe

08001340 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_ADC_Start+0x1a>
 8001356:	2302      	movs	r3, #2
 8001358:	e098      	b.n	800148c <HAL_ADC_Start+0x14c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 fac4 	bl	80018f0 <ADC_Enable>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 8087 	bne.w	8001482 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a41      	ldr	r2, [pc, #260]	; (8001494 <HAL_ADC_Start+0x154>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d105      	bne.n	800139e <HAL_ADC_Start+0x5e>
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_ADC_Start+0x158>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d026      	beq.n	8001406 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c8:	e01d      	b.n	8001406 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <HAL_ADC_Start+0x158>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_ADC_Start+0xaa>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <HAL_ADC_Start+0x154>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10d      	bne.n	8001406 <HAL_ADC_Start+0xc6>
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_ADC_Start+0x158>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	f023 0206 	bic.w	r2, r3, #6
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
 800141e:	e002      	b.n	8001426 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 0202 	mvn.w	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001442:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001446:	d113      	bne.n	8001470 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_ADC_Start+0x154>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d105      	bne.n	800145e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_ADC_Start+0x158>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	e00c      	b.n	800148a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e003      	b.n	800148a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40012800 	.word	0x40012800
 8001498:	40012400 	.word	0x40012400

0800149c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_Stop+0x1a>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e01a      	b.n	80014ec <HAL_ADC_Stop+0x50>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fa68 	bl	8001994 <ADC_ConversionStop_Disable>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800150a:	f7ff fe15 	bl	8001138 <HAL_GetTick>
 800150e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	f043 0220 	orr.w	r2, r3, #32
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0c8      	b.n	80016c8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d12a      	bne.n	800159a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d123      	bne.n	800159a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001552:	e01a      	b.n	800158a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800155a:	d016      	beq.n	800158a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_ADC_PollForConversion+0x7e>
 8001562:	f7ff fde9 	bl	8001138 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d20b      	bcs.n	800158a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f043 0204 	orr.w	r2, r3, #4
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e09e      	b.n	80016c8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0dd      	beq.n	8001554 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001598:	e06c      	b.n	8001674 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800159a:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_ADC_PollForConversion+0x1dc>)
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	2002      	movs	r0, #2
 80015a0:	f001 f99e 	bl	80028e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80015a4:	4603      	mov	r3, r0
 80015a6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6919      	ldr	r1, [r3, #16]
 80015b0:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_ADC_PollForConversion+0x1e0>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d118      	bne.n	80015ea <HAL_ADC_PollForConversion+0xf6>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68d9      	ldr	r1, [r3, #12]
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_ADC_PollForConversion+0x1e4>)
 80015c0:	400b      	ands	r3, r1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_PollForConversion+0xf6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6919      	ldr	r1, [r3, #16]
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_ADC_PollForConversion+0x1e8>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d108      	bne.n	80015e6 <HAL_ADC_PollForConversion+0xf2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68d9      	ldr	r1, [r3, #12]
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_ADC_PollForConversion+0x1ec>)
 80015dc:	400b      	ands	r3, r1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_PollForConversion+0xf2>
 80015e2:	2314      	movs	r3, #20
 80015e4:	e020      	b.n	8001628 <HAL_ADC_PollForConversion+0x134>
 80015e6:	2329      	movs	r3, #41	; 0x29
 80015e8:	e01e      	b.n	8001628 <HAL_ADC_PollForConversion+0x134>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6919      	ldr	r1, [r3, #16]
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_ADC_PollForConversion+0x1e8>)
 80015f2:	400b      	ands	r3, r1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d106      	bne.n	8001606 <HAL_ADC_PollForConversion+0x112>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_ADC_PollForConversion+0x1ec>)
 8001600:	400b      	ands	r3, r1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <HAL_ADC_PollForConversion+0x12e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6919      	ldr	r1, [r3, #16]
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_ADC_PollForConversion+0x1f0>)
 800160e:	400b      	ands	r3, r1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <HAL_ADC_PollForConversion+0x132>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68d9      	ldr	r1, [r3, #12]
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_ADC_PollForConversion+0x1f0>)
 800161c:	400b      	ands	r3, r1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_ADC_PollForConversion+0x132>
 8001622:	2354      	movs	r3, #84	; 0x54
 8001624:	e000      	b.n	8001628 <HAL_ADC_PollForConversion+0x134>
 8001626:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800162e:	e01d      	b.n	800166c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001636:	d016      	beq.n	8001666 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_ADC_PollForConversion+0x15a>
 800163e:	f7ff fd7b 	bl	8001138 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d20b      	bcs.n	8001666 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	f043 0204 	orr.w	r2, r3, #4
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e030      	b.n	80016c8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8dd      	bhi.n	8001630 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0212 	mvn.w	r2, #18
 800167c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001694:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001698:	d115      	bne.n	80016c6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d111      	bne.n	80016c6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	24924924 	.word	0x24924924
 80016d8:	00924924 	.word	0x00924924
 80016dc:	12492492 	.word	0x12492492
 80016e0:	00492492 	.word	0x00492492
 80016e4:	00249249 	.word	0x00249249

080016e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x20>
 800171c:	2302      	movs	r3, #2
 800171e:	e0dc      	b.n	80018da <HAL_ADC_ConfigChannel+0x1da>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b06      	cmp	r3, #6
 800172e:	d81c      	bhi.n	800176a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b05      	subs	r3, #5
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b05      	subs	r3, #5
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
 8001768:	e03c      	b.n	80017e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d81c      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b23      	subs	r3, #35	; 0x23
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	4019      	ands	r1, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	3b23      	subs	r3, #35	; 0x23
 800179e:	fa00 f203 	lsl.w	r2, r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
 80017aa:	e01b      	b.n	80017e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b41      	subs	r3, #65	; 0x41
 80017be:	221f      	movs	r2, #31
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b41      	subs	r3, #65	; 0x41
 80017d8:	fa00 f203 	lsl.w	r2, r0, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d91c      	bls.n	8001826 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	3b1e      	subs	r3, #30
 80017fe:	2207      	movs	r2, #7
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6898      	ldr	r0, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	3b1e      	subs	r3, #30
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	e019      	b.n	800185a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6919      	ldr	r1, [r3, #16]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	4019      	ands	r1, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b10      	cmp	r3, #16
 8001860:	d003      	beq.n	800186a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001866:	2b11      	cmp	r3, #17
 8001868:	d132      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d125      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d126      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001890:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d11a      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_ADC_ConfigChannel+0x1ec>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9a      	lsrs	r2, r3, #18
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1b2>
 80018be:	e007      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40012400 	.word	0x40012400
 80018e8:	20000000 	.word	0x20000000
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d039      	beq.n	8001982 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <ADC_Enable+0x9c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <ADC_Enable+0xa0>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800192c:	e002      	b.n	8001934 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3b01      	subs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800193a:	f7ff fbfd 	bl	8001138 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001940:	e018      	b.n	8001974 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001942:	f7ff fbf9 	bl	8001138 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d911      	bls.n	8001974 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d1df      	bne.n	8001942 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000000 	.word	0x20000000
 8001990:	431bde83 	.word	0x431bde83

08001994 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d127      	bne.n	80019fe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019be:	f7ff fbbb 	bl	8001138 <HAL_GetTick>
 80019c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019c4:	e014      	b.n	80019f0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019c6:	f7ff fbb7 	bl	8001138 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d90d      	bls.n	80019f0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	f043 0210 	orr.w	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e007      	b.n	8001a00 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d0e3      	beq.n	80019c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <__NVIC_EnableIRQ+0x34>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff4f 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff64 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ffb2 	bl	8001af8 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff81 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff57 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e127      	b.n	8001e2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8116 	bne.w	8001e26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d034      	beq.n	8001c6c <HAL_GPIO_Init+0xa4>
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d80d      	bhi.n	8001c22 <HAL_GPIO_Init+0x5a>
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d02b      	beq.n	8001c62 <HAL_GPIO_Init+0x9a>
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d804      	bhi.n	8001c18 <HAL_GPIO_Init+0x50>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d031      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d01c      	beq.n	8001c50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c16:	e048      	b.n	8001caa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d043      	beq.n	8001ca4 <HAL_GPIO_Init+0xdc>
 8001c1c:	2b11      	cmp	r3, #17
 8001c1e:	d01b      	beq.n	8001c58 <HAL_GPIO_Init+0x90>
          break;
 8001c20:	e043      	b.n	8001caa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c22:	4a89      	ldr	r2, [pc, #548]	; (8001e48 <HAL_GPIO_Init+0x280>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d026      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
 8001c28:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_GPIO_Init+0x280>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d806      	bhi.n	8001c3c <HAL_GPIO_Init+0x74>
 8001c2e:	4a87      	ldr	r2, [pc, #540]	; (8001e4c <HAL_GPIO_Init+0x284>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d020      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
 8001c34:	4a86      	ldr	r2, [pc, #536]	; (8001e50 <HAL_GPIO_Init+0x288>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01d      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
          break;
 8001c3a:	e036      	b.n	8001caa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c3c:	4a85      	ldr	r2, [pc, #532]	; (8001e54 <HAL_GPIO_Init+0x28c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
 8001c42:	4a85      	ldr	r2, [pc, #532]	; (8001e58 <HAL_GPIO_Init+0x290>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d016      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
 8001c48:	4a84      	ldr	r2, [pc, #528]	; (8001e5c <HAL_GPIO_Init+0x294>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0xae>
          break;
 8001c4e:	e02c      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e028      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e023      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	3308      	adds	r3, #8
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e01e      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	330c      	adds	r3, #12
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e019      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e012      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	611a      	str	r2, [r3, #16]
          break;
 8001c96:	e008      	b.n	8001caa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	615a      	str	r2, [r3, #20]
          break;
 8001ca2:	e002      	b.n	8001caa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
          break;
 8001ca8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2bff      	cmp	r3, #255	; 0xff
 8001cae:	d801      	bhi.n	8001cb4 <HAL_GPIO_Init+0xec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	e001      	b.n	8001cb8 <HAL_GPIO_Init+0xf0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2bff      	cmp	r3, #255	; 0xff
 8001cbe:	d802      	bhi.n	8001cc6 <HAL_GPIO_Init+0xfe>
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x104>
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	401a      	ands	r2, r3
 8001cde:	6a39      	ldr	r1, [r7, #32]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8096 	beq.w	8001e26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfa:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_GPIO_Init+0x298>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	4a58      	ldr	r2, [pc, #352]	; (8001e60 <HAL_GPIO_Init+0x298>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6193      	str	r3, [r2, #24]
 8001d06:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_GPIO_Init+0x298>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d12:	4a54      	ldr	r2, [pc, #336]	; (8001e64 <HAL_GPIO_Init+0x29c>)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x19e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x19a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a49      	ldr	r2, [pc, #292]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x196>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x192>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x1a0>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x1a0>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x1a0>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x1a0>
 8001d66:	2300      	movs	r3, #0
 8001d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d78:	493a      	ldr	r1, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x29c>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4938      	ldr	r1, [pc, #224]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4933      	ldr	r1, [pc, #204]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	492e      	ldr	r1, [pc, #184]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	4929      	ldr	r1, [pc, #164]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	4924      	ldr	r1, [pc, #144]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
 8001dee:	e006      	b.n	8001dfe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	491f      	ldr	r1, [pc, #124]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	491a      	ldr	r1, [pc, #104]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60cb      	str	r3, [r1, #12]
 8001e16:	e006      	b.n	8001e26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	4915      	ldr	r1, [pc, #84]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	3301      	adds	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f aed0 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	372c      	adds	r7, #44	; 0x2c
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	10210000 	.word	0x10210000
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	10120000 	.word	0x10120000
 8001e54:	10310000 	.word	0x10310000
 8001e58:	10320000 	.word	0x10320000
 8001e5c:	10220000 	.word	0x10220000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40011400 	.word	0x40011400
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eba:	787b      	ldrb	r3, [r7, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e26c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x12c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e246      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x76>
 8001f44:	4b80      	ldr	r3, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b7b      	ldr	r3, [pc, #492]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b78      	ldr	r3, [pc, #480]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a77      	ldr	r2, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xbc>
 8001f7e:	4b72      	ldr	r3, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a71      	ldr	r2, [pc, #452]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f8be 	bl	8001138 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f8ba 	bl	8001138 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1fa      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe4>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f8aa 	bl	8001138 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f8a6 	bl	8001138 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1e6      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x10c>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff f85f 	bl	8001138 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff f85b 	bl	8001138 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e19b      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4927      	ldr	r1, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x270>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f83e 	bl	8001138 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff f83a 	bl	8001138 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03a      	beq.n	8002160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f81e 	bl	8001138 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff f81a 	bl	8001138 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e15a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 fb0a 	bl	8002738 <RCC_Delay>
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7ff f804 	bl	8001138 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff f800 	bl	8001138 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d908      	bls.n	8002154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e140      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	42420000 	.word	0x42420000
 8002150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e9      	bne.n	8002134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a6 	beq.w	80022ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b97      	ldr	r3, [pc, #604]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a93      	ldr	r2, [pc, #588]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b8b      	ldr	r3, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a8a      	ldr	r2, [pc, #552]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7fe ffc1 	bl	8001138 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe ffbd 	bl	8001138 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0fd      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x312>
 80021e0:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e02d      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x334>
 80021f6:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a75      	ldr	r2, [pc, #468]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a72      	ldr	r2, [pc, #456]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e01c      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x356>
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6c      	ldr	r2, [pc, #432]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe ff71 	bl	8001138 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe ff6d 	bl	8001138 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0ab      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCC_OscConfig+0x37e>
 800227c:	e014      	b.n	80022a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7fe ff5b 	bl	8001138 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe ff57 	bl	8001138 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e095      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ee      	bne.n	8002286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8081 	beq.w	80023c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b42      	ldr	r3, [pc, #264]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d061      	beq.n	8002394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d146      	bne.n	8002366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe ff2b 	bl	8001138 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe ff27 	bl	8001138 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e067      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	492d      	ldr	r1, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a19      	ldr	r1, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	430b      	orrs	r3, r1
 8002332:	4927      	ldr	r1, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fefb 	bl	8001138 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe fef7 	bl	8001138 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e037      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x46a>
 8002364:	e02f      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fee4 	bl	8001138 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fee0 	bl	8001138 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e020      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x498>
 8002392:	e018      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420060 	.word	0x42420060

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fe34 	bl	8001138 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fe30 	bl	8001138 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4601      	mov	r1, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	fa21 f303 	lsr.w	r3, r1, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe f982 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08006a20 	.word	0x08006a20
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b490      	push	{r4, r7}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025b8:	1d3c      	adds	r4, r7, #4
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ee:	e02d      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	e02d      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002602:	4413      	add	r3, r2
 8002604:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002608:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0c5b      	lsrs	r3, r3, #17
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002622:	4413      	add	r3, r2
 8002624:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002628:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <HAL_RCC_GetSysClockFreq+0xbc>)
 800262e:	fb02 f203 	mul.w	r2, r2, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e004      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	623b      	str	r3, [r7, #32]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCC_GetSysClockFreq+0xbc>)
 800264e:	623b      	str	r3, [r7, #32]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6a3b      	ldr	r3, [r7, #32]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc90      	pop	{r4, r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	0800692c 	.word	0x0800692c
 8002664:	0800693c 	.word	0x0800693c
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	003d0900 	.word	0x003d0900

08002674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <HAL_RCC_GetHCLKFreq+0x10>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800268c:	f7ff fff2 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002690:	4601      	mov	r1, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08006a30 	.word	0x08006a30

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b4:	f7ff ffde 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 80026b8:	4601      	mov	r1, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0adb      	lsrs	r3, r3, #11
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08006a30 	.word	0x08006a30

080026d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	220f      	movs	r2, #15
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_GetClockConfig+0x58>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_RCC_GetClockConfig+0x58>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_GetClockConfig+0x58>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_GetClockConfig+0x58>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_GetClockConfig+0x5c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0207 	and.w	r2, r3, #7
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40021000 	.word	0x40021000
 8002734:	40022000 	.word	0x40022000

08002738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <RCC_Delay+0x34>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <RCC_Delay+0x38>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0a5b      	lsrs	r3, r3, #9
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002754:	bf00      	nop
  }
  while (Delay --);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	60fa      	str	r2, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f9      	bne.n	8002754 <RCC_Delay+0x1c>
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000
 8002770:	10624dd3 	.word	0x10624dd3

08002774 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d07d      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002794:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10d      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a4b      	ldr	r2, [pc, #300]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027aa:	61d3      	str	r3, [r2, #28]
 80027ac:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d118      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a42      	ldr	r2, [pc, #264]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d4:	f7fe fcb0 	bl	8001138 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	e008      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fcac 	bl	8001138 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e06d      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027fa:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02e      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d027      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002818:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800282e:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d014      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fc7b 	bl	8001138 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fc77 	bl	8001138 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e036      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ee      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4917      	ldr	r1, [pc, #92]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	4313      	orrs	r3, r2
 8002878:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	490b      	ldr	r1, [pc, #44]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4904      	ldr	r1, [pc, #16]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42420440 	.word	0x42420440

080028e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b08d      	sub	sp, #52	; 0x34
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028ea:	f107 040c 	add.w	r4, r7, #12
 80028ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d07f      	beq.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002914:	2b10      	cmp	r3, #16
 8002916:	d002      	beq.n	800291e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002918:	2b01      	cmp	r3, #1
 800291a:	d048      	beq.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800291c:	e08b      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002924:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d07f      	beq.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800293c:	4413      	add	r3, r2
 800293e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002942:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0c5b      	lsrs	r3, r3, #17
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800295c:	4413      	add	r3, r2
 800295e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800296e:	4a37      	ldr	r2, [pc, #220]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	fbb2 f2f3 	udiv	r2, r2, r3
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	e004      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002996:	d102      	bne.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800299c:	e048      	b.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029ac:	e040      	b.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	d108      	bne.n	80029d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80029ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d0:	e01f      	b.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029dc:	d109      	bne.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80029ea:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f0:	e00f      	b.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002a0a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a10:	e010      	b.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002a12:	e00f      	b.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a14:	f7ff fe4c 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0b9b      	lsrs	r3, r3, #14
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	3301      	adds	r3, #1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002a34:	bf00      	nop
    }
  }
  return (frequency);
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3734      	adds	r7, #52	; 0x34
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd90      	pop	{r4, r7, pc}
 8002a40:	08006940 	.word	0x08006940
 8002a44:	08006950 	.word	0x08006950
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	007a1200 	.word	0x007a1200
 8002a50:	003d0900 	.word	0x003d0900
 8002a54:	aaaaaaab 	.word	0xaaaaaaab

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e041      	b.n	8002aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f839 	bl	8002af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 f9b4 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e03a      	b.n	8002b96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x58>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d009      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x58>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x58>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d010      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	e007      	b.n	8002b94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800

08002bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0202 	mvn.w	r2, #2
 8002bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8ed 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8e0 	bl	8002dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8ef 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0204 	mvn.w	r2, #4
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8c3 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8b6 	bl	8002dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f8c5 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0208 	mvn.w	r2, #8
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f899 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f88c 	bl	8002dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f89b 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0210 	mvn.w	r2, #16
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f86f 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f862 	bl	8002dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f871 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0201 	mvn.w	r2, #1
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd fce2 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b80      	cmp	r3, #128	; 0x80
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8bf 	bl	8002eda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f835 	bl	8002df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0220 	mvn.w	r2, #32
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f88a 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e03f      	b.n	8002f7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fc74 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f905 	bl	8003140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af02      	add	r7, sp, #8
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d17c      	bne.n	80030a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Transmit+0x2c>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e075      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit+0x3e>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e06e      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fda:	f7fe f8ad 	bl	8001138 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Transmit+0x82>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003018:	e02a      	b.n	8003070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f840 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e036      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10b      	bne.n	8003052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	3302      	adds	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e007      	b.n	8003062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1cf      	bne.n	800301a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f810 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e006      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ba:	e02c      	b.n	8003116 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c2:	d028      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0x30>
 80030ca:	f7fe f835 	bl	8001138 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d21d      	bcs.n	8003116 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e00f      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	429a      	cmp	r2, r3
 8003132:	d0c3      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800317a:	f023 030c 	bic.w	r3, r3, #12
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <UART_SetConfig+0x114>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7ff fa82 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	e002      	b.n	80031b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7ff fa6a 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 80031b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	0119      	lsls	r1, r3, #4
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009a      	lsls	r2, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <UART_SetConfig+0x118>)
 80031ee:	fba3 0302 	umull	r0, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	4419      	add	r1, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f2f3 	udiv	r2, r2, r3
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <UART_SetConfig+0x118>)
 8003226:	fba3 0302 	umull	r0, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	fb00 f303 	mul.w	r3, r0, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	440a      	add	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40013800 	.word	0x40013800
 8003258:	51eb851f 	.word	0x51eb851f

0800325c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003262:	f3ef 8305 	mrs	r3, IPSR
 8003266:	60bb      	str	r3, [r7, #8]
  return(result);
 8003268:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326e:	f3ef 8310 	mrs	r3, PRIMASK
 8003272:	607b      	str	r3, [r7, #4]
  return(result);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <osKernelInitialize+0x32>
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <osKernelInitialize+0x60>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d109      	bne.n	8003296 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003282:	f3ef 8311 	mrs	r3, BASEPRI
 8003286:	603b      	str	r3, [r7, #0]
  return(result);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800328e:	f06f 0305 	mvn.w	r3, #5
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e00c      	b.n	80032b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <osKernelInitialize+0x60>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <osKernelInitialize+0x60>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e002      	b.n	80032b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032b0:	68fb      	ldr	r3, [r7, #12]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	20000094 	.word	0x20000094

080032c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c6:	f3ef 8305 	mrs	r3, IPSR
 80032ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80032cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d2:	f3ef 8310 	mrs	r3, PRIMASK
 80032d6:	607b      	str	r3, [r7, #4]
  return(result);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <osKernelStart+0x32>
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <osKernelStart+0x64>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d109      	bne.n	80032fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032e6:	f3ef 8311 	mrs	r3, BASEPRI
 80032ea:	603b      	str	r3, [r7, #0]
  return(result);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80032f2:	f06f 0305 	mvn.w	r3, #5
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e00e      	b.n	8003318 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <osKernelStart+0x64>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <osKernelStart+0x64>)
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003308:	f001 fa8a 	bl	8004820 <vTaskStartScheduler>
      stat = osOK;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e002      	b.n	8003318 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003316:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003318:	68fb      	ldr	r3, [r7, #12]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000094 	.word	0x20000094

08003328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b092      	sub	sp, #72	; 0x48
 800332c:	af04      	add	r7, sp, #16
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003338:	f3ef 8305 	mrs	r3, IPSR
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 8094 	bne.w	800346e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	623b      	str	r3, [r7, #32]
  return(result);
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 808d 	bne.w	800346e <osThreadNew+0x146>
 8003354:	4b48      	ldr	r3, [pc, #288]	; (8003478 <osThreadNew+0x150>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d106      	bne.n	800336a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800335c:	f3ef 8311 	mrs	r3, BASEPRI
 8003360:	61fb      	str	r3, [r7, #28]
  return(result);
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 8082 	bne.w	800346e <osThreadNew+0x146>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d07e      	beq.n	800346e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003374:	2318      	movs	r3, #24
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800337c:	f107 031b 	add.w	r3, r7, #27
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d045      	beq.n	800341a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <osThreadNew+0x74>
        name = attr->name;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <osThreadNew+0x9a>
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b38      	cmp	r3, #56	; 0x38
 80033b4:	d805      	bhi.n	80033c2 <osThreadNew+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <osThreadNew+0x9e>
        return (NULL);
 80033c2:	2300      	movs	r3, #0
 80033c4:	e054      	b.n	8003470 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <osThreadNew+0xd4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b5b      	cmp	r3, #91	; 0x5b
 80033e4:	d90a      	bls.n	80033fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <osThreadNew+0xd4>
        mem = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	e010      	b.n	800341e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10c      	bne.n	800341e <osThreadNew+0xf6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d108      	bne.n	800341e <osThreadNew+0xf6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <osThreadNew+0xf6>
          mem = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
 8003418:	e001      	b.n	800341e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2b01      	cmp	r3, #1
 8003422:	d110      	bne.n	8003446 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800342c:	9202      	str	r2, [sp, #8]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f001 f828 	bl	8004490 <xTaskCreateStatic>
 8003440:	4603      	mov	r3, r0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e013      	b.n	800346e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d110      	bne.n	800346e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	b29a      	uxth	r2, r3
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f001 f86f 	bl	8004542 <xTaskCreate>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <osThreadNew+0x146>
          hTask = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800346e:	697b      	ldr	r3, [r7, #20]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3738      	adds	r7, #56	; 0x38
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000094 	.word	0x20000094

0800347c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003484:	f3ef 8305 	mrs	r3, IPSR
 8003488:	613b      	str	r3, [r7, #16]
  return(result);
 800348a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8310 	mrs	r3, PRIMASK
 8003494:	60fb      	str	r3, [r7, #12]
  return(result);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <osDelay+0x34>
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <osDelay+0x58>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d109      	bne.n	80034b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034a4:	f3ef 8311 	mrs	r3, BASEPRI
 80034a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <osDelay+0x3c>
    stat = osErrorISR;
 80034b0:	f06f 0305 	mvn.w	r3, #5
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e007      	b.n	80034c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f001 f978 	bl	80047b8 <vTaskDelay>
    }
  }

  return (stat);
 80034c8:	697b      	ldr	r3, [r7, #20]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000094 	.word	0x20000094

080034d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e8:	f3ef 8305 	mrs	r3, IPSR
 80034ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d170      	bne.n	80035d6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	617b      	str	r3, [r7, #20]
  return(result);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d16a      	bne.n	80035d6 <osMessageQueueNew+0xfe>
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <osMessageQueueNew+0x108>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d105      	bne.n	8003514 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003508:	f3ef 8311 	mrs	r3, BASEPRI
 800350c:	613b      	str	r3, [r7, #16]
  return(result);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d160      	bne.n	80035d6 <osMessageQueueNew+0xfe>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d05d      	beq.n	80035d6 <osMessageQueueNew+0xfe>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05a      	beq.n	80035d6 <osMessageQueueNew+0xfe>
    mem = -1;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003524:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d029      	beq.n	8003580 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <osMessageQueueNew+0x82>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b4f      	cmp	r3, #79	; 0x4f
 800353a:	d90e      	bls.n	800355a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <osMessageQueueNew+0x82>
        mem = 1;
 8003554:	2301      	movs	r3, #1
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	e014      	b.n	8003584 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d110      	bne.n	8003584 <osMessageQueueNew+0xac>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <osMessageQueueNew+0xac>
          mem = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
 800357e:	e001      	b.n	8003584 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10c      	bne.n	80035a4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	2300      	movs	r3, #0
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	460b      	mov	r3, r1
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fa52 	bl	8003a44 <xQueueGenericCreateStatic>
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24
 80035a2:	e008      	b.n	80035b6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80035aa:	2200      	movs	r2, #0
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 faba 	bl	8003b28 <xQueueGenericCreate>
 80035b4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <osMessageQueueNew+0xf2>
        name = attr->name;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e001      	b.n	80035ce <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80035ce:	69f9      	ldr	r1, [r7, #28]
 80035d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035d2:	f000 ff01 	bl	80043d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000094 	.word	0x20000094

080035e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035fc:	f3ef 8305 	mrs	r3, IPSR
 8003600:	61fb      	str	r3, [r7, #28]
  return(result);
 8003602:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003608:	f3ef 8310 	mrs	r3, PRIMASK
 800360c:	61bb      	str	r3, [r7, #24]
  return(result);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <osMessageQueuePut+0x44>
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <osMessageQueuePut+0xe0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d12e      	bne.n	800367a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800361c:	f3ef 8311 	mrs	r3, BASEPRI
 8003620:	617b      	str	r3, [r7, #20]
  return(result);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d028      	beq.n	800367a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <osMessageQueuePut+0x56>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <osMessageQueuePut+0x56>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800363a:	f06f 0303 	mvn.w	r3, #3
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003640:	e039      	b.n	80036b6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003646:	f107 0210 	add.w	r2, r7, #16
 800364a:	2300      	movs	r3, #0
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	6a38      	ldr	r0, [r7, #32]
 8003650:	f000 fbc4 	bl	8003ddc <xQueueGenericSendFromISR>
 8003654:	4603      	mov	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d003      	beq.n	8003662 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800365a:	f06f 0302 	mvn.w	r3, #2
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003660:	e029      	b.n	80036b6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d026      	beq.n	80036b6 <osMessageQueuePut+0xd2>
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <osMessageQueuePut+0xe4>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003678:	e01d      	b.n	80036b6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <osMessageQueuePut+0xa2>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003686:	f06f 0303 	mvn.w	r3, #3
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	e014      	b.n	80036b8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800368e:	2300      	movs	r3, #0
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	6a38      	ldr	r0, [r7, #32]
 8003696:	f000 faa7 	bl	8003be8 <xQueueGenericSend>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00b      	beq.n	80036b8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80036a6:	f06f 0301 	mvn.w	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
 80036ac:	e004      	b.n	80036b8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80036ae:	f06f 0302 	mvn.w	r3, #2
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e000      	b.n	80036b8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80036b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000094 	.word	0x20000094
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e2:	f3ef 8305 	mrs	r3, IPSR
 80036e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80036e8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <osMessageQueueGet+0x42>
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <osMessageQueueGet+0xdc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d12e      	bne.n	8003760 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003702:	f3ef 8311 	mrs	r3, BASEPRI
 8003706:	617b      	str	r3, [r7, #20]
  return(result);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <osMessageQueueGet+0x54>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <osMessageQueueGet+0x54>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003720:	f06f 0303 	mvn.w	r3, #3
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003726:	e038      	b.n	800379a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800372c:	f107 0310 	add.w	r3, r7, #16
 8003730:	461a      	mov	r2, r3
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	6a38      	ldr	r0, [r7, #32]
 8003736:	f000 fcc1 	bl	80040bc <xQueueReceiveFromISR>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d003      	beq.n	8003748 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003740:	f06f 0302 	mvn.w	r3, #2
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003746:	e028      	b.n	800379a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d025      	beq.n	800379a <osMessageQueueGet+0xce>
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <osMessageQueueGet+0xe0>)
 8003750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800375e:	e01c      	b.n	800379a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <osMessageQueueGet+0xa0>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800376c:	f06f 0303 	mvn.w	r3, #3
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	e013      	b.n	800379c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6a38      	ldr	r0, [r7, #32]
 800377a:	f000 fbc3 	bl	8003f04 <xQueueReceive>
 800377e:	4603      	mov	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d00b      	beq.n	800379c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800378a:	f06f 0301 	mvn.w	r3, #1
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	e004      	b.n	800379c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003792:	f06f 0302 	mvn.w	r3, #2
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	e000      	b.n	800379c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800379a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000094 	.word	0x20000094
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <vApplicationGetIdleTaskMemory+0x28>)
 80037c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a05      	ldr	r2, [pc, #20]	; (80037dc <vApplicationGetIdleTaskMemory+0x2c>)
 80037c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20000098 	.word	0x20000098
 80037dc:	200000f4 	.word	0x200000f4

080037e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a07      	ldr	r2, [pc, #28]	; (800380c <vApplicationGetTimerTaskMemory+0x2c>)
 80037f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4a06      	ldr	r2, [pc, #24]	; (8003810 <vApplicationGetTimerTaskMemory+0x30>)
 80037f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200002f4 	.word	0x200002f4
 8003810:	20000350 	.word	0x20000350

08003814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 0208 	add.w	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800382c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f103 0208 	add.w	r2, r3, #8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f103 0208 	add.w	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c6:	d103      	bne.n	80038d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e00c      	b.n	80038ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3308      	adds	r3, #8
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e002      	b.n	80038de <vListInsert+0x2e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d2f6      	bcs.n	80038d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6852      	ldr	r2, [r2, #4]
 8003940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d103      	bne.n	8003954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1e5a      	subs	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
	...

08003974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	e7fe      	b.n	800399a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800399c:	f002 f854 	bl	8005a48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	441a      	add	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	3b01      	subs	r3, #1
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	441a      	add	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	22ff      	movs	r2, #255	; 0xff
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d114      	bne.n	8003a1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01a      	beq.n	8003a30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3310      	adds	r3, #16
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 f992 	bl	8004d28 <xTaskRemoveFromEventList>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <xQueueGenericReset+0xcc>)
 8003a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	e009      	b.n	8003a30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3310      	adds	r3, #16
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fef7 	bl	8003814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fef2 	bl	8003814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a30:	f002 f838 	bl	8005aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a34:	2301      	movs	r3, #1
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08e      	sub	sp, #56	; 0x38
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <xQueueGenericCreateStatic+0x28>
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6a:	e7fe      	b.n	8003a6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <xQueueGenericCreateStatic+0x42>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e7fe      	b.n	8003a84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <xQueueGenericCreateStatic+0x4e>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <xQueueGenericCreateStatic+0x52>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <xQueueGenericCreateStatic+0x54>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <xQueueGenericCreateStatic+0x6c>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	e7fe      	b.n	8003aae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <xQueueGenericCreateStatic+0x78>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <xQueueGenericCreateStatic+0x7c>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <xQueueGenericCreateStatic+0x7e>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <xQueueGenericCreateStatic+0x96>
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ada:	2350      	movs	r3, #80	; 0x50
 8003adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d009      	beq.n	8003af8 <xQueueGenericCreateStatic+0xb4>
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e7fe      	b.n	8003af6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f842 	bl	8003ba2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3730      	adds	r7, #48	; 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <xQueueGenericCreate+0x28>
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e7fe      	b.n	8003b4e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e004      	b.n	8003b66 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 f862 	bl	8005c34 <pvPortMalloc>
 8003b70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	3350      	adds	r3, #80	; 0x50
 8003b7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b86:	79fa      	ldrb	r2, [r7, #7]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f805 	bl	8003ba2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b98:	69bb      	ldr	r3, [r7, #24]
	}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e002      	b.n	8003bc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	69b8      	ldr	r0, [r7, #24]
 8003bd4:	f7ff fece 	bl	8003974 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	; 0x38
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <xQueueGenericSend+0x30>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c16:	e7fe      	b.n	8003c16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSend+0x3e>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <xQueueGenericSend+0x42>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <xQueueGenericSend+0x44>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <xQueueGenericSend+0x5c>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e7fe      	b.n	8003c42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSend+0x6a>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <xQueueGenericSend+0x6e>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <xQueueGenericSend+0x70>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <xQueueGenericSend+0x88>
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c70:	f001 fa14 	bl	800509c <xTaskGetSchedulerState>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <xQueueGenericSend+0x98>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <xQueueGenericSend+0x9c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <xQueueGenericSend+0x9e>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <xQueueGenericSend+0xb6>
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e7fe      	b.n	8003c9c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c9e:	f001 fed3 	bl	8005a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <xQueueGenericSend+0xcc>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d129      	bne.n	8003d08 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cba:	f000 fa7c 	bl	80041b6 <prvCopyDataToQueue>
 8003cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f82b 	bl	8004d28 <xTaskRemoveFromEventList>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d013      	beq.n	8003d00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <xQueueGenericSend+0x1f0>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	e00a      	b.n	8003d00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <xQueueGenericSend+0x1f0>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d00:	f001 fed0 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e063      	b.n	8003dd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d0e:	f001 fec9 	bl	8005aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e05c      	b.n	8003dd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f863 	bl	8004dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d2a:	f001 febb 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d2e:	f000 fddb 	bl	80048e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d32:	f001 fe89 	bl	8005a48 <vPortEnterCritical>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d42:	d103      	bne.n	8003d4c <xQueueGenericSend+0x164>
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSend+0x17a>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d62:	f001 fe9f 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d66:	1d3a      	adds	r2, r7, #4
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f852 	bl	8004e18 <xTaskCheckForTimeOut>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d124      	bne.n	8003dc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7c:	f000 fb13 	bl	80043a6 <prvIsQueueFull>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	3310      	adds	r3, #16
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 ff7c 	bl	8004c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d96:	f000 fa9e 	bl	80042d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d9a:	f000 fdb3 	bl	8004904 <xTaskResumeAll>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f47f af7c 	bne.w	8003c9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <xQueueGenericSend+0x1f0>)
 8003da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	e772      	b.n	8003c9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dba:	f000 fa8c 	bl	80042d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dbe:	f000 fda1 	bl	8004904 <xTaskResumeAll>
 8003dc2:	e76c      	b.n	8003c9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc6:	f000 fa86 	bl	80042d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dca:	f000 fd9b 	bl	8004904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dce:	2300      	movs	r3, #0
		}
	}
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3738      	adds	r7, #56	; 0x38
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <xQueueGenericSendFromISR+0x2c>
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <xQueueGenericSendFromISR+0x3a>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <xQueueGenericSendFromISR+0x3e>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <xQueueGenericSendFromISR+0x40>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <xQueueGenericSendFromISR+0x58>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	e7fe      	b.n	8003e32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d103      	bne.n	8003e42 <xQueueGenericSendFromISR+0x66>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <xQueueGenericSendFromISR+0x6a>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <xQueueGenericSendFromISR+0x6c>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <xQueueGenericSendFromISR+0x84>
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e7fe      	b.n	8003e5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e60:	f001 feac 	bl	8005bbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e64:	f3ef 8211 	mrs	r2, BASEPRI
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	61ba      	str	r2, [r7, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <xQueueGenericSendFromISR+0xb6>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d12c      	bne.n	8003eec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea2:	f000 f988 	bl	80041b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ea6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eae:	d112      	bne.n	8003ed6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d016      	beq.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ff33 	bl	8004d28 <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e007      	b.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eda:	3301      	adds	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	b25a      	sxtb	r2, r3
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003eea:	e001      	b.n	8003ef0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3738      	adds	r7, #56	; 0x38
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <xQueueReceive+0x2e>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	e7fe      	b.n	8003f30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <xQueueReceive+0x3c>
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <xQueueReceive+0x40>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <xQueueReceive+0x42>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <xQueueReceive+0x5a>
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e7fe      	b.n	8003f5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f5e:	f001 f89d 	bl	800509c <xTaskGetSchedulerState>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <xQueueReceive+0x6a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <xQueueReceive+0x6e>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <xQueueReceive+0x70>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <xQueueReceive+0x88>
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e7fe      	b.n	8003f8a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f8c:	f001 fd5c 	bl	8005a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01f      	beq.n	8003fdc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa0:	f000 f973 	bl	800428a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00f      	beq.n	8003fd4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 feb5 	bl	8004d28 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <xQueueReceive+0x1b4>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fd4:	f001 fd66 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e069      	b.n	80040b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fe2:	f001 fd5f 	bl	8005aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e062      	b.n	80040b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fef9 	bl	8004dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ffe:	f001 fd51 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004002:	f000 fc71 	bl	80048e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004006:	f001 fd1f 	bl	8005a48 <vPortEnterCritical>
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004010:	b25b      	sxtb	r3, r3
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004016:	d103      	bne.n	8004020 <xQueueReceive+0x11c>
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004026:	b25b      	sxtb	r3, r3
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402c:	d103      	bne.n	8004036 <xQueueReceive+0x132>
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004036:	f001 fd35 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800403a:	1d3a      	adds	r2, r7, #4
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fee8 	bl	8004e18 <xTaskCheckForTimeOut>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d123      	bne.n	8004096 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800404e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004050:	f000 f993 	bl	800437a <prvIsQueueEmpty>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fe12 	bl	8004c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406a:	f000 f934 	bl	80042d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800406e:	f000 fc49 	bl	8004904 <xTaskResumeAll>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d189      	bne.n	8003f8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <xQueueReceive+0x1b4>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	e780      	b.n	8003f8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800408a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408c:	f000 f923 	bl	80042d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004090:	f000 fc38 	bl	8004904 <xTaskResumeAll>
 8004094:	e77a      	b.n	8003f8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004098:	f000 f91d 	bl	80042d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800409c:	f000 fc32 	bl	8004904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a2:	f000 f96a 	bl	800437a <prvIsQueueEmpty>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f43f af6f 	beq.w	8003f8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3730      	adds	r7, #48	; 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	; 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <xQueueReceiveFromISR+0x2a>
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	e7fe      	b.n	80040e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <xQueueReceiveFromISR+0x38>
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <xQueueReceiveFromISR+0x3c>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <xQueueReceiveFromISR+0x3e>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <xQueueReceiveFromISR+0x56>
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e7fe      	b.n	8004110 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004112:	f001 fd53 	bl	8005bbc <vPortValidateInterruptPriority>
	__asm volatile
 8004116:	f3ef 8211 	mrs	r2, BASEPRI
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	61ba      	str	r2, [r7, #24]
 800412c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800412e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02f      	beq.n	800419e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800414c:	f000 f89d 	bl	800428a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	1e5a      	subs	r2, r3, #1
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004158:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004160:	d112      	bne.n	8004188 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	3310      	adds	r3, #16
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fdda 	bl	8004d28 <xTaskRemoveFromEventList>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00e      	beq.n	8004198 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e007      	b.n	8004198 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800418c:	3301      	adds	r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	b25a      	sxtb	r2, r3
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
 800419c:	e001      	b.n	80041a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3738      	adds	r7, #56	; 0x38
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10d      	bne.n	80041f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d14d      	bne.n	8004278 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ff79 	bl	80050d8 <xTaskPriorityDisinherit>
 80041e6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e043      	b.n	8004278 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d119      	bne.n	800422a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6898      	ldr	r0, [r3, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	461a      	mov	r2, r3
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	f001 ff15 	bl	8006030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	441a      	add	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d32b      	bcc.n	8004278 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	e026      	b.n	8004278 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68d8      	ldr	r0, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	461a      	mov	r2, r3
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	f001 fefb 	bl	8006030 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	425b      	negs	r3, r3
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d207      	bcs.n	8004266 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	425b      	negs	r3, r3
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d105      	bne.n	8004278 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3b01      	subs	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004280:	697b      	ldr	r3, [r7, #20]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d018      	beq.n	80042ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d303      	bcc.n	80042be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	461a      	mov	r2, r3
 80042c8:	6838      	ldr	r0, [r7, #0]
 80042ca:	f001 feb1 	bl	8006030 <memcpy>
	}
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042de:	f001 fbb3 	bl	8005a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ea:	e011      	b.n	8004310 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3324      	adds	r3, #36	; 0x24
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fd15 	bl	8004d28 <xTaskRemoveFromEventList>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004304:	f000 fde8 	bl	8004ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	3b01      	subs	r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dce9      	bgt.n	80042ec <prvUnlockQueue+0x16>
 8004318:	e000      	b.n	800431c <prvUnlockQueue+0x46>
					break;
 800431a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	22ff      	movs	r2, #255	; 0xff
 8004320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004324:	f001 fbbe 	bl	8005aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004328:	f001 fb8e 	bl	8005a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004332:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004334:	e011      	b.n	800435a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d012      	beq.n	8004364 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3310      	adds	r3, #16
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fcf0 	bl	8004d28 <xTaskRemoveFromEventList>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800434e:	f000 fdc3 	bl	8004ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004352:	7bbb      	ldrb	r3, [r7, #14]
 8004354:	3b01      	subs	r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800435a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dce9      	bgt.n	8004336 <prvUnlockQueue+0x60>
 8004362:	e000      	b.n	8004366 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004364:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800436e:	f001 fb99 	bl	8005aa4 <vPortExitCritical>
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004382:	f001 fb61 	bl	8005a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800438e:	2301      	movs	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e001      	b.n	8004398 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004398:	f001 fb84 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 800439c:	68fb      	ldr	r3, [r7, #12]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043ae:	f001 fb4b 	bl	8005a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d102      	bne.n	80043c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043be:	2301      	movs	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e001      	b.n	80043c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043c8:	f001 fb6c 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e014      	b.n	8004412 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043e8:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <vQueueAddToRegistry+0x4c>)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043f4:	490b      	ldr	r1, [pc, #44]	; (8004424 <vQueueAddToRegistry+0x4c>)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <vQueueAddToRegistry+0x4c>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800440a:	e005      	b.n	8004418 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b07      	cmp	r3, #7
 8004416:	d9e7      	bls.n	80043e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20001ab4 	.word	0x20001ab4

08004428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004438:	f001 fb06 	bl	8005a48 <vPortEnterCritical>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004442:	b25b      	sxtb	r3, r3
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004448:	d103      	bne.n	8004452 <vQueueWaitForMessageRestricted+0x2a>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004458:	b25b      	sxtb	r3, r3
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	d103      	bne.n	8004468 <vQueueWaitForMessageRestricted+0x40>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004468:	f001 fb1c 	bl	8005aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3324      	adds	r3, #36	; 0x24
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fc29 	bl	8004cd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff27 	bl	80042d6 <prvUnlockQueue>
	}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	; 0x38
 8004494:	af04      	add	r7, sp, #16
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <xTaskCreateStatic+0x28>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e7fe      	b.n	80044b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <xTaskCreateStatic+0x42>
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	e7fe      	b.n	80044d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d2:	235c      	movs	r3, #92	; 0x5c
 80044d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b5c      	cmp	r3, #92	; 0x5c
 80044da:	d009      	beq.n	80044f0 <xTaskCreateStatic+0x60>
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e7fe      	b.n	80044ee <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01e      	beq.n	8004534 <xTaskCreateStatic+0xa4>
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004504:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800450e:	2300      	movs	r3, #0
 8004510:	9303      	str	r3, [sp, #12]
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	9302      	str	r3, [sp, #8]
 8004516:	f107 0314 	add.w	r3, r7, #20
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f850 	bl	80045cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800452c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800452e:	f000 f8d3 	bl	80046d8 <prvAddNewTaskToReadyList>
 8004532:	e001      	b.n	8004538 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004538:	697b      	ldr	r3, [r7, #20]
	}
 800453a:	4618      	mov	r0, r3
 800453c:	3728      	adds	r7, #40	; 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004542:	b580      	push	{r7, lr}
 8004544:	b08c      	sub	sp, #48	; 0x30
 8004546:	af04      	add	r7, sp, #16
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fb6c 	bl	8005c34 <pvPortMalloc>
 800455c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00e      	beq.n	8004582 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004564:	205c      	movs	r0, #92	; 0x5c
 8004566:	f001 fb65 	bl	8005c34 <pvPortMalloc>
 800456a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
 8004578:	e005      	b.n	8004586 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f001 fc1c 	bl	8005db8 <vPortFree>
 8004580:	e001      	b.n	8004586 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	2300      	movs	r3, #0
 8004598:	9303      	str	r3, [sp, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	9302      	str	r3, [sp, #8]
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f80e 	bl	80045cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b0:	69f8      	ldr	r0, [r7, #28]
 80045b2:	f000 f891 	bl	80046d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e002      	b.n	80045c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045c2:	69bb      	ldr	r3, [r7, #24]
	}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	461a      	mov	r2, r3
 80045e4:	21a5      	movs	r1, #165	; 0xa5
 80045e6:	f001 fd2e 	bl	8006046 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045f4:	3b01      	subs	r3, #1
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <prvInitialiseNewTask+0x56>
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e7fe      	b.n	8004620 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e012      	b.n	800464e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	7819      	ldrb	r1, [r3, #0]
 8004630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	3334      	adds	r3, #52	; 0x34
 8004638:	460a      	mov	r2, r1
 800463a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b0f      	cmp	r3, #15
 8004652:	d9e9      	bls.n	8004628 <prvInitialiseNewTask+0x5c>
 8004654:	e000      	b.n	8004658 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004656:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	2b37      	cmp	r3, #55	; 0x37
 8004664:	d901      	bls.n	800466a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004666:	2337      	movs	r3, #55	; 0x37
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004674:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	2200      	movs	r2, #0
 800467a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f8e6 	bl	8003852 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	3318      	adds	r3, #24
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff f8e1 	bl	8003852 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004694:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	2200      	movs	r2, #0
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	69b8      	ldr	r0, [r7, #24]
 80046ba:	f001 f8d7 	bl	800586c <pxPortInitialiseStack>
 80046be:	4602      	mov	r2, r0
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d0:	bf00      	nop
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046e0:	f001 f9b2 	bl	8005a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <prvAddNewTaskToReadyList+0xc4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a2c      	ldr	r2, [pc, #176]	; (800479c <prvAddNewTaskToReadyList+0xc4>)
 80046ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046ee:	4b2c      	ldr	r3, [pc, #176]	; (80047a0 <prvAddNewTaskToReadyList+0xc8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046f6:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <prvAddNewTaskToReadyList+0xc8>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <prvAddNewTaskToReadyList+0xc4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d110      	bne.n	8004726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004704:	f000 fc0c 	bl	8004f20 <prvInitialiseTaskLists>
 8004708:	e00d      	b.n	8004726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <prvAddNewTaskToReadyList+0xcc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <prvAddNewTaskToReadyList+0xc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	429a      	cmp	r2, r3
 800471e:	d802      	bhi.n	8004726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <prvAddNewTaskToReadyList+0xc8>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <prvAddNewTaskToReadyList+0xd0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3301      	adds	r3, #1
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <prvAddNewTaskToReadyList+0xd0>)
 800472e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <prvAddNewTaskToReadyList+0xd0>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <prvAddNewTaskToReadyList+0xd4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d903      	bls.n	800474c <prvAddNewTaskToReadyList+0x74>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <prvAddNewTaskToReadyList+0xd4>)
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <prvAddNewTaskToReadyList+0xd8>)
 800475a:	441a      	add	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7ff f881 	bl	800386a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004768:	f001 f99c 	bl	8005aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <prvAddNewTaskToReadyList+0xcc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <prvAddNewTaskToReadyList+0xc8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	429a      	cmp	r2, r3
 8004780:	d207      	bcs.n	8004792 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <prvAddNewTaskToReadyList+0xdc>)
 8004784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000c24 	.word	0x20000c24
 80047a0:	20000750 	.word	0x20000750
 80047a4:	20000c30 	.word	0x20000c30
 80047a8:	20000c40 	.word	0x20000c40
 80047ac:	20000c2c 	.word	0x20000c2c
 80047b0:	20000754 	.word	0x20000754
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ca:	4b13      	ldr	r3, [pc, #76]	; (8004818 <vTaskDelay+0x60>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <vTaskDelay+0x2e>
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	e7fe      	b.n	80047e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80047e6:	f000 f87f 	bl	80048e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047ea:	2100      	movs	r1, #0
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fcdf 	bl	80051b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047f2:	f000 f887 	bl	8004904 <xTaskResumeAll>
 80047f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80047fe:	4b07      	ldr	r3, [pc, #28]	; (800481c <vTaskDelay+0x64>)
 8004800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000c4c 	.word	0x20000c4c
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800482e:	463a      	mov	r2, r7
 8004830:	1d39      	adds	r1, r7, #4
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe ffba 	bl	80037b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	9202      	str	r2, [sp, #8]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2300      	movs	r3, #0
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	460a      	mov	r2, r1
 800484e:	4920      	ldr	r1, [pc, #128]	; (80048d0 <vTaskStartScheduler+0xb0>)
 8004850:	4820      	ldr	r0, [pc, #128]	; (80048d4 <vTaskStartScheduler+0xb4>)
 8004852:	f7ff fe1d 	bl	8004490 <xTaskCreateStatic>
 8004856:	4602      	mov	r2, r0
 8004858:	4b1f      	ldr	r3, [pc, #124]	; (80048d8 <vTaskStartScheduler+0xb8>)
 800485a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <vTaskStartScheduler+0xb8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e001      	b.n	800486e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d102      	bne.n	800487a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004874:	f000 fcf0 	bl	8005258 <xTimerCreateTimerTask>
 8004878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d115      	bne.n	80048ac <vTaskStartScheduler+0x8c>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <vTaskStartScheduler+0xbc>)
 8004894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004898:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <vTaskStartScheduler+0xc0>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048a0:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <vTaskStartScheduler+0xc4>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048a6:	f001 f85f 	bl	8005968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048aa:	e00d      	b.n	80048c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b2:	d109      	bne.n	80048c8 <vTaskStartScheduler+0xa8>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e7fe      	b.n	80048c6 <vTaskStartScheduler+0xa6>
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	08006954 	.word	0x08006954
 80048d4:	08004ef1 	.word	0x08004ef1
 80048d8:	20000c48 	.word	0x20000c48
 80048dc:	20000c44 	.word	0x20000c44
 80048e0:	20000c30 	.word	0x20000c30
 80048e4:	20000c28 	.word	0x20000c28

080048e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <vTaskSuspendAll+0x18>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	4a03      	ldr	r2, [pc, #12]	; (8004900 <vTaskSuspendAll+0x18>)
 80048f4:	6013      	str	r3, [r2, #0]
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000c4c 	.word	0x20000c4c

08004904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <xTaskResumeAll+0x114>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <xTaskResumeAll+0x2a>
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	e7fe      	b.n	800492c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800492e:	f001 f88b 	bl	8005a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004932:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <xTaskResumeAll+0x114>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a37      	ldr	r2, [pc, #220]	; (8004a18 <xTaskResumeAll+0x114>)
 800493a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <xTaskResumeAll+0x114>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d162      	bne.n	8004a0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004944:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <xTaskResumeAll+0x118>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05e      	beq.n	8004a0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800494c:	e02f      	b.n	80049ae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800494e:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <xTaskResumeAll+0x11c>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3318      	adds	r3, #24
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe ffe0 	bl	8003920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe ffdb 	bl	8003920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <xTaskResumeAll+0x120>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d903      	bls.n	800497e <xTaskResumeAll+0x7a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <xTaskResumeAll+0x120>)
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <xTaskResumeAll+0x124>)
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe ff68 	bl	800386a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <xTaskResumeAll+0x128>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <xTaskResumeAll+0x12c>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <xTaskResumeAll+0x11c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1cb      	bne.n	800494e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049bc:	f000 fb4a 	bl	8005054 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <xTaskResumeAll+0x130>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049cc:	f000 f844 	bl	8004a58 <xTaskIncrementTick>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <xTaskResumeAll+0x12c>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <xTaskResumeAll+0x130>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <xTaskResumeAll+0x12c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <xTaskResumeAll+0x134>)
 80049fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f001 f84b 	bl	8005aa4 <vPortExitCritical>

	return xAlreadyYielded;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000c4c 	.word	0x20000c4c
 8004a1c:	20000c24 	.word	0x20000c24
 8004a20:	20000be4 	.word	0x20000be4
 8004a24:	20000c2c 	.word	0x20000c2c
 8004a28:	20000754 	.word	0x20000754
 8004a2c:	20000750 	.word	0x20000750
 8004a30:	20000c38 	.word	0x20000c38
 8004a34:	20000c34 	.word	0x20000c34
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <xTaskGetTickCount+0x18>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a48:	687b      	ldr	r3, [r7, #4]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	20000c28 	.word	0x20000c28

08004a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a62:	4b51      	ldr	r3, [pc, #324]	; (8004ba8 <xTaskIncrementTick+0x150>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 808d 	bne.w	8004b86 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <xTaskIncrementTick+0x154>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a74:	4a4d      	ldr	r2, [pc, #308]	; (8004bac <xTaskIncrementTick+0x154>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11f      	bne.n	8004ac0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a80:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <xTaskIncrementTick+0x46>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	e7fe      	b.n	8004a9c <xTaskIncrementTick+0x44>
 8004a9e:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <xTaskIncrementTick+0x15c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a41      	ldr	r2, [pc, #260]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <xTaskIncrementTick+0x15c>)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <xTaskIncrementTick+0x160>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <xTaskIncrementTick+0x160>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	f000 faca 	bl	8005054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ac0:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <xTaskIncrementTick+0x164>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d34e      	bcc.n	8004b68 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aca:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <xTaskIncrementTick+0x80>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <xTaskIncrementTick+0x82>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <xTaskIncrementTick+0x164>)
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae4:	601a      	str	r2, [r3, #0]
					break;
 8004ae6:	e03f      	b.n	8004b68 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ae8:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d203      	bcs.n	8004b08 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b00:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <xTaskIncrementTick+0x164>)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6013      	str	r3, [r2, #0]
						break;
 8004b06:	e02f      	b.n	8004b68 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe ff07 	bl	8003920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fefe 	bl	8003920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <xTaskIncrementTick+0x168>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d903      	bls.n	8004b38 <xTaskIncrementTick+0xe0>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <xTaskIncrementTick+0x168>)
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <xTaskIncrementTick+0x16c>)
 8004b46:	441a      	add	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f7fe fe8b 	bl	800386a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <xTaskIncrementTick+0x170>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3b3      	bcc.n	8004aca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b66:	e7b0      	b.n	8004aca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b68:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <xTaskIncrementTick+0x170>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	4915      	ldr	r1, [pc, #84]	; (8004bc4 <xTaskIncrementTick+0x16c>)
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d907      	bls.n	8004b90 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e004      	b.n	8004b90 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <xTaskIncrementTick+0x174>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <xTaskIncrementTick+0x174>)
 8004b8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <xTaskIncrementTick+0x178>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b9c:	697b      	ldr	r3, [r7, #20]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000c4c 	.word	0x20000c4c
 8004bac:	20000c28 	.word	0x20000c28
 8004bb0:	20000bdc 	.word	0x20000bdc
 8004bb4:	20000be0 	.word	0x20000be0
 8004bb8:	20000c3c 	.word	0x20000c3c
 8004bbc:	20000c44 	.word	0x20000c44
 8004bc0:	20000c2c 	.word	0x20000c2c
 8004bc4:	20000754 	.word	0x20000754
 8004bc8:	20000750 	.word	0x20000750
 8004bcc:	20000c34 	.word	0x20000c34
 8004bd0:	20000c38 	.word	0x20000c38

08004bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bda:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <vTaskSwitchContext+0xa4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004be2:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <vTaskSwitchContext+0xa8>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004be8:	e040      	b.n	8004c6c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <vTaskSwitchContext+0xa8>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004bf0:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <vTaskSwitchContext+0xac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e00f      	b.n	8004c18 <vTaskSwitchContext+0x44>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <vTaskSwitchContext+0x3e>
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	e7fe      	b.n	8004c10 <vTaskSwitchContext+0x3c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	491a      	ldr	r1, [pc, #104]	; (8004c84 <vTaskSwitchContext+0xb0>)
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0e5      	beq.n	8004bf8 <vTaskSwitchContext+0x24>
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <vTaskSwitchContext+0xb0>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d104      	bne.n	8004c5c <vTaskSwitchContext+0x88>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <vTaskSwitchContext+0xb4>)
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <vTaskSwitchContext+0xac>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000c4c 	.word	0x20000c4c
 8004c7c:	20000c38 	.word	0x20000c38
 8004c80:	20000c2c 	.word	0x20000c2c
 8004c84:	20000754 	.word	0x20000754
 8004c88:	20000750 	.word	0x20000750

08004c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <vTaskPlaceOnEventList+0x24>
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e7fe      	b.n	8004cae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <vTaskPlaceOnEventList+0x44>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3318      	adds	r3, #24
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fe fdf9 	bl	80038b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	6838      	ldr	r0, [r7, #0]
 8004cc2:	f000 fa75 	bl	80051b0 <prvAddCurrentTaskToDelayedList>
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000750 	.word	0x20000750

08004cd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <vTaskPlaceOnEventListRestricted+0x26>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e7fe      	b.n	8004cf8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <vTaskPlaceOnEventListRestricted+0x50>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3318      	adds	r3, #24
 8004d00:	4619      	mov	r1, r3
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7fe fdb1 	bl	800386a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	68b8      	ldr	r0, [r7, #8]
 8004d18:	f000 fa4a 	bl	80051b0 <prvAddCurrentTaskToDelayedList>
	}
 8004d1c:	bf00      	nop
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000750 	.word	0x20000750

08004d28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <xTaskRemoveFromEventList+0x2a>
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e7fe      	b.n	8004d50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3318      	adds	r3, #24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fde2 	bl	8003920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <xTaskRemoveFromEventList+0xac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11d      	bne.n	8004da0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fdd9 	bl	8003920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <xTaskRemoveFromEventList+0xb0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d903      	bls.n	8004d82 <xTaskRemoveFromEventList+0x5a>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <xTaskRemoveFromEventList+0xb0>)
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <xTaskRemoveFromEventList+0xb4>)
 8004d90:	441a      	add	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe fd66 	bl	800386a <vListInsertEnd>
 8004d9e:	e005      	b.n	8004dac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3318      	adds	r3, #24
 8004da4:	4619      	mov	r1, r3
 8004da6:	480e      	ldr	r0, [pc, #56]	; (8004de0 <xTaskRemoveFromEventList+0xb8>)
 8004da8:	f7fe fd5f 	bl	800386a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <xTaskRemoveFromEventList+0xbc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d905      	bls.n	8004dc6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <xTaskRemoveFromEventList+0xc0>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e001      	b.n	8004dca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004dca:	697b      	ldr	r3, [r7, #20]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000c4c 	.word	0x20000c4c
 8004dd8:	20000c2c 	.word	0x20000c2c
 8004ddc:	20000754 	.word	0x20000754
 8004de0:	20000be4 	.word	0x20000be4
 8004de4:	20000750 	.word	0x20000750
 8004de8:	20000c38 	.word	0x20000c38

08004dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <vTaskInternalSetTimeOutState+0x24>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <vTaskInternalSetTimeOutState+0x28>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	605a      	str	r2, [r3, #4]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000c3c 	.word	0x20000c3c
 8004e14:	20000c28 	.word	0x20000c28

08004e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d109      	bne.n	8004e3c <xTaskCheckForTimeOut+0x24>
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	e7fe      	b.n	8004e3a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <xTaskCheckForTimeOut+0x3e>
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e7fe      	b.n	8004e54 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004e56:	f000 fdf7 	bl	8005a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <xTaskCheckForTimeOut+0xb8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e72:	d102      	bne.n	8004e7a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	e023      	b.n	8004ec2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <xTaskCheckForTimeOut+0xbc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d007      	beq.n	8004e96 <xTaskCheckForTimeOut+0x7e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e015      	b.n	8004ec2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d20b      	bcs.n	8004eb8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff9d 	bl	8004dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e004      	b.n	8004ec2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f000 fdef 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000c28 	.word	0x20000c28
 8004ed4:	20000c3c 	.word	0x20000c3c

08004ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <vTaskMissedYield+0x14>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000c38 	.word	0x20000c38

08004ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ef8:	f000 f852 	bl	8004fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <prvIdleTask+0x28>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d9f9      	bls.n	8004ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <prvIdleTask+0x2c>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f14:	e7f0      	b.n	8004ef8 <prvIdleTask+0x8>
 8004f16:	bf00      	nop
 8004f18:	20000754 	.word	0x20000754
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e00c      	b.n	8004f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <prvInitialiseTaskLists+0x60>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fc6a 	bl	8003814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3301      	adds	r3, #1
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b37      	cmp	r3, #55	; 0x37
 8004f4a:	d9ef      	bls.n	8004f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f4c:	480d      	ldr	r0, [pc, #52]	; (8004f84 <prvInitialiseTaskLists+0x64>)
 8004f4e:	f7fe fc61 	bl	8003814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f52:	480d      	ldr	r0, [pc, #52]	; (8004f88 <prvInitialiseTaskLists+0x68>)
 8004f54:	f7fe fc5e 	bl	8003814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f58:	480c      	ldr	r0, [pc, #48]	; (8004f8c <prvInitialiseTaskLists+0x6c>)
 8004f5a:	f7fe fc5b 	bl	8003814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f5e:	480c      	ldr	r0, [pc, #48]	; (8004f90 <prvInitialiseTaskLists+0x70>)
 8004f60:	f7fe fc58 	bl	8003814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f64:	480b      	ldr	r0, [pc, #44]	; (8004f94 <prvInitialiseTaskLists+0x74>)
 8004f66:	f7fe fc55 	bl	8003814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <prvInitialiseTaskLists+0x78>)
 8004f6c:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <prvInitialiseTaskLists+0x64>)
 8004f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f70:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <prvInitialiseTaskLists+0x7c>)
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <prvInitialiseTaskLists+0x68>)
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000754 	.word	0x20000754
 8004f84:	20000bb4 	.word	0x20000bb4
 8004f88:	20000bc8 	.word	0x20000bc8
 8004f8c:	20000be4 	.word	0x20000be4
 8004f90:	20000bf8 	.word	0x20000bf8
 8004f94:	20000c10 	.word	0x20000c10
 8004f98:	20000bdc 	.word	0x20000bdc
 8004f9c:	20000be0 	.word	0x20000be0

08004fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fa6:	e019      	b.n	8004fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fa8:	f000 fd4e 	bl	8005a48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <prvCheckTasksWaitingTermination+0x4c>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe fcb1 	bl	8003920 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <prvCheckTasksWaitingTermination+0x50>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <prvCheckTasksWaitingTermination+0x50>)
 8004fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <prvCheckTasksWaitingTermination+0x54>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <prvCheckTasksWaitingTermination+0x54>)
 8004fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fd2:	f000 fd67 	bl	8005aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f80e 	bl	8004ff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <prvCheckTasksWaitingTermination+0x54>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e1      	bne.n	8004fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000bf8 	.word	0x20000bf8
 8004ff0:	20000c24 	.word	0x20000c24
 8004ff4:	20000c0c 	.word	0x20000c0c

08004ff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fed2 	bl	8005db8 <vPortFree>
				vPortFree( pxTCB );
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fecf 	bl	8005db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800501a:	e017      	b.n	800504c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005022:	2b01      	cmp	r3, #1
 8005024:	d103      	bne.n	800502e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fec6 	bl	8005db8 <vPortFree>
	}
 800502c:	e00e      	b.n	800504c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005034:	2b02      	cmp	r3, #2
 8005036:	d009      	beq.n	800504c <prvDeleteTCB+0x54>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e7fe      	b.n	800504a <prvDeleteTCB+0x52>
	}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800505a:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <prvResetNextTaskUnblockTime+0x40>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <prvResetNextTaskUnblockTime+0x14>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <prvResetNextTaskUnblockTime+0x16>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvResetNextTaskUnblockTime+0x44>)
 8005070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005074:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005076:	e008      	b.n	800508a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <prvResetNextTaskUnblockTime+0x40>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a04      	ldr	r2, [pc, #16]	; (8005098 <prvResetNextTaskUnblockTime+0x44>)
 8005088:	6013      	str	r3, [r2, #0]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	20000bdc 	.word	0x20000bdc
 8005098:	20000c44 	.word	0x20000c44

0800509c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <xTaskGetSchedulerState+0x34>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050aa:	2301      	movs	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	e008      	b.n	80050c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b0:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <xTaskGetSchedulerState+0x38>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050b8:	2302      	movs	r3, #2
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	e001      	b.n	80050c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050c2:	687b      	ldr	r3, [r7, #4]
	}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000c30 	.word	0x20000c30
 80050d4:	20000c4c 	.word	0x20000c4c

080050d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d054      	beq.n	8005198 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050ee:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <xTaskPriorityDisinherit+0xcc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d009      	beq.n	800510c <xTaskPriorityDisinherit+0x34>
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e7fe      	b.n	800510a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <xTaskPriorityDisinherit+0x50>
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	e7fe      	b.n	8005126 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	1e5a      	subs	r2, r3, #1
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	429a      	cmp	r2, r3
 800513c:	d02c      	beq.n	8005198 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d128      	bne.n	8005198 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3304      	adds	r3, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fbe8 	bl	8003920 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <xTaskPriorityDisinherit+0xd0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d903      	bls.n	8005178 <xTaskPriorityDisinherit+0xa0>
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <xTaskPriorityDisinherit+0xd0>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a09      	ldr	r2, [pc, #36]	; (80051ac <xTaskPriorityDisinherit+0xd4>)
 8005186:	441a      	add	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe fb6b 	bl	800386a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005198:	697b      	ldr	r3, [r7, #20]
	}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000750 	.word	0x20000750
 80051a8:	20000c2c 	.word	0x20000c2c
 80051ac:	20000754 	.word	0x20000754

080051b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ba:	4b21      	ldr	r3, [pc, #132]	; (8005240 <prvAddCurrentTaskToDelayedList+0x90>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051c0:	4b20      	ldr	r3, [pc, #128]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fbaa 	bl	8003920 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d2:	d10a      	bne.n	80051ea <prvAddCurrentTaskToDelayedList+0x3a>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051da:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4819      	ldr	r0, [pc, #100]	; (8005248 <prvAddCurrentTaskToDelayedList+0x98>)
 80051e4:	f7fe fb41 	bl	800386a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051e8:	e026      	b.n	8005238 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d209      	bcs.n	8005216 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fe fb4e 	bl	80038b0 <vListInsert>
}
 8005214:	e010      	b.n	8005238 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005216:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7fe fb44 	bl	80038b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	d202      	bcs.n	8005238 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005232:	4a08      	ldr	r2, [pc, #32]	; (8005254 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6013      	str	r3, [r2, #0]
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000c28 	.word	0x20000c28
 8005244:	20000750 	.word	0x20000750
 8005248:	20000c10 	.word	0x20000c10
 800524c:	20000be0 	.word	0x20000be0
 8005250:	20000bdc 	.word	0x20000bdc
 8005254:	20000c44 	.word	0x20000c44

08005258 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005262:	f000 fac3 	bl	80057ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <xTimerCreateTimerTask+0x80>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d021      	beq.n	80052b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005276:	1d3a      	adds	r2, r7, #4
 8005278:	f107 0108 	add.w	r1, r7, #8
 800527c:	f107 030c 	add.w	r3, r7, #12
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe faad 	bl	80037e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	9202      	str	r2, [sp, #8]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	2302      	movs	r3, #2
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	460a      	mov	r2, r1
 8005298:	4910      	ldr	r1, [pc, #64]	; (80052dc <xTimerCreateTimerTask+0x84>)
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <xTimerCreateTimerTask+0x88>)
 800529c:	f7ff f8f8 	bl	8004490 <xTaskCreateStatic>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <xTimerCreateTimerTask+0x8c>)
 80052a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <xTimerCreateTimerTask+0x8c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052ae:	2301      	movs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <xTimerCreateTimerTask+0x74>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e7fe      	b.n	80052ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80052cc:	697b      	ldr	r3, [r7, #20]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000c80 	.word	0x20000c80
 80052dc:	0800695c 	.word	0x0800695c
 80052e0:	08005401 	.word	0x08005401
 80052e4:	20000c84 	.word	0x20000c84

080052e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <xTimerGenericCommand+0x2c>
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	e7fe      	b.n	8005312 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <xTimerGenericCommand+0x94>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02a      	beq.n	8005372 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b05      	cmp	r3, #5
 800532c:	dc18      	bgt.n	8005360 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800532e:	f7ff feb5 	bl	800509c <xTaskGetSchedulerState>
 8005332:	4603      	mov	r3, r0
 8005334:	2b02      	cmp	r3, #2
 8005336:	d109      	bne.n	800534c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005338:	4b10      	ldr	r3, [pc, #64]	; (800537c <xTimerGenericCommand+0x94>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	f107 0110 	add.w	r1, r7, #16
 8005340:	2300      	movs	r3, #0
 8005342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005344:	f7fe fc50 	bl	8003be8 <xQueueGenericSend>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24
 800534a:	e012      	b.n	8005372 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <xTimerGenericCommand+0x94>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	f107 0110 	add.w	r1, r7, #16
 8005354:	2300      	movs	r3, #0
 8005356:	2200      	movs	r2, #0
 8005358:	f7fe fc46 	bl	8003be8 <xQueueGenericSend>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24
 800535e:	e008      	b.n	8005372 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <xTimerGenericCommand+0x94>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	f107 0110 	add.w	r1, r7, #16
 8005368:	2300      	movs	r3, #0
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f7fe fd36 	bl	8003ddc <xQueueGenericSendFromISR>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005374:	4618      	mov	r0, r3
 8005376:	3728      	adds	r7, #40	; 0x28
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20000c80 	.word	0x20000c80

08005380 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800538a:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <prvProcessExpiredTimer+0x7c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3304      	adds	r3, #4
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fac1 	bl	8003920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d121      	bne.n	80053ea <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	18d1      	adds	r1, r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	6978      	ldr	r0, [r7, #20]
 80053b4:	f000 f8c8 	bl	8005548 <prvInsertTimerInActiveList>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053be:	2300      	movs	r3, #0
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	2100      	movs	r1, #0
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f7ff ff8d 	bl	80052e8 <xTimerGenericCommand>
 80053ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <prvProcessExpiredTimer+0x6a>
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e7fe      	b.n	80053e8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	4798      	blx	r3
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000c78 	.word	0x20000c78

08005400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005408:	f107 0308 	add.w	r3, r7, #8
 800540c:	4618      	mov	r0, r3
 800540e:	f000 f857 	bl	80054c0 <prvGetNextExpireTime>
 8005412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4619      	mov	r1, r3
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f803 	bl	8005424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800541e:	f000 f8d5 	bl	80055cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005422:	e7f1      	b.n	8005408 <prvTimerTask+0x8>

08005424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800542e:	f7ff fa5b 	bl	80048e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f866 	bl	8005508 <prvSampleTimeNow>
 800543c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d130      	bne.n	80054a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <prvProcessTimerOrBlockTask+0x3c>
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	429a      	cmp	r2, r3
 8005450:	d806      	bhi.n	8005460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005452:	f7ff fa57 	bl	8004904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff91 	bl	8005380 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800545e:	e024      	b.n	80054aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <prvProcessTimerOrBlockTask+0x90>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <prvProcessTimerOrBlockTask+0x94>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	f7fe ffcf 	bl	8004428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800548a:	f7ff fa3b 	bl	8004904 <xTaskResumeAll>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <prvProcessTimerOrBlockTask+0x98>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
}
 80054a4:	e001      	b.n	80054aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054a6:	f7ff fa2d 	bl	8004904 <xTaskResumeAll>
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000c7c 	.word	0x20000c7c
 80054b8:	20000c80 	.word	0x20000c80
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054c8:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <prvGetNextExpireTime+0x44>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <prvGetNextExpireTime+0x44>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e001      	b.n	80054f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000c78 	.word	0x20000c78

08005508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005510:	f7ff fa94 	bl	8004a3c <xTaskGetTickCount>
 8005514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <prvSampleTimeNow+0x3c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	429a      	cmp	r2, r3
 800551e:	d205      	bcs.n	800552c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005520:	f000 f904 	bl	800572c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e002      	b.n	8005532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005532:	4a04      	ldr	r2, [pc, #16]	; (8005544 <prvSampleTimeNow+0x3c>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005538:	68fb      	ldr	r3, [r7, #12]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000c88 	.word	0x20000c88

08005548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	429a      	cmp	r2, r3
 800556c:	d812      	bhi.n	8005594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1ad2      	subs	r2, r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e01b      	b.n	80055ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005582:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <prvInsertTimerInActiveList+0x7c>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fe f98f 	bl	80038b0 <vListInsert>
 8005592:	e012      	b.n	80055ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d206      	bcs.n	80055aa <prvInsertTimerInActiveList+0x62>
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e007      	b.n	80055ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055aa:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <prvInsertTimerInActiveList+0x80>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fe f97b 	bl	80038b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055ba:	697b      	ldr	r3, [r7, #20]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000c7c 	.word	0x20000c7c
 80055c8:	20000c78 	.word	0x20000c78

080055cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08e      	sub	sp, #56	; 0x38
 80055d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055d2:	e099      	b.n	8005708 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da17      	bge.n	800560a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	3304      	adds	r3, #4
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvProcessReceivedCommands+0x2e>
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	e7fe      	b.n	80055f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005600:	6850      	ldr	r0, [r2, #4]
 8005602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005604:	6892      	ldr	r2, [r2, #8]
 8005606:	4611      	mov	r1, r2
 8005608:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db7a      	blt.n	8005706 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	3304      	adds	r3, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe f97d 	bl	8003920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005626:	463b      	mov	r3, r7
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff6d 	bl	8005508 <prvSampleTimeNow>
 800562e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b09      	cmp	r3, #9
 8005634:	d868      	bhi.n	8005708 <prvProcessReceivedCommands+0x13c>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <prvProcessReceivedCommands+0x70>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005665 	.word	0x08005665
 8005640:	08005665 	.word	0x08005665
 8005644:	08005665 	.word	0x08005665
 8005648:	08005709 	.word	0x08005709
 800564c:	080056bf 	.word	0x080056bf
 8005650:	080056f5 	.word	0x080056f5
 8005654:	08005665 	.word	0x08005665
 8005658:	08005665 	.word	0x08005665
 800565c:	08005709 	.word	0x08005709
 8005660:	080056bf 	.word	0x080056bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	18d1      	adds	r1, r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005672:	f7ff ff69 	bl	8005548 <prvInsertTimerInActiveList>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d045      	beq.n	8005708 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005682:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d13d      	bne.n	8005708 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	441a      	add	r2, r3
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2300      	movs	r3, #0
 800569a:	2100      	movs	r1, #0
 800569c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569e:	f7ff fe23 	bl	80052e8 <xTimerGenericCommand>
 80056a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d12e      	bne.n	8005708 <prvProcessReceivedCommands+0x13c>
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e7fe      	b.n	80056bc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <prvProcessReceivedCommands+0x114>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e7fe      	b.n	80056de <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	18d1      	adds	r1, r2, r3
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ee:	f7ff ff2b 	bl	8005548 <prvInsertTimerInActiveList>
					break;
 80056f2:	e009      	b.n	8005708 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80056fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005700:	f000 fb5a 	bl	8005db8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005704:	e000      	b.n	8005708 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005706:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <prvProcessReceivedCommands+0x15c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1d39      	adds	r1, r7, #4
 800570e:	2200      	movs	r2, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fbf7 	bl	8003f04 <xQueueReceive>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	f47f af5b 	bne.w	80055d4 <prvProcessReceivedCommands+0x8>
	}
}
 800571e:	bf00      	nop
 8005720:	3730      	adds	r7, #48	; 0x30
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000c80 	.word	0x20000c80

0800572c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005732:	e044      	b.n	80057be <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005734:	4b2b      	ldr	r3, [pc, #172]	; (80057e4 <prvSwitchTimerLists+0xb8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800573e:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <prvSwitchTimerLists+0xb8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3304      	adds	r3, #4
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe f8e7 	bl	8003920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d12d      	bne.n	80057be <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d90e      	bls.n	8005792 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <prvSwitchTimerLists+0xb8>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f7fe f890 	bl	80038b0 <vListInsert>
 8005790:	e015      	b.n	80057be <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005792:	2300      	movs	r3, #0
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	2300      	movs	r3, #0
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	2100      	movs	r1, #0
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fda3 	bl	80052e8 <xTimerGenericCommand>
 80057a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <prvSwitchTimerLists+0x92>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	e7fe      	b.n	80057bc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <prvSwitchTimerLists+0xb8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1b5      	bne.n	8005734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <prvSwitchTimerLists+0xb8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <prvSwitchTimerLists+0xbc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <prvSwitchTimerLists+0xb8>)
 80057d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057d6:	4a04      	ldr	r2, [pc, #16]	; (80057e8 <prvSwitchTimerLists+0xbc>)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6013      	str	r3, [r2, #0]
}
 80057dc:	bf00      	nop
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000c78 	.word	0x20000c78
 80057e8:	20000c7c 	.word	0x20000c7c

080057ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057f2:	f000 f929 	bl	8005a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <prvCheckForValidListAndQueue+0x60>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d120      	bne.n	8005840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057fe:	4814      	ldr	r0, [pc, #80]	; (8005850 <prvCheckForValidListAndQueue+0x64>)
 8005800:	f7fe f808 	bl	8003814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005804:	4813      	ldr	r0, [pc, #76]	; (8005854 <prvCheckForValidListAndQueue+0x68>)
 8005806:	f7fe f805 	bl	8003814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <prvCheckForValidListAndQueue+0x6c>)
 800580c:	4a10      	ldr	r2, [pc, #64]	; (8005850 <prvCheckForValidListAndQueue+0x64>)
 800580e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005810:	4b12      	ldr	r3, [pc, #72]	; (800585c <prvCheckForValidListAndQueue+0x70>)
 8005812:	4a10      	ldr	r2, [pc, #64]	; (8005854 <prvCheckForValidListAndQueue+0x68>)
 8005814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	4b11      	ldr	r3, [pc, #68]	; (8005860 <prvCheckForValidListAndQueue+0x74>)
 800581c:	4a11      	ldr	r2, [pc, #68]	; (8005864 <prvCheckForValidListAndQueue+0x78>)
 800581e:	2110      	movs	r1, #16
 8005820:	200a      	movs	r0, #10
 8005822:	f7fe f90f 	bl	8003a44 <xQueueGenericCreateStatic>
 8005826:	4602      	mov	r2, r0
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <prvCheckForValidListAndQueue+0x60>)
 800582a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800582c:	4b07      	ldr	r3, [pc, #28]	; (800584c <prvCheckForValidListAndQueue+0x60>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <prvCheckForValidListAndQueue+0x60>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	490b      	ldr	r1, [pc, #44]	; (8005868 <prvCheckForValidListAndQueue+0x7c>)
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fdcc 	bl	80043d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005840:	f000 f930 	bl	8005aa4 <vPortExitCritical>
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000c80 	.word	0x20000c80
 8005850:	20000c50 	.word	0x20000c50
 8005854:	20000c64 	.word	0x20000c64
 8005858:	20000c78 	.word	0x20000c78
 800585c:	20000c7c 	.word	0x20000c7c
 8005860:	20000d2c 	.word	0x20000d2c
 8005864:	20000c8c 	.word	0x20000c8c
 8005868:	08006964 	.word	0x08006964

0800586c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b04      	subs	r3, #4
 800587c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b04      	subs	r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b04      	subs	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <pxPortInitialiseStack+0x54>)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b14      	subs	r3, #20
 80058a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3b20      	subs	r3, #32
 80058b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr
 80058c0:	080058c5 	.word	0x080058c5

080058c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <prvTaskExitError+0x4c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d6:	d009      	beq.n	80058ec <prvTaskExitError+0x28>
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e7fe      	b.n	80058ea <prvTaskExitError+0x26>
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058fe:	bf00      	nop
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0fc      	beq.n	8005900 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr
 8005910:	2000000c 	.word	0x2000000c
	...

08005920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <pxCurrentTCBConst2>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800592a:	f380 8809 	msr	PSP, r0
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	f04e 0e0d 	orr.w	lr, lr, #13
 800593e:	4770      	bx	lr

08005940 <pxCurrentTCBConst2>:
 8005940:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005948:	4806      	ldr	r0, [pc, #24]	; (8005964 <prvPortStartFirstTask+0x1c>)
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f380 8808 	msr	MSP, r0
 8005952:	b662      	cpsie	i
 8005954:	b661      	cpsie	f
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	df00      	svc	0
 8005960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005962:	bf00      	nop
 8005964:	e000ed08 	.word	0xe000ed08

08005968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <xPortStartScheduler+0xcc>)
 8005970:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	22ff      	movs	r2, #255	; 0xff
 800597e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005990:	b2da      	uxtb	r2, r3
 8005992:	4b29      	ldr	r3, [pc, #164]	; (8005a38 <xPortStartScheduler+0xd0>)
 8005994:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <xPortStartScheduler+0xd4>)
 8005998:	2207      	movs	r2, #7
 800599a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800599c:	e009      	b.n	80059b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800599e:	4b27      	ldr	r3, [pc, #156]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	d0ef      	beq.n	800599e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059be:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1c3 0307 	rsb	r3, r3, #7
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d009      	beq.n	80059de <xPortStartScheduler+0x76>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	e7fe      	b.n	80059dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059de:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f0:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <xPortStartScheduler+0xd4>)
 80059f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <xPortStartScheduler+0xd8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <xPortStartScheduler+0xd8>)
 8005a02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <xPortStartScheduler+0xd8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <xPortStartScheduler+0xd8>)
 8005a0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a14:	f000 f8b0 	bl	8005b78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <xPortStartScheduler+0xdc>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a1e:	f7ff ff93 	bl	8005948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a22:	f7ff f8d7 	bl	8004bd4 <vTaskSwitchContext>
	prvTaskExitError();
 8005a26:	f7ff ff4d 	bl	80058c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000e400 	.word	0xe000e400
 8005a38:	20000d7c 	.word	0x20000d7c
 8005a3c:	20000d80 	.word	0x20000d80
 8005a40:	e000ed20 	.word	0xe000ed20
 8005a44:	2000000c 	.word	0x2000000c

08005a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a60:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <vPortEnterCritical+0x54>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <vPortEnterCritical+0x54>)
 8005a68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <vPortEnterCritical+0x54>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10e      	bne.n	8005a90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <vPortEnterCritical+0x58>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <vPortEnterCritical+0x48>
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	e7fe      	b.n	8005a8e <vPortEnterCritical+0x46>
	}
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aaa:	4b10      	ldr	r3, [pc, #64]	; (8005aec <vPortExitCritical+0x48>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <vPortExitCritical+0x22>
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
 8005ac4:	e7fe      	b.n	8005ac4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <vPortExitCritical+0x48>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	4a07      	ldr	r2, [pc, #28]	; (8005aec <vPortExitCritical+0x48>)
 8005ace:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <vPortExitCritical+0x48>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <vPortExitCritical+0x3e>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr
 8005aec:	2000000c 	.word	0x2000000c

08005af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005af0:	f3ef 8009 	mrs	r0, PSP
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <pxCurrentTCBConst>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b00:	6010      	str	r0, [r2, #0]
 8005b02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b0a:	f380 8811 	msr	BASEPRI, r0
 8005b0e:	f7ff f861 	bl	8004bd4 <vTaskSwitchContext>
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8811 	msr	BASEPRI, r0
 8005b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b26:	f380 8809 	msr	PSP, r0
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	4770      	bx	lr

08005b30 <pxCurrentTCBConst>:
 8005b30:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b50:	f7fe ff82 	bl	8004a58 <xTaskIncrementTick>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <SysTick_Handler+0x3c>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <vPortSetupTimerInterrupt+0x30>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <vPortSetupTimerInterrupt+0x34>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b88:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <vPortSetupTimerInterrupt+0x38>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <vPortSetupTimerInterrupt+0x3c>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	099b      	lsrs	r3, r3, #6
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <vPortSetupTimerInterrupt+0x40>)
 8005b96:	3b01      	subs	r3, #1
 8005b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b9a:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <vPortSetupTimerInterrupt+0x30>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	e000e010 	.word	0xe000e010
 8005bac:	e000e018 	.word	0xe000e018
 8005bb0:	20000000 	.word	0x20000000
 8005bb4:	10624dd3 	.word	0x10624dd3
 8005bb8:	e000e014 	.word	0xe000e014

08005bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bc2:	f3ef 8305 	mrs	r3, IPSR
 8005bc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b0f      	cmp	r3, #15
 8005bcc:	d913      	bls.n	8005bf6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bce:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <vPortValidateInterruptPriority+0x68>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <vPortValidateInterruptPriority+0x6c>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	7afa      	ldrb	r2, [r7, #11]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d209      	bcs.n	8005bf6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	e7fe      	b.n	8005bf4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <vPortValidateInterruptPriority+0x70>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <vPortValidateInterruptPriority+0x74>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d909      	bls.n	8005c1a <vPortValidateInterruptPriority+0x5e>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	e7fe      	b.n	8005c18 <vPortValidateInterruptPriority+0x5c>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	e000e3f0 	.word	0xe000e3f0
 8005c28:	20000d7c 	.word	0x20000d7c
 8005c2c:	e000ed0c 	.word	0xe000ed0c
 8005c30:	20000d80 	.word	0x20000d80

08005c34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c40:	f7fe fe52 	bl	80048e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c44:	4b57      	ldr	r3, [pc, #348]	; (8005da4 <pvPortMalloc+0x170>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c4c:	f000 f90c 	bl	8005e68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c50:	4b55      	ldr	r3, [pc, #340]	; (8005da8 <pvPortMalloc+0x174>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 808c 	bne.w	8005d76 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01c      	beq.n	8005c9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c64:	2208      	movs	r2, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d013      	beq.n	8005c9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <pvPortMalloc+0x6a>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e7fe      	b.n	8005c9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d068      	beq.n	8005d76 <pvPortMalloc+0x142>
 8005ca4:	4b41      	ldr	r3, [pc, #260]	; (8005dac <pvPortMalloc+0x178>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d863      	bhi.n	8005d76 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <pvPortMalloc+0x17c>)
 8005cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <pvPortMalloc+0x17c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cb8:	e004      	b.n	8005cc4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d903      	bls.n	8005cd6 <pvPortMalloc+0xa2>
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f1      	bne.n	8005cba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cd6:	4b33      	ldr	r3, [pc, #204]	; (8005da4 <pvPortMalloc+0x170>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d04a      	beq.n	8005d76 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	4413      	add	r3, r2
 8005ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d91e      	bls.n	8005d40 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4413      	add	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d009      	beq.n	8005d28 <pvPortMalloc+0xf4>
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	e7fe      	b.n	8005d26 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d3a:	69b8      	ldr	r0, [r7, #24]
 8005d3c:	f000 f8f6 	bl	8005f2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d40:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <pvPortMalloc+0x178>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	4a18      	ldr	r2, [pc, #96]	; (8005dac <pvPortMalloc+0x178>)
 8005d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <pvPortMalloc+0x178>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <pvPortMalloc+0x180>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d203      	bcs.n	8005d62 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <pvPortMalloc+0x178>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <pvPortMalloc+0x180>)
 8005d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <pvPortMalloc+0x174>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d76:	f7fe fdc5 	bl	8004904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <pvPortMalloc+0x164>
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e7fe      	b.n	8005d96 <pvPortMalloc+0x162>
	return pvReturn;
 8005d98:	69fb      	ldr	r3, [r7, #28]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3728      	adds	r7, #40	; 0x28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	2000198c 	.word	0x2000198c
 8005da8:	20001998 	.word	0x20001998
 8005dac:	20001990 	.word	0x20001990
 8005db0:	20001984 	.word	0x20001984
 8005db4:	20001994 	.word	0x20001994

08005db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d046      	beq.n	8005e58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dca:	2308      	movs	r3, #8
 8005dcc:	425b      	negs	r3, r3
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <vPortFree+0xa8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <vPortFree+0x42>
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e7fe      	b.n	8005df8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <vPortFree+0x5e>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60bb      	str	r3, [r7, #8]
 8005e14:	e7fe      	b.n	8005e14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <vPortFree+0xa8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <vPortFree+0xa8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e3c:	f7fe fd54 	bl	80048e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <vPortFree+0xac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4413      	add	r3, r2
 8005e4a:	4a06      	ldr	r2, [pc, #24]	; (8005e64 <vPortFree+0xac>)
 8005e4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e4e:	6938      	ldr	r0, [r7, #16]
 8005e50:	f000 f86c 	bl	8005f2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e54:	f7fe fd56 	bl	8004904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e58:	bf00      	nop
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20001998 	.word	0x20001998
 8005e64:	20001990 	.word	0x20001990

08005e68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <prvHeapInit+0xac>)
 8005e76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3307      	adds	r3, #7
 8005e86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	4a1f      	ldr	r2, [pc, #124]	; (8005f14 <prvHeapInit+0xac>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <prvHeapInit+0xb0>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <prvHeapInit+0xb0>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0307 	bic.w	r3, r3, #7
 8005ec2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <prvHeapInit+0xb4>)
 8005ec8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <prvHeapInit+0xb4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <prvHeapInit+0xb4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <prvHeapInit+0xb4>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <prvHeapInit+0xb8>)
 8005ef6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a09      	ldr	r2, [pc, #36]	; (8005f24 <prvHeapInit+0xbc>)
 8005efe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <prvHeapInit+0xc0>)
 8005f02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000d84 	.word	0x20000d84
 8005f18:	20001984 	.word	0x20001984
 8005f1c:	2000198c 	.word	0x2000198c
 8005f20:	20001994 	.word	0x20001994
 8005f24:	20001990 	.word	0x20001990
 8005f28:	20001998 	.word	0x20001998

08005f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <prvInsertBlockIntoFreeList+0xa8>)
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e002      	b.n	8005f40 <prvInsertBlockIntoFreeList+0x14>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d8f7      	bhi.n	8005f3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d108      	bne.n	8005f6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	441a      	add	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d118      	bne.n	8005fb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <prvInsertBlockIntoFreeList+0xac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d00d      	beq.n	8005faa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e008      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <prvInsertBlockIntoFreeList+0xac>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e003      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d002      	beq.n	8005fca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	20001984 	.word	0x20001984
 8005fd8:	2000198c 	.word	0x2000198c

08005fdc <__errno>:
 8005fdc:	4b01      	ldr	r3, [pc, #4]	; (8005fe4 <__errno+0x8>)
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000010 	.word	0x20000010

08005fe8 <__libc_init_array>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	2500      	movs	r5, #0
 8005fec:	4e0c      	ldr	r6, [pc, #48]	; (8006020 <__libc_init_array+0x38>)
 8005fee:	4c0d      	ldr	r4, [pc, #52]	; (8006024 <__libc_init_array+0x3c>)
 8005ff0:	1ba4      	subs	r4, r4, r6
 8005ff2:	10a4      	asrs	r4, r4, #2
 8005ff4:	42a5      	cmp	r5, r4
 8005ff6:	d109      	bne.n	800600c <__libc_init_array+0x24>
 8005ff8:	f000 fc3e 	bl	8006878 <_init>
 8005ffc:	2500      	movs	r5, #0
 8005ffe:	4e0a      	ldr	r6, [pc, #40]	; (8006028 <__libc_init_array+0x40>)
 8006000:	4c0a      	ldr	r4, [pc, #40]	; (800602c <__libc_init_array+0x44>)
 8006002:	1ba4      	subs	r4, r4, r6
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	42a5      	cmp	r5, r4
 8006008:	d105      	bne.n	8006016 <__libc_init_array+0x2e>
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006010:	4798      	blx	r3
 8006012:	3501      	adds	r5, #1
 8006014:	e7ee      	b.n	8005ff4 <__libc_init_array+0xc>
 8006016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800601a:	4798      	blx	r3
 800601c:	3501      	adds	r5, #1
 800601e:	e7f2      	b.n	8006006 <__libc_init_array+0x1e>
 8006020:	08006a6c 	.word	0x08006a6c
 8006024:	08006a6c 	.word	0x08006a6c
 8006028:	08006a6c 	.word	0x08006a6c
 800602c:	08006a70 	.word	0x08006a70

08006030 <memcpy>:
 8006030:	b510      	push	{r4, lr}
 8006032:	1e43      	subs	r3, r0, #1
 8006034:	440a      	add	r2, r1
 8006036:	4291      	cmp	r1, r2
 8006038:	d100      	bne.n	800603c <memcpy+0xc>
 800603a:	bd10      	pop	{r4, pc}
 800603c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006044:	e7f7      	b.n	8006036 <memcpy+0x6>

08006046 <memset>:
 8006046:	4603      	mov	r3, r0
 8006048:	4402      	add	r2, r0
 800604a:	4293      	cmp	r3, r2
 800604c:	d100      	bne.n	8006050 <memset+0xa>
 800604e:	4770      	bx	lr
 8006050:	f803 1b01 	strb.w	r1, [r3], #1
 8006054:	e7f9      	b.n	800604a <memset+0x4>
	...

08006058 <siprintf>:
 8006058:	b40e      	push	{r1, r2, r3}
 800605a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800605e:	b500      	push	{lr}
 8006060:	b09c      	sub	sp, #112	; 0x70
 8006062:	ab1d      	add	r3, sp, #116	; 0x74
 8006064:	9002      	str	r0, [sp, #8]
 8006066:	9006      	str	r0, [sp, #24]
 8006068:	9107      	str	r1, [sp, #28]
 800606a:	9104      	str	r1, [sp, #16]
 800606c:	4808      	ldr	r0, [pc, #32]	; (8006090 <siprintf+0x38>)
 800606e:	4909      	ldr	r1, [pc, #36]	; (8006094 <siprintf+0x3c>)
 8006070:	f853 2b04 	ldr.w	r2, [r3], #4
 8006074:	9105      	str	r1, [sp, #20]
 8006076:	6800      	ldr	r0, [r0, #0]
 8006078:	a902      	add	r1, sp, #8
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	f000 f86e 	bl	800615c <_svfiprintf_r>
 8006080:	2200      	movs	r2, #0
 8006082:	9b02      	ldr	r3, [sp, #8]
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	b01c      	add	sp, #112	; 0x70
 8006088:	f85d eb04 	ldr.w	lr, [sp], #4
 800608c:	b003      	add	sp, #12
 800608e:	4770      	bx	lr
 8006090:	20000010 	.word	0x20000010
 8006094:	ffff0208 	.word	0xffff0208

08006098 <strcpy>:
 8006098:	4603      	mov	r3, r0
 800609a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800609e:	f803 2b01 	strb.w	r2, [r3], #1
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	d1f9      	bne.n	800609a <strcpy+0x2>
 80060a6:	4770      	bx	lr

080060a8 <__ssputs_r>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	688e      	ldr	r6, [r1, #8]
 80060ae:	4682      	mov	sl, r0
 80060b0:	429e      	cmp	r6, r3
 80060b2:	460c      	mov	r4, r1
 80060b4:	4690      	mov	r8, r2
 80060b6:	4699      	mov	r9, r3
 80060b8:	d837      	bhi.n	800612a <__ssputs_r+0x82>
 80060ba:	898a      	ldrh	r2, [r1, #12]
 80060bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060c0:	d031      	beq.n	8006126 <__ssputs_r+0x7e>
 80060c2:	2302      	movs	r3, #2
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	6909      	ldr	r1, [r1, #16]
 80060c8:	1a6f      	subs	r7, r5, r1
 80060ca:	6965      	ldr	r5, [r4, #20]
 80060cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80060d4:	f109 0301 	add.w	r3, r9, #1
 80060d8:	443b      	add	r3, r7
 80060da:	429d      	cmp	r5, r3
 80060dc:	bf38      	it	cc
 80060de:	461d      	movcc	r5, r3
 80060e0:	0553      	lsls	r3, r2, #21
 80060e2:	d530      	bpl.n	8006146 <__ssputs_r+0x9e>
 80060e4:	4629      	mov	r1, r5
 80060e6:	f000 fb2d 	bl	8006744 <_malloc_r>
 80060ea:	4606      	mov	r6, r0
 80060ec:	b950      	cbnz	r0, 8006104 <__ssputs_r+0x5c>
 80060ee:	230c      	movs	r3, #12
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060f4:	f8ca 3000 	str.w	r3, [sl]
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	463a      	mov	r2, r7
 8006106:	6921      	ldr	r1, [r4, #16]
 8006108:	f7ff ff92 	bl	8006030 <memcpy>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	6126      	str	r6, [r4, #16]
 800611a:	443e      	add	r6, r7
 800611c:	6026      	str	r6, [r4, #0]
 800611e:	464e      	mov	r6, r9
 8006120:	6165      	str	r5, [r4, #20]
 8006122:	1bed      	subs	r5, r5, r7
 8006124:	60a5      	str	r5, [r4, #8]
 8006126:	454e      	cmp	r6, r9
 8006128:	d900      	bls.n	800612c <__ssputs_r+0x84>
 800612a:	464e      	mov	r6, r9
 800612c:	4632      	mov	r2, r6
 800612e:	4641      	mov	r1, r8
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	f000 faa1 	bl	8006678 <memmove>
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	2000      	movs	r0, #0
 800613a:	1b9b      	subs	r3, r3, r6
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	441e      	add	r6, r3
 8006142:	6026      	str	r6, [r4, #0]
 8006144:	e7dc      	b.n	8006100 <__ssputs_r+0x58>
 8006146:	462a      	mov	r2, r5
 8006148:	f000 fb56 	bl	80067f8 <_realloc_r>
 800614c:	4606      	mov	r6, r0
 800614e:	2800      	cmp	r0, #0
 8006150:	d1e2      	bne.n	8006118 <__ssputs_r+0x70>
 8006152:	6921      	ldr	r1, [r4, #16]
 8006154:	4650      	mov	r0, sl
 8006156:	f000 faa9 	bl	80066ac <_free_r>
 800615a:	e7c8      	b.n	80060ee <__ssputs_r+0x46>

0800615c <_svfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	461d      	mov	r5, r3
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	b09d      	sub	sp, #116	; 0x74
 8006166:	061f      	lsls	r7, r3, #24
 8006168:	4680      	mov	r8, r0
 800616a:	460c      	mov	r4, r1
 800616c:	4616      	mov	r6, r2
 800616e:	d50f      	bpl.n	8006190 <_svfiprintf_r+0x34>
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b96b      	cbnz	r3, 8006190 <_svfiprintf_r+0x34>
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	f000 fae5 	bl	8006744 <_malloc_r>
 800617a:	6020      	str	r0, [r4, #0]
 800617c:	6120      	str	r0, [r4, #16]
 800617e:	b928      	cbnz	r0, 800618c <_svfiprintf_r+0x30>
 8006180:	230c      	movs	r3, #12
 8006182:	f8c8 3000 	str.w	r3, [r8]
 8006186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800618a:	e0c8      	b.n	800631e <_svfiprintf_r+0x1c2>
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	6163      	str	r3, [r4, #20]
 8006190:	2300      	movs	r3, #0
 8006192:	9309      	str	r3, [sp, #36]	; 0x24
 8006194:	2320      	movs	r3, #32
 8006196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800619a:	2330      	movs	r3, #48	; 0x30
 800619c:	f04f 0b01 	mov.w	fp, #1
 80061a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a4:	9503      	str	r5, [sp, #12]
 80061a6:	4637      	mov	r7, r6
 80061a8:	463d      	mov	r5, r7
 80061aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061ae:	b10b      	cbz	r3, 80061b4 <_svfiprintf_r+0x58>
 80061b0:	2b25      	cmp	r3, #37	; 0x25
 80061b2:	d13e      	bne.n	8006232 <_svfiprintf_r+0xd6>
 80061b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80061b8:	d00b      	beq.n	80061d2 <_svfiprintf_r+0x76>
 80061ba:	4653      	mov	r3, sl
 80061bc:	4632      	mov	r2, r6
 80061be:	4621      	mov	r1, r4
 80061c0:	4640      	mov	r0, r8
 80061c2:	f7ff ff71 	bl	80060a8 <__ssputs_r>
 80061c6:	3001      	adds	r0, #1
 80061c8:	f000 80a4 	beq.w	8006314 <_svfiprintf_r+0x1b8>
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	4453      	add	r3, sl
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	783b      	ldrb	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 809d 	beq.w	8006314 <_svfiprintf_r+0x1b8>
 80061da:	2300      	movs	r3, #0
 80061dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ec:	931a      	str	r3, [sp, #104]	; 0x68
 80061ee:	462f      	mov	r7, r5
 80061f0:	2205      	movs	r2, #5
 80061f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80061f6:	4850      	ldr	r0, [pc, #320]	; (8006338 <_svfiprintf_r+0x1dc>)
 80061f8:	f000 fa30 	bl	800665c <memchr>
 80061fc:	9b04      	ldr	r3, [sp, #16]
 80061fe:	b9d0      	cbnz	r0, 8006236 <_svfiprintf_r+0xda>
 8006200:	06d9      	lsls	r1, r3, #27
 8006202:	bf44      	itt	mi
 8006204:	2220      	movmi	r2, #32
 8006206:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800620a:	071a      	lsls	r2, r3, #28
 800620c:	bf44      	itt	mi
 800620e:	222b      	movmi	r2, #43	; 0x2b
 8006210:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006214:	782a      	ldrb	r2, [r5, #0]
 8006216:	2a2a      	cmp	r2, #42	; 0x2a
 8006218:	d015      	beq.n	8006246 <_svfiprintf_r+0xea>
 800621a:	462f      	mov	r7, r5
 800621c:	2000      	movs	r0, #0
 800621e:	250a      	movs	r5, #10
 8006220:	9a07      	ldr	r2, [sp, #28]
 8006222:	4639      	mov	r1, r7
 8006224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006228:	3b30      	subs	r3, #48	; 0x30
 800622a:	2b09      	cmp	r3, #9
 800622c:	d94d      	bls.n	80062ca <_svfiprintf_r+0x16e>
 800622e:	b1b8      	cbz	r0, 8006260 <_svfiprintf_r+0x104>
 8006230:	e00f      	b.n	8006252 <_svfiprintf_r+0xf6>
 8006232:	462f      	mov	r7, r5
 8006234:	e7b8      	b.n	80061a8 <_svfiprintf_r+0x4c>
 8006236:	4a40      	ldr	r2, [pc, #256]	; (8006338 <_svfiprintf_r+0x1dc>)
 8006238:	463d      	mov	r5, r7
 800623a:	1a80      	subs	r0, r0, r2
 800623c:	fa0b f000 	lsl.w	r0, fp, r0
 8006240:	4318      	orrs	r0, r3
 8006242:	9004      	str	r0, [sp, #16]
 8006244:	e7d3      	b.n	80061ee <_svfiprintf_r+0x92>
 8006246:	9a03      	ldr	r2, [sp, #12]
 8006248:	1d11      	adds	r1, r2, #4
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	9103      	str	r1, [sp, #12]
 800624e:	2a00      	cmp	r2, #0
 8006250:	db01      	blt.n	8006256 <_svfiprintf_r+0xfa>
 8006252:	9207      	str	r2, [sp, #28]
 8006254:	e004      	b.n	8006260 <_svfiprintf_r+0x104>
 8006256:	4252      	negs	r2, r2
 8006258:	f043 0302 	orr.w	r3, r3, #2
 800625c:	9207      	str	r2, [sp, #28]
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	783b      	ldrb	r3, [r7, #0]
 8006262:	2b2e      	cmp	r3, #46	; 0x2e
 8006264:	d10c      	bne.n	8006280 <_svfiprintf_r+0x124>
 8006266:	787b      	ldrb	r3, [r7, #1]
 8006268:	2b2a      	cmp	r3, #42	; 0x2a
 800626a:	d133      	bne.n	80062d4 <_svfiprintf_r+0x178>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	3702      	adds	r7, #2
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	9203      	str	r2, [sp, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	4d2e      	ldr	r5, [pc, #184]	; (800633c <_svfiprintf_r+0x1e0>)
 8006282:	2203      	movs	r2, #3
 8006284:	7839      	ldrb	r1, [r7, #0]
 8006286:	4628      	mov	r0, r5
 8006288:	f000 f9e8 	bl	800665c <memchr>
 800628c:	b138      	cbz	r0, 800629e <_svfiprintf_r+0x142>
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	1b40      	subs	r0, r0, r5
 8006292:	fa03 f000 	lsl.w	r0, r3, r0
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	3701      	adds	r7, #1
 800629a:	4303      	orrs	r3, r0
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	7839      	ldrb	r1, [r7, #0]
 80062a0:	2206      	movs	r2, #6
 80062a2:	4827      	ldr	r0, [pc, #156]	; (8006340 <_svfiprintf_r+0x1e4>)
 80062a4:	1c7e      	adds	r6, r7, #1
 80062a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062aa:	f000 f9d7 	bl	800665c <memchr>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d038      	beq.n	8006324 <_svfiprintf_r+0x1c8>
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <_svfiprintf_r+0x1e8>)
 80062b4:	bb13      	cbnz	r3, 80062fc <_svfiprintf_r+0x1a0>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	3307      	adds	r3, #7
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	3308      	adds	r3, #8
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c4:	444b      	add	r3, r9
 80062c6:	9309      	str	r3, [sp, #36]	; 0x24
 80062c8:	e76d      	b.n	80061a6 <_svfiprintf_r+0x4a>
 80062ca:	fb05 3202 	mla	r2, r5, r2, r3
 80062ce:	2001      	movs	r0, #1
 80062d0:	460f      	mov	r7, r1
 80062d2:	e7a6      	b.n	8006222 <_svfiprintf_r+0xc6>
 80062d4:	2300      	movs	r3, #0
 80062d6:	250a      	movs	r5, #10
 80062d8:	4619      	mov	r1, r3
 80062da:	3701      	adds	r7, #1
 80062dc:	9305      	str	r3, [sp, #20]
 80062de:	4638      	mov	r0, r7
 80062e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e4:	3a30      	subs	r2, #48	; 0x30
 80062e6:	2a09      	cmp	r2, #9
 80062e8:	d903      	bls.n	80062f2 <_svfiprintf_r+0x196>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0c8      	beq.n	8006280 <_svfiprintf_r+0x124>
 80062ee:	9105      	str	r1, [sp, #20]
 80062f0:	e7c6      	b.n	8006280 <_svfiprintf_r+0x124>
 80062f2:	fb05 2101 	mla	r1, r5, r1, r2
 80062f6:	2301      	movs	r3, #1
 80062f8:	4607      	mov	r7, r0
 80062fa:	e7f0      	b.n	80062de <_svfiprintf_r+0x182>
 80062fc:	ab03      	add	r3, sp, #12
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	4622      	mov	r2, r4
 8006302:	4b11      	ldr	r3, [pc, #68]	; (8006348 <_svfiprintf_r+0x1ec>)
 8006304:	a904      	add	r1, sp, #16
 8006306:	4640      	mov	r0, r8
 8006308:	f3af 8000 	nop.w
 800630c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006310:	4681      	mov	r9, r0
 8006312:	d1d6      	bne.n	80062c2 <_svfiprintf_r+0x166>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	065b      	lsls	r3, r3, #25
 8006318:	f53f af35 	bmi.w	8006186 <_svfiprintf_r+0x2a>
 800631c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800631e:	b01d      	add	sp, #116	; 0x74
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	ab03      	add	r3, sp, #12
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4622      	mov	r2, r4
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <_svfiprintf_r+0x1ec>)
 800632c:	a904      	add	r1, sp, #16
 800632e:	4640      	mov	r0, r8
 8006330:	f000 f882 	bl	8006438 <_printf_i>
 8006334:	e7ea      	b.n	800630c <_svfiprintf_r+0x1b0>
 8006336:	bf00      	nop
 8006338:	08006a38 	.word	0x08006a38
 800633c:	08006a3e 	.word	0x08006a3e
 8006340:	08006a42 	.word	0x08006a42
 8006344:	00000000 	.word	0x00000000
 8006348:	080060a9 	.word	0x080060a9

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4691      	mov	r9, r2
 8006352:	461f      	mov	r7, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	4606      	mov	r6, r0
 800635a:	4293      	cmp	r3, r2
 800635c:	bfb8      	it	lt
 800635e:	4613      	movlt	r3, r2
 8006360:	f8c9 3000 	str.w	r3, [r9]
 8006364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006368:	460c      	mov	r4, r1
 800636a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800636e:	b112      	cbz	r2, 8006376 <_printf_common+0x2a>
 8006370:	3301      	adds	r3, #1
 8006372:	f8c9 3000 	str.w	r3, [r9]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	0699      	lsls	r1, r3, #26
 800637a:	bf42      	ittt	mi
 800637c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006380:	3302      	addmi	r3, #2
 8006382:	f8c9 3000 	strmi.w	r3, [r9]
 8006386:	6825      	ldr	r5, [r4, #0]
 8006388:	f015 0506 	ands.w	r5, r5, #6
 800638c:	d107      	bne.n	800639e <_printf_common+0x52>
 800638e:	f104 0a19 	add.w	sl, r4, #25
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	f8d9 2000 	ldr.w	r2, [r9]
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	42ab      	cmp	r3, r5
 800639c:	dc29      	bgt.n	80063f2 <_printf_common+0xa6>
 800639e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	3300      	adds	r3, #0
 80063a6:	bf18      	it	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	0692      	lsls	r2, r2, #26
 80063ac:	d42e      	bmi.n	800640c <_printf_common+0xc0>
 80063ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b2:	4639      	mov	r1, r7
 80063b4:	4630      	mov	r0, r6
 80063b6:	47c0      	blx	r8
 80063b8:	3001      	adds	r0, #1
 80063ba:	d021      	beq.n	8006400 <_printf_common+0xb4>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	68e5      	ldr	r5, [r4, #12]
 80063c0:	f003 0306 	and.w	r3, r3, #6
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	bf18      	it	ne
 80063c8:	2500      	movne	r5, #0
 80063ca:	f8d9 2000 	ldr.w	r2, [r9]
 80063ce:	f04f 0900 	mov.w	r9, #0
 80063d2:	bf08      	it	eq
 80063d4:	1aad      	subeq	r5, r5, r2
 80063d6:	68a3      	ldr	r3, [r4, #8]
 80063d8:	6922      	ldr	r2, [r4, #16]
 80063da:	bf08      	it	eq
 80063dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e0:	4293      	cmp	r3, r2
 80063e2:	bfc4      	itt	gt
 80063e4:	1a9b      	subgt	r3, r3, r2
 80063e6:	18ed      	addgt	r5, r5, r3
 80063e8:	341a      	adds	r4, #26
 80063ea:	454d      	cmp	r5, r9
 80063ec:	d11a      	bne.n	8006424 <_printf_common+0xd8>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e008      	b.n	8006404 <_printf_common+0xb8>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4639      	mov	r1, r7
 80063f8:	4630      	mov	r0, r6
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d103      	bne.n	8006408 <_printf_common+0xbc>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	3501      	adds	r5, #1
 800640a:	e7c2      	b.n	8006392 <_printf_common+0x46>
 800640c:	2030      	movs	r0, #48	; 0x30
 800640e:	18e1      	adds	r1, r4, r3
 8006410:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800641a:	4422      	add	r2, r4
 800641c:	3302      	adds	r3, #2
 800641e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006422:	e7c4      	b.n	80063ae <_printf_common+0x62>
 8006424:	2301      	movs	r3, #1
 8006426:	4622      	mov	r2, r4
 8006428:	4639      	mov	r1, r7
 800642a:	4630      	mov	r0, r6
 800642c:	47c0      	blx	r8
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xb4>
 8006432:	f109 0901 	add.w	r9, r9, #1
 8006436:	e7d8      	b.n	80063ea <_printf_common+0x9e>

08006438 <_printf_i>:
 8006438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800643c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006440:	460c      	mov	r4, r1
 8006442:	7e09      	ldrb	r1, [r1, #24]
 8006444:	b085      	sub	sp, #20
 8006446:	296e      	cmp	r1, #110	; 0x6e
 8006448:	4617      	mov	r7, r2
 800644a:	4606      	mov	r6, r0
 800644c:	4698      	mov	r8, r3
 800644e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006450:	f000 80b3 	beq.w	80065ba <_printf_i+0x182>
 8006454:	d822      	bhi.n	800649c <_printf_i+0x64>
 8006456:	2963      	cmp	r1, #99	; 0x63
 8006458:	d036      	beq.n	80064c8 <_printf_i+0x90>
 800645a:	d80a      	bhi.n	8006472 <_printf_i+0x3a>
 800645c:	2900      	cmp	r1, #0
 800645e:	f000 80b9 	beq.w	80065d4 <_printf_i+0x19c>
 8006462:	2958      	cmp	r1, #88	; 0x58
 8006464:	f000 8083 	beq.w	800656e <_printf_i+0x136>
 8006468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800646c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006470:	e032      	b.n	80064d8 <_printf_i+0xa0>
 8006472:	2964      	cmp	r1, #100	; 0x64
 8006474:	d001      	beq.n	800647a <_printf_i+0x42>
 8006476:	2969      	cmp	r1, #105	; 0x69
 8006478:	d1f6      	bne.n	8006468 <_printf_i+0x30>
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	6813      	ldr	r3, [r2, #0]
 800647e:	0605      	lsls	r5, r0, #24
 8006480:	f103 0104 	add.w	r1, r3, #4
 8006484:	d52a      	bpl.n	80064dc <_printf_i+0xa4>
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da03      	bge.n	8006496 <_printf_i+0x5e>
 800648e:	222d      	movs	r2, #45	; 0x2d
 8006490:	425b      	negs	r3, r3
 8006492:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006496:	486f      	ldr	r0, [pc, #444]	; (8006654 <_printf_i+0x21c>)
 8006498:	220a      	movs	r2, #10
 800649a:	e039      	b.n	8006510 <_printf_i+0xd8>
 800649c:	2973      	cmp	r1, #115	; 0x73
 800649e:	f000 809d 	beq.w	80065dc <_printf_i+0x1a4>
 80064a2:	d808      	bhi.n	80064b6 <_printf_i+0x7e>
 80064a4:	296f      	cmp	r1, #111	; 0x6f
 80064a6:	d020      	beq.n	80064ea <_printf_i+0xb2>
 80064a8:	2970      	cmp	r1, #112	; 0x70
 80064aa:	d1dd      	bne.n	8006468 <_printf_i+0x30>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	f043 0320 	orr.w	r3, r3, #32
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	e003      	b.n	80064be <_printf_i+0x86>
 80064b6:	2975      	cmp	r1, #117	; 0x75
 80064b8:	d017      	beq.n	80064ea <_printf_i+0xb2>
 80064ba:	2978      	cmp	r1, #120	; 0x78
 80064bc:	d1d4      	bne.n	8006468 <_printf_i+0x30>
 80064be:	2378      	movs	r3, #120	; 0x78
 80064c0:	4865      	ldr	r0, [pc, #404]	; (8006658 <_printf_i+0x220>)
 80064c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064c6:	e055      	b.n	8006574 <_printf_i+0x13c>
 80064c8:	6813      	ldr	r3, [r2, #0]
 80064ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ce:	1d19      	adds	r1, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6011      	str	r1, [r2, #0]
 80064d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d8:	2301      	movs	r3, #1
 80064da:	e08c      	b.n	80065f6 <_printf_i+0x1be>
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064e2:	6011      	str	r1, [r2, #0]
 80064e4:	bf18      	it	ne
 80064e6:	b21b      	sxthne	r3, r3
 80064e8:	e7cf      	b.n	800648a <_printf_i+0x52>
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	1d18      	adds	r0, r3, #4
 80064f0:	6010      	str	r0, [r2, #0]
 80064f2:	0628      	lsls	r0, r5, #24
 80064f4:	d501      	bpl.n	80064fa <_printf_i+0xc2>
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	e002      	b.n	8006500 <_printf_i+0xc8>
 80064fa:	0668      	lsls	r0, r5, #25
 80064fc:	d5fb      	bpl.n	80064f6 <_printf_i+0xbe>
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	296f      	cmp	r1, #111	; 0x6f
 8006502:	bf14      	ite	ne
 8006504:	220a      	movne	r2, #10
 8006506:	2208      	moveq	r2, #8
 8006508:	4852      	ldr	r0, [pc, #328]	; (8006654 <_printf_i+0x21c>)
 800650a:	2100      	movs	r1, #0
 800650c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006510:	6865      	ldr	r5, [r4, #4]
 8006512:	2d00      	cmp	r5, #0
 8006514:	60a5      	str	r5, [r4, #8]
 8006516:	f2c0 8095 	blt.w	8006644 <_printf_i+0x20c>
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	f021 0104 	bic.w	r1, r1, #4
 8006520:	6021      	str	r1, [r4, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d13d      	bne.n	80065a2 <_printf_i+0x16a>
 8006526:	2d00      	cmp	r5, #0
 8006528:	f040 808e 	bne.w	8006648 <_printf_i+0x210>
 800652c:	4665      	mov	r5, ip
 800652e:	2a08      	cmp	r2, #8
 8006530:	d10b      	bne.n	800654a <_printf_i+0x112>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	07db      	lsls	r3, r3, #31
 8006536:	d508      	bpl.n	800654a <_printf_i+0x112>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	bfde      	ittt	le
 8006540:	2330      	movle	r3, #48	; 0x30
 8006542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006546:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800654a:	ebac 0305 	sub.w	r3, ip, r5
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	f8cd 8000 	str.w	r8, [sp]
 8006554:	463b      	mov	r3, r7
 8006556:	aa03      	add	r2, sp, #12
 8006558:	4621      	mov	r1, r4
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff fef6 	bl	800634c <_printf_common>
 8006560:	3001      	adds	r0, #1
 8006562:	d14d      	bne.n	8006600 <_printf_i+0x1c8>
 8006564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006568:	b005      	add	sp, #20
 800656a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800656e:	4839      	ldr	r0, [pc, #228]	; (8006654 <_printf_i+0x21c>)
 8006570:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	6821      	ldr	r1, [r4, #0]
 8006578:	1d1d      	adds	r5, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6015      	str	r5, [r2, #0]
 800657e:	060a      	lsls	r2, r1, #24
 8006580:	d50b      	bpl.n	800659a <_printf_i+0x162>
 8006582:	07ca      	lsls	r2, r1, #31
 8006584:	bf44      	itt	mi
 8006586:	f041 0120 	orrmi.w	r1, r1, #32
 800658a:	6021      	strmi	r1, [r4, #0]
 800658c:	b91b      	cbnz	r3, 8006596 <_printf_i+0x15e>
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	f022 0220 	bic.w	r2, r2, #32
 8006594:	6022      	str	r2, [r4, #0]
 8006596:	2210      	movs	r2, #16
 8006598:	e7b7      	b.n	800650a <_printf_i+0xd2>
 800659a:	064d      	lsls	r5, r1, #25
 800659c:	bf48      	it	mi
 800659e:	b29b      	uxthmi	r3, r3
 80065a0:	e7ef      	b.n	8006582 <_printf_i+0x14a>
 80065a2:	4665      	mov	r5, ip
 80065a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80065a8:	fb02 3311 	mls	r3, r2, r1, r3
 80065ac:	5cc3      	ldrb	r3, [r0, r3]
 80065ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065b2:	460b      	mov	r3, r1
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d1f5      	bne.n	80065a4 <_printf_i+0x16c>
 80065b8:	e7b9      	b.n	800652e <_printf_i+0xf6>
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	6825      	ldr	r5, [r4, #0]
 80065be:	1d18      	adds	r0, r3, #4
 80065c0:	6961      	ldr	r1, [r4, #20]
 80065c2:	6010      	str	r0, [r2, #0]
 80065c4:	0628      	lsls	r0, r5, #24
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	d501      	bpl.n	80065ce <_printf_i+0x196>
 80065ca:	6019      	str	r1, [r3, #0]
 80065cc:	e002      	b.n	80065d4 <_printf_i+0x19c>
 80065ce:	066a      	lsls	r2, r5, #25
 80065d0:	d5fb      	bpl.n	80065ca <_printf_i+0x192>
 80065d2:	8019      	strh	r1, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	4665      	mov	r5, ip
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	e7b9      	b.n	8006550 <_printf_i+0x118>
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	1d19      	adds	r1, r3, #4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	681d      	ldr	r5, [r3, #0]
 80065e4:	6862      	ldr	r2, [r4, #4]
 80065e6:	2100      	movs	r1, #0
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 f837 	bl	800665c <memchr>
 80065ee:	b108      	cbz	r0, 80065f4 <_printf_i+0x1bc>
 80065f0:	1b40      	subs	r0, r0, r5
 80065f2:	6060      	str	r0, [r4, #4]
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	2300      	movs	r3, #0
 80065fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fe:	e7a7      	b.n	8006550 <_printf_i+0x118>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	462a      	mov	r2, r5
 8006604:	4639      	mov	r1, r7
 8006606:	4630      	mov	r0, r6
 8006608:	47c0      	blx	r8
 800660a:	3001      	adds	r0, #1
 800660c:	d0aa      	beq.n	8006564 <_printf_i+0x12c>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	079b      	lsls	r3, r3, #30
 8006612:	d413      	bmi.n	800663c <_printf_i+0x204>
 8006614:	68e0      	ldr	r0, [r4, #12]
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	4298      	cmp	r0, r3
 800661a:	bfb8      	it	lt
 800661c:	4618      	movlt	r0, r3
 800661e:	e7a3      	b.n	8006568 <_printf_i+0x130>
 8006620:	2301      	movs	r3, #1
 8006622:	464a      	mov	r2, r9
 8006624:	4639      	mov	r1, r7
 8006626:	4630      	mov	r0, r6
 8006628:	47c0      	blx	r8
 800662a:	3001      	adds	r0, #1
 800662c:	d09a      	beq.n	8006564 <_printf_i+0x12c>
 800662e:	3501      	adds	r5, #1
 8006630:	68e3      	ldr	r3, [r4, #12]
 8006632:	9a03      	ldr	r2, [sp, #12]
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	42ab      	cmp	r3, r5
 8006638:	dcf2      	bgt.n	8006620 <_printf_i+0x1e8>
 800663a:	e7eb      	b.n	8006614 <_printf_i+0x1dc>
 800663c:	2500      	movs	r5, #0
 800663e:	f104 0919 	add.w	r9, r4, #25
 8006642:	e7f5      	b.n	8006630 <_printf_i+0x1f8>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ac      	bne.n	80065a2 <_printf_i+0x16a>
 8006648:	7803      	ldrb	r3, [r0, #0]
 800664a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800664e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006652:	e76c      	b.n	800652e <_printf_i+0xf6>
 8006654:	08006a49 	.word	0x08006a49
 8006658:	08006a5a 	.word	0x08006a5a

0800665c <memchr>:
 800665c:	b510      	push	{r4, lr}
 800665e:	b2c9      	uxtb	r1, r1
 8006660:	4402      	add	r2, r0
 8006662:	4290      	cmp	r0, r2
 8006664:	4603      	mov	r3, r0
 8006666:	d101      	bne.n	800666c <memchr+0x10>
 8006668:	2300      	movs	r3, #0
 800666a:	e003      	b.n	8006674 <memchr+0x18>
 800666c:	781c      	ldrb	r4, [r3, #0]
 800666e:	3001      	adds	r0, #1
 8006670:	428c      	cmp	r4, r1
 8006672:	d1f6      	bne.n	8006662 <memchr+0x6>
 8006674:	4618      	mov	r0, r3
 8006676:	bd10      	pop	{r4, pc}

08006678 <memmove>:
 8006678:	4288      	cmp	r0, r1
 800667a:	b510      	push	{r4, lr}
 800667c:	eb01 0302 	add.w	r3, r1, r2
 8006680:	d807      	bhi.n	8006692 <memmove+0x1a>
 8006682:	1e42      	subs	r2, r0, #1
 8006684:	4299      	cmp	r1, r3
 8006686:	d00a      	beq.n	800669e <memmove+0x26>
 8006688:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006690:	e7f8      	b.n	8006684 <memmove+0xc>
 8006692:	4283      	cmp	r3, r0
 8006694:	d9f5      	bls.n	8006682 <memmove+0xa>
 8006696:	1881      	adds	r1, r0, r2
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	42d3      	cmn	r3, r2
 800669c:	d100      	bne.n	80066a0 <memmove+0x28>
 800669e:	bd10      	pop	{r4, pc}
 80066a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066a8:	e7f7      	b.n	800669a <memmove+0x22>
	...

080066ac <_free_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4605      	mov	r5, r0
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d043      	beq.n	800673c <_free_r+0x90>
 80066b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b8:	1f0c      	subs	r4, r1, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfb8      	it	lt
 80066be:	18e4      	addlt	r4, r4, r3
 80066c0:	f000 f8d0 	bl	8006864 <__malloc_lock>
 80066c4:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <_free_r+0x94>)
 80066c6:	6813      	ldr	r3, [r2, #0]
 80066c8:	4610      	mov	r0, r2
 80066ca:	b933      	cbnz	r3, 80066da <_free_r+0x2e>
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	6014      	str	r4, [r2, #0]
 80066d0:	4628      	mov	r0, r5
 80066d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d6:	f000 b8c6 	b.w	8006866 <__malloc_unlock>
 80066da:	42a3      	cmp	r3, r4
 80066dc:	d90b      	bls.n	80066f6 <_free_r+0x4a>
 80066de:	6821      	ldr	r1, [r4, #0]
 80066e0:	1862      	adds	r2, r4, r1
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bf01      	itttt	eq
 80066e6:	681a      	ldreq	r2, [r3, #0]
 80066e8:	685b      	ldreq	r3, [r3, #4]
 80066ea:	1852      	addeq	r2, r2, r1
 80066ec:	6022      	streq	r2, [r4, #0]
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	6004      	str	r4, [r0, #0]
 80066f2:	e7ed      	b.n	80066d0 <_free_r+0x24>
 80066f4:	4613      	mov	r3, r2
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	b10a      	cbz	r2, 80066fe <_free_r+0x52>
 80066fa:	42a2      	cmp	r2, r4
 80066fc:	d9fa      	bls.n	80066f4 <_free_r+0x48>
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	1858      	adds	r0, r3, r1
 8006702:	42a0      	cmp	r0, r4
 8006704:	d10b      	bne.n	800671e <_free_r+0x72>
 8006706:	6820      	ldr	r0, [r4, #0]
 8006708:	4401      	add	r1, r0
 800670a:	1858      	adds	r0, r3, r1
 800670c:	4282      	cmp	r2, r0
 800670e:	6019      	str	r1, [r3, #0]
 8006710:	d1de      	bne.n	80066d0 <_free_r+0x24>
 8006712:	6810      	ldr	r0, [r2, #0]
 8006714:	6852      	ldr	r2, [r2, #4]
 8006716:	4401      	add	r1, r0
 8006718:	6019      	str	r1, [r3, #0]
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	e7d8      	b.n	80066d0 <_free_r+0x24>
 800671e:	d902      	bls.n	8006726 <_free_r+0x7a>
 8006720:	230c      	movs	r3, #12
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	e7d4      	b.n	80066d0 <_free_r+0x24>
 8006726:	6820      	ldr	r0, [r4, #0]
 8006728:	1821      	adds	r1, r4, r0
 800672a:	428a      	cmp	r2, r1
 800672c:	bf01      	itttt	eq
 800672e:	6811      	ldreq	r1, [r2, #0]
 8006730:	6852      	ldreq	r2, [r2, #4]
 8006732:	1809      	addeq	r1, r1, r0
 8006734:	6021      	streq	r1, [r4, #0]
 8006736:	6062      	str	r2, [r4, #4]
 8006738:	605c      	str	r4, [r3, #4]
 800673a:	e7c9      	b.n	80066d0 <_free_r+0x24>
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	bf00      	nop
 8006740:	2000199c 	.word	0x2000199c

08006744 <_malloc_r>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	1ccd      	adds	r5, r1, #3
 8006748:	f025 0503 	bic.w	r5, r5, #3
 800674c:	3508      	adds	r5, #8
 800674e:	2d0c      	cmp	r5, #12
 8006750:	bf38      	it	cc
 8006752:	250c      	movcc	r5, #12
 8006754:	2d00      	cmp	r5, #0
 8006756:	4606      	mov	r6, r0
 8006758:	db01      	blt.n	800675e <_malloc_r+0x1a>
 800675a:	42a9      	cmp	r1, r5
 800675c:	d903      	bls.n	8006766 <_malloc_r+0x22>
 800675e:	230c      	movs	r3, #12
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	2000      	movs	r0, #0
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	f000 f87d 	bl	8006864 <__malloc_lock>
 800676a:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <_malloc_r+0xac>)
 800676c:	6814      	ldr	r4, [r2, #0]
 800676e:	4621      	mov	r1, r4
 8006770:	b991      	cbnz	r1, 8006798 <_malloc_r+0x54>
 8006772:	4c20      	ldr	r4, [pc, #128]	; (80067f4 <_malloc_r+0xb0>)
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	b91b      	cbnz	r3, 8006780 <_malloc_r+0x3c>
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f863 	bl	8006844 <_sbrk_r>
 800677e:	6020      	str	r0, [r4, #0]
 8006780:	4629      	mov	r1, r5
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f85e 	bl	8006844 <_sbrk_r>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d124      	bne.n	80067d6 <_malloc_r+0x92>
 800678c:	230c      	movs	r3, #12
 800678e:	4630      	mov	r0, r6
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	f000 f868 	bl	8006866 <__malloc_unlock>
 8006796:	e7e4      	b.n	8006762 <_malloc_r+0x1e>
 8006798:	680b      	ldr	r3, [r1, #0]
 800679a:	1b5b      	subs	r3, r3, r5
 800679c:	d418      	bmi.n	80067d0 <_malloc_r+0x8c>
 800679e:	2b0b      	cmp	r3, #11
 80067a0:	d90f      	bls.n	80067c2 <_malloc_r+0x7e>
 80067a2:	600b      	str	r3, [r1, #0]
 80067a4:	18cc      	adds	r4, r1, r3
 80067a6:	50cd      	str	r5, [r1, r3]
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f85c 	bl	8006866 <__malloc_unlock>
 80067ae:	f104 000b 	add.w	r0, r4, #11
 80067b2:	1d23      	adds	r3, r4, #4
 80067b4:	f020 0007 	bic.w	r0, r0, #7
 80067b8:	1ac3      	subs	r3, r0, r3
 80067ba:	d0d3      	beq.n	8006764 <_malloc_r+0x20>
 80067bc:	425a      	negs	r2, r3
 80067be:	50e2      	str	r2, [r4, r3]
 80067c0:	e7d0      	b.n	8006764 <_malloc_r+0x20>
 80067c2:	684b      	ldr	r3, [r1, #4]
 80067c4:	428c      	cmp	r4, r1
 80067c6:	bf16      	itet	ne
 80067c8:	6063      	strne	r3, [r4, #4]
 80067ca:	6013      	streq	r3, [r2, #0]
 80067cc:	460c      	movne	r4, r1
 80067ce:	e7eb      	b.n	80067a8 <_malloc_r+0x64>
 80067d0:	460c      	mov	r4, r1
 80067d2:	6849      	ldr	r1, [r1, #4]
 80067d4:	e7cc      	b.n	8006770 <_malloc_r+0x2c>
 80067d6:	1cc4      	adds	r4, r0, #3
 80067d8:	f024 0403 	bic.w	r4, r4, #3
 80067dc:	42a0      	cmp	r0, r4
 80067de:	d005      	beq.n	80067ec <_malloc_r+0xa8>
 80067e0:	1a21      	subs	r1, r4, r0
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f82e 	bl	8006844 <_sbrk_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0cf      	beq.n	800678c <_malloc_r+0x48>
 80067ec:	6025      	str	r5, [r4, #0]
 80067ee:	e7db      	b.n	80067a8 <_malloc_r+0x64>
 80067f0:	2000199c 	.word	0x2000199c
 80067f4:	200019a0 	.word	0x200019a0

080067f8 <_realloc_r>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	4607      	mov	r7, r0
 80067fc:	4614      	mov	r4, r2
 80067fe:	460e      	mov	r6, r1
 8006800:	b921      	cbnz	r1, 800680c <_realloc_r+0x14>
 8006802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006806:	4611      	mov	r1, r2
 8006808:	f7ff bf9c 	b.w	8006744 <_malloc_r>
 800680c:	b922      	cbnz	r2, 8006818 <_realloc_r+0x20>
 800680e:	f7ff ff4d 	bl	80066ac <_free_r>
 8006812:	4625      	mov	r5, r4
 8006814:	4628      	mov	r0, r5
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	f000 f826 	bl	8006868 <_malloc_usable_size_r>
 800681c:	42a0      	cmp	r0, r4
 800681e:	d20f      	bcs.n	8006840 <_realloc_r+0x48>
 8006820:	4621      	mov	r1, r4
 8006822:	4638      	mov	r0, r7
 8006824:	f7ff ff8e 	bl	8006744 <_malloc_r>
 8006828:	4605      	mov	r5, r0
 800682a:	2800      	cmp	r0, #0
 800682c:	d0f2      	beq.n	8006814 <_realloc_r+0x1c>
 800682e:	4631      	mov	r1, r6
 8006830:	4622      	mov	r2, r4
 8006832:	f7ff fbfd 	bl	8006030 <memcpy>
 8006836:	4631      	mov	r1, r6
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff ff37 	bl	80066ac <_free_r>
 800683e:	e7e9      	b.n	8006814 <_realloc_r+0x1c>
 8006840:	4635      	mov	r5, r6
 8006842:	e7e7      	b.n	8006814 <_realloc_r+0x1c>

08006844 <_sbrk_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	2300      	movs	r3, #0
 8006848:	4c05      	ldr	r4, [pc, #20]	; (8006860 <_sbrk_r+0x1c>)
 800684a:	4605      	mov	r5, r0
 800684c:	4608      	mov	r0, r1
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	f7fa f898 	bl	8000984 <_sbrk>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_sbrk_r+0x1a>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	b103      	cbz	r3, 800685e <_sbrk_r+0x1a>
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20001af4 	.word	0x20001af4

08006864 <__malloc_lock>:
 8006864:	4770      	bx	lr

08006866 <__malloc_unlock>:
 8006866:	4770      	bx	lr

08006868 <_malloc_usable_size_r>:
 8006868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800686c:	1f18      	subs	r0, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	bfbc      	itt	lt
 8006872:	580b      	ldrlt	r3, [r1, r0]
 8006874:	18c0      	addlt	r0, r0, r3
 8006876:	4770      	bx	lr

08006878 <_init>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr

08006884 <_fini>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr
