
OccupancyDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fbc  08006fbc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006fbc  08006fbc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fbc  08006fbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  20000074  08007038  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  08007038  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a022  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003600  00000000  00000000  0003a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  0003d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  0003eb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004682  00000000  00000000  0003feb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d02  00000000  00000000  0004453a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000998df  00000000  00000000  0005723c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0b1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  000f0b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dc8 	.word	0x08006dc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006dc8 	.word	0x08006dc8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fff3 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f893 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f973 	bl	8000944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f947 	bl	80008f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000662:	f000 f8dd 	bl	8000820 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  lcd_IO_init();
 8000666:	f000 fcd3 	bl	8001010 <lcd_IO_init>

  lcd_init();
 800066a:	f000 fd15 	bl	8001098 <lcd_init>

  //uint8_t room_str[40];
  uint16_t roomSz = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	80fb      	strh	r3, [r7, #6]
//  uint8_t textTX[56];
//
//  while(num < 100)
//  {
//  timStart = timer_start();
  CMD2LCD(0x01);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fce8 	bl	8001048 <CMD2LCD>
  char2LCD("use inputs");
 8000678:	482e      	ldr	r0, [pc, #184]	; (8000734 <main+0xe8>)
 800067a:	f000 fd65 	bl	8001148 <char2LCD>
  CMD2LCD(0xC0);
 800067e:	20c0      	movs	r0, #192	; 0xc0
 8000680:	f000 fce2 	bl	8001048 <CMD2LCD>
  char2LCD("room size: ");
 8000684:	482c      	ldr	r0, [pc, #176]	; (8000738 <main+0xec>)
 8000686:	f000 fd5f 	bl	8001148 <char2LCD>
  POT_Select();
 800068a:	f000 ff7b 	bl	8001584 <POT_Select>
  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800068e:	e011      	b.n	80006b4 <main+0x68>
  {
	  CMD2LCD(0xCB);
 8000690:	20cb      	movs	r0, #203	; 0xcb
 8000692:	f000 fcd9 	bl	8001048 <CMD2LCD>
	  //			else if(roomSz < 0xFFF)
	  //			{
	  //				strcpy((char *)room_str, "cl110");
	  //			}

	  strcpy((char *)room_str, roomSelect(ADC_Read()));
 8000696:	f000 ff91 	bl	80015bc <ADC_Read>
 800069a:	4603      	mov	r3, r0
 800069c:	b29b      	uxth	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fc8e 	bl	8000fc0 <roomSelect>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4619      	mov	r1, r3
 80006a8:	4824      	ldr	r0, [pc, #144]	; (800073c <main+0xf0>)
 80006aa:	f005 ff9d 	bl	80065e8 <strcpy>
	  char2LCD((char *)room_str);
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0xf0>)
 80006b0:	f000 fd4a 	bl	8001148 <char2LCD>
  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <main+0xf4>)
 80006ba:	f001 fe89 	bl	80023d0 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1e5      	bne.n	8000690 <main+0x44>
	  //		HAL_Delay(300);
	  //		CMD2LCD(0xCB);
	  //		char2LCD("2");
	  //		HAL_Delay(300);
  }
  CMD2LCD(0x01);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fcbf 	bl	8001048 <CMD2LCD>
//
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ca:	f003 f871 	bl	80037b0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structQueue */
  structQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &structQueue_attributes);
 80006ce:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <main+0xf8>)
 80006d0:	2106      	movs	r1, #6
 80006d2:	2001      	movs	r0, #1
 80006d4:	f003 f9aa 	bl	8003a2c <osMessageQueueNew>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <main+0xfc>)
 80006dc:	601a      	str	r2, [r3, #0]

  /* creation of rawQueue */
  rawQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &rawQueue_attributes);
 80006de:	4a1b      	ldr	r2, [pc, #108]	; (800074c <main+0x100>)
 80006e0:	2106      	movs	r1, #6
 80006e2:	2001      	movs	r0, #1
 80006e4:	f003 f9a2 	bl	8003a2c <osMessageQueueNew>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <main+0x104>)
 80006ec:	601a      	str	r2, [r3, #0]

  /* creation of roomQueue */
  roomQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &roomQueue_attributes);
 80006ee:	4a19      	ldr	r2, [pc, #100]	; (8000754 <main+0x108>)
 80006f0:	2102      	movs	r1, #2
 80006f2:	2001      	movs	r0, #1
 80006f4:	f003 f99a 	bl	8003a2c <osMessageQueueNew>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <main+0x10c>)
 80006fc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calcTask */
  calcTaskHandle = osThreadNew(StartCalcTask, NULL, &calcTask_attributes);
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <main+0x110>)
 8000700:	2100      	movs	r1, #0
 8000702:	4817      	ldr	r0, [pc, #92]	; (8000760 <main+0x114>)
 8000704:	f003 f8ba 	bl	800387c <osThreadNew>
 8000708:	4602      	mov	r2, r0
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <main+0x118>)
 800070c:	601a      	str	r2, [r3, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <main+0x11c>)
 8000710:	2100      	movs	r1, #0
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <main+0x120>)
 8000714:	f003 f8b2 	bl	800387c <osThreadNew>
 8000718:	4602      	mov	r2, r0
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <main+0x124>)
 800071c:	601a      	str	r2, [r3, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartLcdTask, NULL, &lcdTask_attributes);
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <main+0x128>)
 8000720:	2100      	movs	r1, #0
 8000722:	4815      	ldr	r0, [pc, #84]	; (8000778 <main+0x12c>)
 8000724:	f003 f8aa 	bl	800387c <osThreadNew>
 8000728:	4602      	mov	r2, r0
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <main+0x130>)
 800072c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800072e:	f003 f871 	bl	8003814 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000732:	e7fe      	b.n	8000732 <main+0xe6>
 8000734:	08006e24 	.word	0x08006e24
 8000738:	08006e30 	.word	0x08006e30
 800073c:	200019ec 	.word	0x200019ec
 8000740:	40011000 	.word	0x40011000
 8000744:	08006f28 	.word	0x08006f28
 8000748:	200019a8 	.word	0x200019a8
 800074c:	08006f40 	.word	0x08006f40
 8000750:	200019a4 	.word	0x200019a4
 8000754:	08006f58 	.word	0x08006f58
 8000758:	200019b4 	.word	0x200019b4
 800075c:	08006ebc 	.word	0x08006ebc
 8000760:	08000a45 	.word	0x08000a45
 8000764:	200019b0 	.word	0x200019b0
 8000768:	08006ee0 	.word	0x08006ee0
 800076c:	08000ae1 	.word	0x08000ae1
 8000770:	200019ac 	.word	0x200019ac
 8000774:	08006f04 	.word	0x08006f04
 8000778:	08000b79 	.word	0x08000b79
 800077c:	200019e8 	.word	0x200019e8

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2228      	movs	r2, #40	; 0x28
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 ff01 	bl	8006596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fe33 	bl	8002430 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80007d0:	f000 fa4a 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f89e 	bl	8002930 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007fa:	f000 fa35 	bl	8000c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fe:	2302      	movs	r3, #2
 8000800:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fa5d 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000814:	f000 fa28 	bl	8000c68 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_ADC1_Init+0xcc>)
 8000834:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000840:	2201      	movs	r2, #1
 8000842:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000846:	2200      	movs	r2, #0
 8000848:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_ADC1_Init+0xc8>)
 800084c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000850:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_ADC1_Init+0xc8>)
 800085a:	2204      	movs	r2, #4
 800085c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085e:	4822      	ldr	r0, [pc, #136]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000860:	f000 ff40 	bl	80016e4 <HAL_ADC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800086a:	f000 f9fd 	bl	8000c68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800086e:	2307      	movs	r3, #7
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000872:	2301      	movs	r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	481a      	ldr	r0, [pc, #104]	; (80008e8 <MX_ADC1_Init+0xc8>)
 8000880:	f001 f9e8 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f9ed 	bl	8000c68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800088e:	2304      	movs	r3, #4
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000892:	2302      	movs	r3, #2
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_ADC1_Init+0xc8>)
 800089c:	f001 f9da 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80008a6:	f000 f9df 	bl	8000c68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008ae:	2303      	movs	r3, #3
 80008b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_ADC1_Init+0xc8>)
 80008b8:	f001 f9cc 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008c2:	f000 f9d1 	bl	8000c68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_ADC1_Init+0xc8>)
 80008d0:	f001 f9c0 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80008da:	f000 f9c5 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200019b8 	.word	0x200019b8
 80008ec:	40012400 	.word	0x40012400

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f002 fd8a 	bl	8003440 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f999 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20001a14 	.word	0x20001a14
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <MX_GPIO_Init+0xf0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a35      	ldr	r2, [pc, #212]	; (8000a34 <MX_GPIO_Init+0xf0>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <MX_GPIO_Init+0xf0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <MX_GPIO_Init+0xf0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a2f      	ldr	r2, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xf0>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_GPIO_Init+0xf0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_GPIO_Init+0xf0>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <MX_GPIO_Init+0xf0>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_GPIO_Init+0xf0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a0:	2200      	movs	r2, #0
 80009a2:	21ff      	movs	r1, #255	; 0xff
 80009a4:	4824      	ldr	r0, [pc, #144]	; (8000a38 <MX_GPIO_Init+0xf4>)
 80009a6:	f001 fd2a 	bl	80023fe <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4823      	ldr	r0, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xf8>)
 80009b0:	f001 fd25 	bl	80023fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2123      	movs	r1, #35	; 0x23
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_GPIO_Init+0xfc>)
 80009ba:	f001 fd20 	bl	80023fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	4819      	ldr	r0, [pc, #100]	; (8000a38 <MX_GPIO_Init+0xf4>)
 80009d4:	f001 fba2 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009d8:	23ff      	movs	r3, #255	; 0xff
 80009da:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <MX_GPIO_Init+0xf4>)
 80009f0:	f001 fb94 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009f4:	2320      	movs	r3, #32
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_GPIO_Init+0xf8>)
 8000a0c:	f001 fb86 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000a10:	2323      	movs	r3, #35	; 0x23
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_GPIO_Init+0xfc>)
 8000a28:	f001 fb78 	bl	800211c <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <StartCalcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalcTask */
void StartCalcTask(void *argument)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t data = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	81fb      	strh	r3, [r7, #14]
	struct DataStruct dc;
	dc.temp = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	813b      	strh	r3, [r7, #8]
	dc.CO2 = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	817b      	strh	r3, [r7, #10]
	dc.dB = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		TEMP_Select();
 8000a5c:	f000 fd5a 	bl	8001514 <TEMP_Select>
		dc.temp = TempConversion(ADC_Read());
 8000a60:	f000 fdac 	bl	80015bc <ADC_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fd02 	bl	8001470 <TempConversion>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	813b      	strh	r3, [r7, #8]

		CO2_Select();
 8000a70:	f000 fd32 	bl	80014d8 <CO2_Select>
		dc.CO2 = CO2Conversion(ADC_Read());
 8000a74:	f000 fda2 	bl	80015bc <ADC_Read>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fcd8 	bl	8001430 <CO2Conversion>
 8000a80:	4603      	mov	r3, r0
 8000a82:	817b      	strh	r3, [r7, #10]

		NOISE_Select();
 8000a84:	f000 fd62 	bl	800154c <NOISE_Select>
		dc.dB = NoiseConversion(ADC_Read());
 8000a88:	f000 fd98 	bl	80015bc <ADC_Read>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fd00 	bl	8001494 <NoiseConversion>
 8000a94:	4603      	mov	r3, r0
 8000a96:	81bb      	strh	r3, [r7, #12]

//		dc.CO2 += 5;
//		dc.dB += 10;

		if(osMessageQueuePut(rawQueueHandle, &dc, 1U, 0U) != osOK)
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <StartCalcTask+0x94>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	f107 0108 	add.w	r1, r7, #8
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f003 f848 	bl	8003b38 <osMessageQueuePut>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <StartCalcTask+0x6e>
		{
			Error_Handler();
 8000aae:	f000 f8db 	bl	8000c68 <Error_Handler>
		}

		//DataFormat()
		//OccupancyCalculation()

		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U) != osOK)
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <StartCalcTask+0x98>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	f107 0108 	add.w	r1, r7, #8
 8000aba:	2300      	movs	r3, #0
 8000abc:	2201      	movs	r2, #1
 8000abe:	f003 f83b 	bl	8003b38 <osMessageQueuePut>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <StartCalcTask+0x88>
		{
			Error_Handler();
 8000ac8:	f000 f8ce 	bl	8000c68 <Error_Handler>
		}

		osDelay(500);
 8000acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad0:	f002 ff7e 	bl	80039d0 <osDelay>
		TEMP_Select();
 8000ad4:	e7c2      	b.n	8000a5c <StartCalcTask+0x18>
 8000ad6:	bf00      	nop
 8000ad8:	200019a4 	.word	0x200019a4
 8000adc:	200019a8 	.word	0x200019a8

08000ae0 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint8_t data_str[40];
	struct DataStruct dc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <StartSendTask+0x88>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	f107 0108 	add.w	r1, r7, #8
 8000af0:	2300      	movs	r3, #0
 8000af2:	2200      	movs	r2, #0
 8000af4:	f003 f894 	bl	8003c20 <osMessageQueueGet>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d12f      	bne.n	8000b5e <StartSendTask+0x7e>
		{
			sprintf((char *)data_str, "%d", dc.temp);
 8000afe:	893b      	ldrh	r3, [r7, #8]
 8000b00:	461a      	mov	r2, r3
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4919      	ldr	r1, [pc, #100]	; (8000b6c <StartSendTask+0x8c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fd4d 	bl	80065a8 <siprintf>
			printString((char *)data_str);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fa1a 	bl	8000f4c <printString>
			printString(" ");
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <StartSendTask+0x90>)
 8000b1a:	f000 fa17 	bl	8000f4c <printString>
			sprintf((char *)data_str, "%d", dc.CO2);
 8000b1e:	897b      	ldrh	r3, [r7, #10]
 8000b20:	461a      	mov	r2, r3
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4911      	ldr	r1, [pc, #68]	; (8000b6c <StartSendTask+0x8c>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fd3d 	bl	80065a8 <siprintf>
			printString((char *)data_str);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fa0a 	bl	8000f4c <printString>
			printString(" ");
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <StartSendTask+0x90>)
 8000b3a:	f000 fa07 	bl	8000f4c <printString>
			sprintf((char *)data_str, "%d", dc.dB);
 8000b3e:	89bb      	ldrh	r3, [r7, #12]
 8000b40:	461a      	mov	r2, r3
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4909      	ldr	r1, [pc, #36]	; (8000b6c <StartSendTask+0x8c>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 fd2d 	bl	80065a8 <siprintf>
			printString((char *)data_str);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f9fa 	bl	8000f4c <printString>
			printString("\r\n");
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <StartSendTask+0x94>)
 8000b5a:	f000 f9f7 	bl	8000f4c <printString>
		}
		osDelay(60000);
 8000b5e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000b62:	f002 ff35 	bl	80039d0 <osDelay>
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000b66:	e7bf      	b.n	8000ae8 <StartSendTask+0x8>
 8000b68:	200019a8 	.word	0x200019a8
 8000b6c:	08006e3c 	.word	0x08006e3c
 8000b70:	08006e40 	.word	0x08006e40
 8000b74:	08006e44 	.word	0x08006e44

08000b78 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	; 0x40
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
	uint8_t raw_str[40];
	uint16_t roomSz = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	87fb      	strh	r3, [r7, #62]	; 0x3e
	struct DataStruct rc;
	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <StartLcdTask+0xb0>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	f107 010c 	add.w	r1, r7, #12
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f003 f846 	bl	8003c20 <osMessageQueueGet>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d141      	bne.n	8000c1e <StartLcdTask+0xa6>
//				CMD2LCD(0x80);
//				char2LCD("rs:");
//				char2LCD((char *)raw_str);
//			}

			CMD2LCD(0x80);
 8000b9a:	2080      	movs	r0, #128	; 0x80
 8000b9c:	f000 fa54 	bl	8001048 <CMD2LCD>
			char2LCD("rs:");
 8000ba0:	4822      	ldr	r0, [pc, #136]	; (8000c2c <StartLcdTask+0xb4>)
 8000ba2:	f000 fad1 	bl	8001148 <char2LCD>
			char2LCD((char *)room_str);
 8000ba6:	4822      	ldr	r0, [pc, #136]	; (8000c30 <StartLcdTask+0xb8>)
 8000ba8:	f000 face 	bl	8001148 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.temp);
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	491f      	ldr	r1, [pc, #124]	; (8000c34 <StartLcdTask+0xbc>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 fcf6 	bl	80065a8 <siprintf>
			CMD2LCD(0x89);
 8000bbc:	2089      	movs	r0, #137	; 0x89
 8000bbe:	f000 fa43 	bl	8001048 <CMD2LCD>
			char2LCD("tmp:");
 8000bc2:	481d      	ldr	r0, [pc, #116]	; (8000c38 <StartLcdTask+0xc0>)
 8000bc4:	f000 fac0 	bl	8001148 <char2LCD>
			char2LCD((char *)raw_str);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fabb 	bl	8001148 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.CO2);
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4916      	ldr	r1, [pc, #88]	; (8000c34 <StartLcdTask+0xbc>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f005 fce3 	bl	80065a8 <siprintf>
			CMD2LCD(0xC0);
 8000be2:	20c0      	movs	r0, #192	; 0xc0
 8000be4:	f000 fa30 	bl	8001048 <CMD2LCD>
			char2LCD("co2:");
 8000be8:	4814      	ldr	r0, [pc, #80]	; (8000c3c <StartLcdTask+0xc4>)
 8000bea:	f000 faad 	bl	8001148 <char2LCD>
			char2LCD((char *)raw_str);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 faa8 	bl	8001148 <char2LCD>

			sprintf((char *)raw_str, "%d", rc.dB);
 8000bf8:	8a3b      	ldrh	r3, [r7, #16]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <StartLcdTask+0xbc>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fcd0 	bl	80065a8 <siprintf>
			CMD2LCD(0xC9);
 8000c08:	20c9      	movs	r0, #201	; 0xc9
 8000c0a:	f000 fa1d 	bl	8001048 <CMD2LCD>
			char2LCD("nl:");
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <StartLcdTask+0xc8>)
 8000c10:	f000 fa9a 	bl	8001148 <char2LCD>
			char2LCD((char *)raw_str);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fa95 	bl	8001148 <char2LCD>

		}
		osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f002 fed6 	bl	80039d0 <osDelay>
		if(osMessageQueueGet(rawQueueHandle, &rc, NULL, 0U) == osOK)
 8000c24:	e7ae      	b.n	8000b84 <StartLcdTask+0xc>
 8000c26:	bf00      	nop
 8000c28:	200019a4 	.word	0x200019a4
 8000c2c:	08006e48 	.word	0x08006e48
 8000c30:	200019ec 	.word	0x200019ec
 8000c34:	08006e3c 	.word	0x08006e3c
 8000c38:	08006e4c 	.word	0x08006e4c
 8000c3c:	08006e54 	.word	0x08006e54
 8000c40:	08006e5c 	.word	0x08006e5c

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 fd07 	bl	8001668 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40000800 	.word	0x40000800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_MspInit+0x60>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_MspInit+0x60>)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_ADC_MspInit+0x6c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d121      	bne.n	8000d3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_ADC_MspInit+0x70>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_ADC_MspInit+0x70>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_ADC_MspInit+0x70>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_ADC_MspInit+0x70>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_ADC_MspInit+0x70>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_ADC_MspInit+0x70>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000d28:	23d2      	movs	r3, #210	; 0xd2
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_ADC_MspInit+0x74>)
 8000d38:	f001 f9f0 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40012400 	.word	0x40012400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d12f      	bne.n	8000dd0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7a:	61d3      	str	r3, [r2, #28]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da0:	2304      	movs	r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000db4:	f001 f9b2 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db8:	2308      	movs	r3, #8
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000dcc:	f001 f9a6 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	201e      	movs	r0, #30
 8000dfa:	f001 f964 	bl	80020c6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dfe:	201e      	movs	r0, #30
 8000e00:	f001 f97d 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_InitTick+0x9c>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_InitTick+0x9c>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	61d3      	str	r3, [r2, #28]
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_InitTick+0x9c>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e1c:	f107 0210 	add.w	r2, r7, #16
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 ff00 	bl	8002c2c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2c:	f001 fed6 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 8000e30:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_InitTick+0xa0>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_InitTick+0xa8>)
 8000e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e62:	f002 f8a3 	bl	8002fac <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d104      	bne.n	8000e76 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e6e:	f002 f8f5 	bl	800305c <HAL_TIM_Base_Start_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	20001a54 	.word	0x20001a54
 8000e8c:	40000800 	.word	0x40000800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <BusFault_Handler+0x4>

08000eae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <UsageFault_Handler+0x4>

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <TIM4_IRQHandler+0x10>)
 8000ec6:	f002 f91b 	bl	8003100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20001a54 	.word	0x20001a54

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f005 fb12 	bl	800652c <__errno>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20005000 	.word	0x20005000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20000090 	.word	0x20000090
 8000f3c:	20001ae8 	.word	0x20001ae8

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <printString>:
 */

#include "CommMod.h"

void printString(const char* mess)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09e      	sub	sp, #120	; 0x78
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef st;
	uint8_t cliBufferTX[100];

	while(huart2.gState == HAL_UART_STATE_BUSY_TX){}
 8000f58:	bf00      	nop
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <printString+0x70>)
 8000f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b21      	cmp	r3, #33	; 0x21
 8000f64:	d0f9      	beq.n	8000f5a <printString+0xe>

	for(const char* p = mess; *p; ++p)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	673b      	str	r3, [r7, #112]	; 0x70
 8000f6a:	e00d      	b.n	8000f88 <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 8000f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f6e:	7819      	ldrb	r1, [r3, #0]
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f76:	4413      	add	r3, r2
 8000f78:	460a      	mov	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
		i++;
 8000f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f7e:	3301      	adds	r3, #1
 8000f80:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 8000f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f84:	3301      	adds	r3, #1
 8000f86:	673b      	str	r3, [r7, #112]	; 0x70
 8000f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ed      	bne.n	8000f6c <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart2, cliBufferTX, i, 1000);
 8000f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f107 0108 	add.w	r1, r7, #8
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <printString+0x70>)
 8000f9e:	f002 fa9c 	bl	80034da <HAL_UART_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 8000fa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <printString+0x68>
	{
		Error_Handler();
 8000fb0:	f7ff fe5a 	bl	8000c68 <Error_Handler>
	}

}
 8000fb4:	bf00      	nop
 8000fb6:	3778      	adds	r7, #120	; 0x78
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20001a14 	.word	0x20001a14

08000fc0 <roomSelect>:
 */

#include "UserInput.h"

char * roomSelect(uint16_t pot)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	if(pot < 0x555)
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	f240 5254 	movw	r2, #1364	; 0x554
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d801      	bhi.n	8000fd8 <roomSelect+0x18>
	{
		return "ed435";
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <roomSelect+0x40>)
 8000fd6:	e00e      	b.n	8000ff6 <roomSelect+0x36>
	}
	else if(pot < 0xAAA)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d801      	bhi.n	8000fe6 <roomSelect+0x26>
	{
		return "ed486";
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <roomSelect+0x44>)
 8000fe4:	e007      	b.n	8000ff6 <roomSelect+0x36>
	}
	else if(pot < 0xFFF)
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d801      	bhi.n	8000ff4 <roomSelect+0x34>
	{
		return "cl110";
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <roomSelect+0x48>)
 8000ff2:	e000      	b.n	8000ff6 <roomSelect+0x36>
	}
	else
	{
		return "err";
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <roomSelect+0x4c>)
	}
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	08006e60 	.word	0x08006e60
 8001004:	08006e68 	.word	0x08006e68
 8001008:	08006e70 	.word	0x08006e70
 800100c:	08006e78 	.word	0x08006e78

08001010 <lcd_IO_init>:
#include "stm32f1xx.h"
#include "lcd.h"


void lcd_IO_init (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

	//Enable peripheral clocks for ports B and C

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <lcd_IO_init+0x28>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <lcd_IO_init+0x28>)
 800101a:	f043 0318 	orr.w	r3, r3, #24
 800101e:	6193      	str	r3, [r2, #24]

	//Set the config and mode bits for Port B bit 0, 1, and 5 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOB->CRL = 0x44344433;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <lcd_IO_init+0x2c>)
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <lcd_IO_init+0x30>)
 8001024:	601a      	str	r2, [r3, #0]

	//Set the config and mode bits for Port C bits 7 down to 0 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOC->CRL = 0x33333333;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <lcd_IO_init+0x34>)
 8001028:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800102c:	601a      	str	r2, [r3, #0]

}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	40010c00 	.word	0x40010c00
 8001040:	44344433 	.word	0x44344433
 8001044:	40011000 	.word	0x40011000

08001048 <CMD2LCD>:

void CMD2LCD(uint8_t data)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = LCD_CM_ENA;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <CMD2LCD+0x44>)
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <CMD2LCD+0x48>)
 8001056:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <CMD2LCD+0x4c>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <CMD2LCD+0x4c>)
 800105e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001062:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <CMD2LCD+0x4c>)
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	490a      	ldr	r1, [pc, #40]	; (8001094 <CMD2LCD+0x4c>)
 800106c:	4313      	orrs	r3, r2
 800106e:	60cb      	str	r3, [r1, #12]

	HAL_Delay(2);
 8001070:	2002      	movs	r0, #2
 8001072:	f000 fb15 	bl	80016a0 <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_CM_DIS;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <CMD2LCD+0x44>)
 8001078:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800107c:	611a      	str	r2, [r3, #16]

	HAL_Delay(14);
 800107e:	200e      	movs	r0, #14
 8001080:	f000 fb0e 	bl	80016a0 <HAL_Delay>
	//delay(80000);

}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010c00 	.word	0x40010c00
 8001090:	00210002 	.word	0x00210002
 8001094:	40011000 	.word	0x40011000

08001098 <lcd_init>:

void lcd_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	for(int j = 0; j < 3; j++)
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e008      	b.n	80010b6 <lcd_init+0x1e>
	{
		CMD2LCD(0X38);
 80010a4:	2038      	movs	r0, #56	; 0x38
 80010a6:	f7ff ffcf 	bl	8001048 <CMD2LCD>
		HAL_Delay(5);
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 faf8 	bl	80016a0 <HAL_Delay>
	for(int j = 0; j < 3; j++)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3301      	adds	r3, #1
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	ddf3      	ble.n	80010a4 <lcd_init+0xc>
		//delay(24600);
	}

	CMD2LCD(0X38);
 80010bc:	2038      	movs	r0, #56	; 0x38
 80010be:	f7ff ffc3 	bl	8001048 <CMD2LCD>
	HAL_Delay(5);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f000 faec 	bl	80016a0 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X0F);
 80010c8:	200f      	movs	r0, #15
 80010ca:	f7ff ffbd 	bl	8001048 <CMD2LCD>
	HAL_Delay(5);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f000 fae6 	bl	80016a0 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X01);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ffb7 	bl	8001048 <CMD2LCD>
	HAL_Delay(5);
 80010da:	2005      	movs	r0, #5
 80010dc:	f000 fae0 	bl	80016a0 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X06);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f7ff ffb1 	bl	8001048 <CMD2LCD>
	HAL_Delay(5);
 80010e6:	2005      	movs	r0, #5
 80010e8:	f000 fada 	bl	80016a0 <HAL_Delay>
	//delay(24600);

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <DAT2LCD>:

void DAT2LCD(uint8_t data)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = LCD_DM_ENA;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <DAT2LCD+0x44>)
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <DAT2LCD+0x48>)
 8001102:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <DAT2LCD+0x4c>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <DAT2LCD+0x4c>)
 800110a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800110e:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <DAT2LCD+0x4c>)
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	490a      	ldr	r1, [pc, #40]	; (8001140 <DAT2LCD+0x4c>)
 8001118:	4313      	orrs	r3, r2
 800111a:	60cb      	str	r3, [r1, #12]
	HAL_Delay(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f000 fabf 	bl	80016a0 <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_DM_DIS;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <DAT2LCD+0x44>)
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <DAT2LCD+0x50>)
 8001126:	611a      	str	r2, [r3, #16]
	HAL_Delay(14);
 8001128:	200e      	movs	r0, #14
 800112a:	f000 fab9 	bl	80016a0 <HAL_Delay>
	//delay(80000);

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010c00 	.word	0x40010c00
 800113c:	00200003 	.word	0x00200003
 8001140:	40011000 	.word	0x40011000
 8001144:	00220001 	.word	0x00220001

08001148 <char2LCD>:
		break;
	}
}

void char2LCD(char * val)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	//toLower()

	int i = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 8001154:	e160      	b.n	8001418 <char2LCD+0x2d0>
	{
		switch(val[i]){
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3b20      	subs	r3, #32
 8001160:	2b5a      	cmp	r3, #90	; 0x5a
 8001162:	f200 8155 	bhi.w	8001410 <char2LCD+0x2c8>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <char2LCD+0x24>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	080013f9 	.word	0x080013f9
 8001170:	08001411 	.word	0x08001411
 8001174:	08001411 	.word	0x08001411
 8001178:	08001411 	.word	0x08001411
 800117c:	08001411 	.word	0x08001411
 8001180:	08001411 	.word	0x08001411
 8001184:	08001411 	.word	0x08001411
 8001188:	08001411 	.word	0x08001411
 800118c:	08001411 	.word	0x08001411
 8001190:	08001411 	.word	0x08001411
 8001194:	08001411 	.word	0x08001411
 8001198:	08001411 	.word	0x08001411
 800119c:	08001411 	.word	0x08001411
 80011a0:	08001411 	.word	0x08001411
 80011a4:	08001401 	.word	0x08001401
 80011a8:	08001411 	.word	0x08001411
 80011ac:	080012d9 	.word	0x080012d9
 80011b0:	080012e1 	.word	0x080012e1
 80011b4:	080012e9 	.word	0x080012e9
 80011b8:	080012f1 	.word	0x080012f1
 80011bc:	080012f9 	.word	0x080012f9
 80011c0:	08001301 	.word	0x08001301
 80011c4:	08001309 	.word	0x08001309
 80011c8:	08001311 	.word	0x08001311
 80011cc:	08001319 	.word	0x08001319
 80011d0:	08001321 	.word	0x08001321
 80011d4:	08001409 	.word	0x08001409
 80011d8:	08001411 	.word	0x08001411
 80011dc:	08001411 	.word	0x08001411
 80011e0:	08001411 	.word	0x08001411
 80011e4:	08001411 	.word	0x08001411
 80011e8:	08001411 	.word	0x08001411
 80011ec:	08001411 	.word	0x08001411
 80011f0:	08001411 	.word	0x08001411
 80011f4:	08001411 	.word	0x08001411
 80011f8:	08001411 	.word	0x08001411
 80011fc:	08001411 	.word	0x08001411
 8001200:	08001411 	.word	0x08001411
 8001204:	08001411 	.word	0x08001411
 8001208:	08001411 	.word	0x08001411
 800120c:	08001411 	.word	0x08001411
 8001210:	08001411 	.word	0x08001411
 8001214:	08001411 	.word	0x08001411
 8001218:	08001411 	.word	0x08001411
 800121c:	08001411 	.word	0x08001411
 8001220:	08001411 	.word	0x08001411
 8001224:	08001411 	.word	0x08001411
 8001228:	08001411 	.word	0x08001411
 800122c:	08001411 	.word	0x08001411
 8001230:	08001411 	.word	0x08001411
 8001234:	08001411 	.word	0x08001411
 8001238:	08001411 	.word	0x08001411
 800123c:	08001411 	.word	0x08001411
 8001240:	08001411 	.word	0x08001411
 8001244:	08001411 	.word	0x08001411
 8001248:	08001411 	.word	0x08001411
 800124c:	08001411 	.word	0x08001411
 8001250:	08001411 	.word	0x08001411
 8001254:	08001411 	.word	0x08001411
 8001258:	08001411 	.word	0x08001411
 800125c:	08001411 	.word	0x08001411
 8001260:	08001411 	.word	0x08001411
 8001264:	08001411 	.word	0x08001411
 8001268:	08001411 	.word	0x08001411
 800126c:	08001411 	.word	0x08001411
 8001270:	08001329 	.word	0x08001329
 8001274:	08001331 	.word	0x08001331
 8001278:	08001339 	.word	0x08001339
 800127c:	08001341 	.word	0x08001341
 8001280:	08001349 	.word	0x08001349
 8001284:	08001351 	.word	0x08001351
 8001288:	08001359 	.word	0x08001359
 800128c:	08001361 	.word	0x08001361
 8001290:	08001369 	.word	0x08001369
 8001294:	08001371 	.word	0x08001371
 8001298:	08001379 	.word	0x08001379
 800129c:	08001381 	.word	0x08001381
 80012a0:	08001389 	.word	0x08001389
 80012a4:	08001391 	.word	0x08001391
 80012a8:	08001399 	.word	0x08001399
 80012ac:	080013a1 	.word	0x080013a1
 80012b0:	080013a9 	.word	0x080013a9
 80012b4:	080013b1 	.word	0x080013b1
 80012b8:	080013b9 	.word	0x080013b9
 80012bc:	080013c1 	.word	0x080013c1
 80012c0:	080013c9 	.word	0x080013c9
 80012c4:	080013d1 	.word	0x080013d1
 80012c8:	080013d9 	.word	0x080013d9
 80012cc:	080013e1 	.word	0x080013e1
 80012d0:	080013e9 	.word	0x080013e9
 80012d4:	080013f1 	.word	0x080013f1
		case '0':
			DAT2LCD(0x30);
 80012d8:	2030      	movs	r0, #48	; 0x30
 80012da:	f7ff ff0b 	bl	80010f4 <DAT2LCD>
			break;
 80012de:	e098      	b.n	8001412 <char2LCD+0x2ca>

		case '1':
			DAT2LCD(0x31);
 80012e0:	2031      	movs	r0, #49	; 0x31
 80012e2:	f7ff ff07 	bl	80010f4 <DAT2LCD>
			break;
 80012e6:	e094      	b.n	8001412 <char2LCD+0x2ca>

		case '2':
			DAT2LCD(0x32);
 80012e8:	2032      	movs	r0, #50	; 0x32
 80012ea:	f7ff ff03 	bl	80010f4 <DAT2LCD>
			break;
 80012ee:	e090      	b.n	8001412 <char2LCD+0x2ca>

		case '3':
			DAT2LCD(0x33);
 80012f0:	2033      	movs	r0, #51	; 0x33
 80012f2:	f7ff feff 	bl	80010f4 <DAT2LCD>
			break;
 80012f6:	e08c      	b.n	8001412 <char2LCD+0x2ca>

		case '4':
			DAT2LCD(0x34);
 80012f8:	2034      	movs	r0, #52	; 0x34
 80012fa:	f7ff fefb 	bl	80010f4 <DAT2LCD>
			break;
 80012fe:	e088      	b.n	8001412 <char2LCD+0x2ca>

		case '5':
			DAT2LCD(0x35);
 8001300:	2035      	movs	r0, #53	; 0x35
 8001302:	f7ff fef7 	bl	80010f4 <DAT2LCD>
			break;
 8001306:	e084      	b.n	8001412 <char2LCD+0x2ca>

		case '6':
			DAT2LCD(0x36);
 8001308:	2036      	movs	r0, #54	; 0x36
 800130a:	f7ff fef3 	bl	80010f4 <DAT2LCD>
			break;
 800130e:	e080      	b.n	8001412 <char2LCD+0x2ca>

		case '7':
			DAT2LCD(0x37);
 8001310:	2037      	movs	r0, #55	; 0x37
 8001312:	f7ff feef 	bl	80010f4 <DAT2LCD>
			break;
 8001316:	e07c      	b.n	8001412 <char2LCD+0x2ca>

		case '8':
			DAT2LCD(0x38);
 8001318:	2038      	movs	r0, #56	; 0x38
 800131a:	f7ff feeb 	bl	80010f4 <DAT2LCD>
			break;
 800131e:	e078      	b.n	8001412 <char2LCD+0x2ca>

		case '9':
			DAT2LCD(0x39);
 8001320:	2039      	movs	r0, #57	; 0x39
 8001322:	f7ff fee7 	bl	80010f4 <DAT2LCD>
			break;
 8001326:	e074      	b.n	8001412 <char2LCD+0x2ca>

		case 'a':
			DAT2LCD(0x41);
 8001328:	2041      	movs	r0, #65	; 0x41
 800132a:	f7ff fee3 	bl	80010f4 <DAT2LCD>
			break;
 800132e:	e070      	b.n	8001412 <char2LCD+0x2ca>

		case 'b':
			DAT2LCD(0x42);
 8001330:	2042      	movs	r0, #66	; 0x42
 8001332:	f7ff fedf 	bl	80010f4 <DAT2LCD>
			break;
 8001336:	e06c      	b.n	8001412 <char2LCD+0x2ca>

		case 'c':
			DAT2LCD(0x43);
 8001338:	2043      	movs	r0, #67	; 0x43
 800133a:	f7ff fedb 	bl	80010f4 <DAT2LCD>
			break;
 800133e:	e068      	b.n	8001412 <char2LCD+0x2ca>

		case 'd':
			DAT2LCD(0x44);
 8001340:	2044      	movs	r0, #68	; 0x44
 8001342:	f7ff fed7 	bl	80010f4 <DAT2LCD>
			break;
 8001346:	e064      	b.n	8001412 <char2LCD+0x2ca>

		case 'e':
			DAT2LCD(0x45);
 8001348:	2045      	movs	r0, #69	; 0x45
 800134a:	f7ff fed3 	bl	80010f4 <DAT2LCD>
			break;
 800134e:	e060      	b.n	8001412 <char2LCD+0x2ca>

		case 'f':
			DAT2LCD(0x46);
 8001350:	2046      	movs	r0, #70	; 0x46
 8001352:	f7ff fecf 	bl	80010f4 <DAT2LCD>
			break;
 8001356:	e05c      	b.n	8001412 <char2LCD+0x2ca>

		case 'g':
			DAT2LCD(0x47);
 8001358:	2047      	movs	r0, #71	; 0x47
 800135a:	f7ff fecb 	bl	80010f4 <DAT2LCD>
			break;
 800135e:	e058      	b.n	8001412 <char2LCD+0x2ca>

		case 'h':
			DAT2LCD(0x48);
 8001360:	2048      	movs	r0, #72	; 0x48
 8001362:	f7ff fec7 	bl	80010f4 <DAT2LCD>
			break;
 8001366:	e054      	b.n	8001412 <char2LCD+0x2ca>

		case 'i':
			DAT2LCD(0x49);
 8001368:	2049      	movs	r0, #73	; 0x49
 800136a:	f7ff fec3 	bl	80010f4 <DAT2LCD>
			break;
 800136e:	e050      	b.n	8001412 <char2LCD+0x2ca>

		case 'j':
			DAT2LCD(0x4A);
 8001370:	204a      	movs	r0, #74	; 0x4a
 8001372:	f7ff febf 	bl	80010f4 <DAT2LCD>
			break;
 8001376:	e04c      	b.n	8001412 <char2LCD+0x2ca>

		case 'k':
			DAT2LCD(0x4B);
 8001378:	204b      	movs	r0, #75	; 0x4b
 800137a:	f7ff febb 	bl	80010f4 <DAT2LCD>
			break;
 800137e:	e048      	b.n	8001412 <char2LCD+0x2ca>

		case 'l':
			DAT2LCD(0x4C);
 8001380:	204c      	movs	r0, #76	; 0x4c
 8001382:	f7ff feb7 	bl	80010f4 <DAT2LCD>
			break;
 8001386:	e044      	b.n	8001412 <char2LCD+0x2ca>

		case 'm':
			DAT2LCD(0x4D);
 8001388:	204d      	movs	r0, #77	; 0x4d
 800138a:	f7ff feb3 	bl	80010f4 <DAT2LCD>
			break;
 800138e:	e040      	b.n	8001412 <char2LCD+0x2ca>

		case 'n':
			DAT2LCD(0x4E);
 8001390:	204e      	movs	r0, #78	; 0x4e
 8001392:	f7ff feaf 	bl	80010f4 <DAT2LCD>
			break;
 8001396:	e03c      	b.n	8001412 <char2LCD+0x2ca>

		case 'o':
			DAT2LCD(0x4F);
 8001398:	204f      	movs	r0, #79	; 0x4f
 800139a:	f7ff feab 	bl	80010f4 <DAT2LCD>
			break;
 800139e:	e038      	b.n	8001412 <char2LCD+0x2ca>

		case 'p':
			DAT2LCD(0x50);
 80013a0:	2050      	movs	r0, #80	; 0x50
 80013a2:	f7ff fea7 	bl	80010f4 <DAT2LCD>
			break;
 80013a6:	e034      	b.n	8001412 <char2LCD+0x2ca>

		case 'q':
			DAT2LCD(0x51);
 80013a8:	2051      	movs	r0, #81	; 0x51
 80013aa:	f7ff fea3 	bl	80010f4 <DAT2LCD>
			break;
 80013ae:	e030      	b.n	8001412 <char2LCD+0x2ca>

		case 'r':
			DAT2LCD(0x52);
 80013b0:	2052      	movs	r0, #82	; 0x52
 80013b2:	f7ff fe9f 	bl	80010f4 <DAT2LCD>
			break;
 80013b6:	e02c      	b.n	8001412 <char2LCD+0x2ca>

		case 's':
			DAT2LCD(0x53);
 80013b8:	2053      	movs	r0, #83	; 0x53
 80013ba:	f7ff fe9b 	bl	80010f4 <DAT2LCD>
			break;
 80013be:	e028      	b.n	8001412 <char2LCD+0x2ca>

		case 't':
			DAT2LCD(0x54);
 80013c0:	2054      	movs	r0, #84	; 0x54
 80013c2:	f7ff fe97 	bl	80010f4 <DAT2LCD>
			break;
 80013c6:	e024      	b.n	8001412 <char2LCD+0x2ca>

		case 'u':
			DAT2LCD(0x55);
 80013c8:	2055      	movs	r0, #85	; 0x55
 80013ca:	f7ff fe93 	bl	80010f4 <DAT2LCD>
			break;
 80013ce:	e020      	b.n	8001412 <char2LCD+0x2ca>

		case 'v':
			DAT2LCD(0x56);
 80013d0:	2056      	movs	r0, #86	; 0x56
 80013d2:	f7ff fe8f 	bl	80010f4 <DAT2LCD>
			break;
 80013d6:	e01c      	b.n	8001412 <char2LCD+0x2ca>

		case 'w':
			DAT2LCD(0x57);
 80013d8:	2057      	movs	r0, #87	; 0x57
 80013da:	f7ff fe8b 	bl	80010f4 <DAT2LCD>
			break;
 80013de:	e018      	b.n	8001412 <char2LCD+0x2ca>

		case 'x':
			DAT2LCD(0x58);
 80013e0:	2058      	movs	r0, #88	; 0x58
 80013e2:	f7ff fe87 	bl	80010f4 <DAT2LCD>
			break;
 80013e6:	e014      	b.n	8001412 <char2LCD+0x2ca>

		case 'y':
			DAT2LCD(0x59);
 80013e8:	2059      	movs	r0, #89	; 0x59
 80013ea:	f7ff fe83 	bl	80010f4 <DAT2LCD>
			break;
 80013ee:	e010      	b.n	8001412 <char2LCD+0x2ca>

		case 'z':
			DAT2LCD(0x5A);
 80013f0:	205a      	movs	r0, #90	; 0x5a
 80013f2:	f7ff fe7f 	bl	80010f4 <DAT2LCD>
			break;
 80013f6:	e00c      	b.n	8001412 <char2LCD+0x2ca>

		case ' ':
			DAT2LCD(0x20);
 80013f8:	2020      	movs	r0, #32
 80013fa:	f7ff fe7b 	bl	80010f4 <DAT2LCD>
			break;
 80013fe:	e008      	b.n	8001412 <char2LCD+0x2ca>

		case '.':
			DAT2LCD(0x2E);
 8001400:	202e      	movs	r0, #46	; 0x2e
 8001402:	f7ff fe77 	bl	80010f4 <DAT2LCD>
			break;
 8001406:	e004      	b.n	8001412 <char2LCD+0x2ca>

		case ':':
			DAT2LCD(0x3A);
 8001408:	203a      	movs	r0, #58	; 0x3a
 800140a:	f7ff fe73 	bl	80010f4 <DAT2LCD>
			break;
 800140e:	e000      	b.n	8001412 <char2LCD+0x2ca>

		default:
			break;
 8001410:	bf00      	nop
		}
		i++;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f ae98 	bne.w	8001156 <char2LCD+0xe>
	}
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop

08001430 <CO2Conversion>:

#include "sensors.h"


uint16_t CO2Conversion(uint32_t input)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 if(input == 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <CO2Conversion+0x12>
 {
  return 0; /*this should print fault*/
 800143e:	2300      	movs	r3, #0
 8001440:	e010      	b.n	8001464 <CO2Conversion+0x34>
 }
 else if((input) < 400)  /*preheating voltage is from 0.2 to 0.4 */
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001448:	d202      	bcs.n	8001450 <CO2Conversion+0x20>
 {
  return -1; /* this should print "preheating CO2"*/
 800144a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144e:	e009      	b.n	8001464 <CO2Conversion+0x34>
 }
 else 
 {
  uint16_t voltagedif = (input - 400) * 50 / 16; /*this is for voltage to PPM conversion*/
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2232      	movs	r2, #50	; 0x32
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 800145c:	3b20      	subs	r3, #32
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	81fb      	strh	r3, [r7, #14]
  return voltagedif;
 8001462:	89fb      	ldrh	r3, [r7, #14]
  }
 /*CO2 has a 100ms delay before looping*/
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
	...

08001470 <TempConversion>:

uint16_t TempConversion(uint32_t input)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return input / 10;   /* voltage to degree celsius conversion*/
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <TempConversion+0x20>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b29b      	uxth	r3, r3
  /* has an 500ms delay before looping*/
 }
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	cccccccd 	.word	0xcccccccd

08001494 <NoiseConversion>:

uint16_t NoiseConversion(uint32_t input)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 uint16_t PinVoltage;
//  PinVoltage = (input) / 1024.0 * 5.0;   /* 5.0 is voltage that is powering sensor */
//  return PinVoltage * 50.0; /* 50.0 is voltage to dB conversion value */
 /* has an 125ms delay before looping*/

input = (float)input / 1000 * 50;
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7fe ff0d 	bl	80002bc <__aeabi_ui2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	490a      	ldr	r1, [pc, #40]	; (80014d0 <NoiseConversion+0x3c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f814 	bl	80004d4 <__aeabi_fdiv>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4909      	ldr	r1, [pc, #36]	; (80014d4 <NoiseConversion+0x40>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ff5b 	bl	800036c <__aeabi_fmul>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f8a7 	bl	800060c <__aeabi_f2uiz>
 80014be:	4603      	mov	r3, r0
 80014c0:	607b      	str	r3, [r7, #4]

// input = input - 600;
// input /= 20;
// input += 30;
 return input;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	b29b      	uxth	r3, r3

}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	447a0000 	.word	0x447a0000
 80014d4:	42480000 	.word	0x42480000

080014d8 <CO2_Select>:

void CO2_Select(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <CO2_Select+0x38>)
 80014fa:	f000 fbab 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <CO2_Select+0x30>
	{
		Error_Handler();
 8001504:	f7ff fbb0 	bl	8000c68 <Error_Handler>
	}
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200019b8 	.word	0x200019b8

08001514 <TEMP_Select>:

void TEMP_Select(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 8001524:	2304      	movs	r3, #4
 8001526:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001528:	2301      	movs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <TEMP_Select+0x34>)
 8001532:	f000 fb8f 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <TEMP_Select+0x2c>
	{
		Error_Handler();
 800153c:	f7ff fb94 	bl	8000c68 <Error_Handler>
	}
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200019b8 	.word	0x200019b8

0800154c <NOISE_Select>:

void NOISE_Select(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_6;
 800155c:	2306      	movs	r3, #6
 800155e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001560:	2301      	movs	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <NOISE_Select+0x34>)
 800156a:	f000 fb73 	bl	8001c54 <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <NOISE_Select+0x2c>
	{
		Error_Handler();
 8001574:	f7ff fb78 	bl	8000c68 <Error_Handler>
	}
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200019b8 	.word	0x200019b8

08001584 <POT_Select>:

void POT_Select(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_7;
 8001594:	2307      	movs	r3, #7
 8001596:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001598:	2301      	movs	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <POT_Select+0x34>)
 80015a2:	f000 fb57 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <POT_Select+0x2c>
	{
		Error_Handler();
 80015ac:	f7ff fb5c 	bl	8000c68 <Error_Handler>
	}
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200019b8 	.word	0x200019b8

080015bc <ADC_Read>:

uint32_t ADC_Read(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint32_t temp;
	HAL_ADC_Start(&hadc1);
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <ADC_Read+0x30>)
 80015c4:	f000 f966 	bl	8001894 <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 1000);
 80015c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <ADC_Read+0x30>)
 80015ce:	f000 fa3b 	bl	8001a48 <HAL_ADC_PollForConversion>
	temp = HAL_ADC_GetValue(&hadc1);
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <ADC_Read+0x30>)
 80015d4:	f000 fb32 	bl	8001c3c <HAL_ADC_GetValue>
 80015d8:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80015da:	4804      	ldr	r0, [pc, #16]	; (80015ec <ADC_Read+0x30>)
 80015dc:	f000 fa08 	bl	80019f0 <HAL_ADC_Stop>
	return temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200019b8 	.word	0x200019b8

080015f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015f2:	e003      	b.n	80015fc <LoopCopyDataInit>

080015f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015fa:	3104      	adds	r1, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001600:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001604:	d3f6      	bcc.n	80015f4 <CopyDataInit>
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001608:	e002      	b.n	8001610 <LoopFillZerobss>

0800160a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800160c:	f842 3b04 	str.w	r3, [r2], #4

08001610 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001612:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001614:	d3f9      	bcc.n	800160a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff fc93 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f004 ff8d 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161e:	f7ff f815 	bl	800064c <main>
  bx lr
 8001622:	4770      	bx	lr
  ldr r3, =_sidata
 8001624:	08006fc4 	.word	0x08006fc4
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800162c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001630:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001634:	20001ae4 	.word	0x20001ae4

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_Init+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_Init+0x28>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 fd2f 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff fbc6 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fb0c 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x20>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000008 	.word	0x20000008
 8001688:	20001a9c 	.word	0x20001a9c

0800168c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_GetTick+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20001a9c 	.word	0x20001a9c

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff fff0 	bl	800168c <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_Delay+0x40>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffe0 	bl	800168c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0be      	b.n	8001884 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fad8 	bl	8000cd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fbdd 	bl	8001ee8 <ADC_ConversionStop_Disable>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8099 	bne.w	8001872 <HAL_ADC_Init+0x18e>
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8095 	bne.w	8001872 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001750:	f023 0302 	bic.w	r3, r3, #2
 8001754:	f043 0202 	orr.w	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001764:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7b1b      	ldrb	r3, [r3, #12]
 800176a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800176c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4313      	orrs	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177c:	d003      	beq.n	8001786 <HAL_ADC_Init+0xa2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_ADC_Init+0xa8>
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	e000      	b.n	800178e <HAL_ADC_Init+0xaa>
 800178c:	2300      	movs	r3, #0
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7d1b      	ldrb	r3, [r3, #20]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d119      	bne.n	80017d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	035a      	lsls	r2, r3, #13
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e00b      	b.n	80017d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f043 0220 	orr.w	r2, r3, #32
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_ADC_Init+0x1a8>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001800:	d003      	beq.n	800180a <HAL_ADC_Init+0x126>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d104      	bne.n	8001814 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	3b01      	subs	r3, #1
 8001810:	051b      	lsls	r3, r3, #20
 8001812:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	430a      	orrs	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_ADC_Init+0x1ac>)
 8001830:	4013      	ands	r3, r2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d10b      	bne.n	8001850 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184e:	e018      	b.n	8001882 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f023 0312 	bic.w	r3, r3, #18
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001870:	e007      	b.n	8001882 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001882:	7dfb      	ldrb	r3, [r7, #23]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	ffe1f7fd 	.word	0xffe1f7fd
 8001890:	ff1f0efe 	.word	0xff1f0efe

08001894 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Start+0x1a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e098      	b.n	80019e0 <HAL_ADC_Start+0x14c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fac4 	bl	8001e44 <ADC_Enable>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8087 	bne.w	80019d6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a41      	ldr	r2, [pc, #260]	; (80019e8 <HAL_ADC_Start+0x154>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_Start+0x5e>
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_ADC_Start+0x158>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d115      	bne.n	800191e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	2b00      	cmp	r3, #0
 800190a:	d026      	beq.n	800195a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001914:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800191c:	e01d      	b.n	800195a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <HAL_ADC_Start+0x158>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <HAL_ADC_Start+0xaa>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <HAL_ADC_Start+0x154>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10d      	bne.n	800195a <HAL_ADC_Start+0xc6>
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_ADC_Start+0x158>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001952:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f023 0206 	bic.w	r2, r3, #6
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
 8001972:	e002      	b.n	800197a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f06f 0202 	mvn.w	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001996:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800199a:	d113      	bne.n	80019c4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_ADC_Start+0x154>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d105      	bne.n	80019b2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_ADC_Start+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	e00c      	b.n	80019de <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	e003      	b.n	80019de <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40012800 	.word	0x40012800
 80019ec:	40012400 	.word	0x40012400

080019f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Stop+0x1a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e01a      	b.n	8001a40 <HAL_ADC_Stop+0x50>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa68 	bl	8001ee8 <ADC_ConversionStop_Disable>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a5e:	f7ff fe15 	bl	800168c <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0c8      	b.n	8001c1c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12a      	bne.n	8001aee <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d123      	bne.n	8001aee <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aa6:	e01a      	b.n	8001ade <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aae:	d016      	beq.n	8001ade <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0x7e>
 8001ab6:	f7ff fde9 	bl	800168c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d20b      	bcs.n	8001ade <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f043 0204 	orr.w	r2, r3, #4
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e09e      	b.n	8001c1c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0dd      	beq.n	8001aa8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aec:	e06c      	b.n	8001bc8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_ADC_PollForConversion+0x1dc>)
 8001af0:	681c      	ldr	r4, [r3, #0]
 8001af2:	2002      	movs	r0, #2
 8001af4:	f001 f99e 	bl	8002e34 <HAL_RCCEx_GetPeriphCLKFreq>
 8001af8:	4603      	mov	r3, r0
 8001afa:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6919      	ldr	r1, [r3, #16]
 8001b04:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <HAL_ADC_PollForConversion+0x1e0>)
 8001b06:	400b      	ands	r3, r1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_ADC_PollForConversion+0xf6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_ADC_PollForConversion+0x1e4>)
 8001b14:	400b      	ands	r3, r1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d111      	bne.n	8001b3e <HAL_ADC_PollForConversion+0xf6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6919      	ldr	r1, [r3, #16]
 8001b20:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_ADC_PollForConversion+0x1e8>)
 8001b22:	400b      	ands	r3, r1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d108      	bne.n	8001b3a <HAL_ADC_PollForConversion+0xf2>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_ADC_PollForConversion+0x1ec>)
 8001b30:	400b      	ands	r3, r1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_PollForConversion+0xf2>
 8001b36:	2314      	movs	r3, #20
 8001b38:	e020      	b.n	8001b7c <HAL_ADC_PollForConversion+0x134>
 8001b3a:	2329      	movs	r3, #41	; 0x29
 8001b3c:	e01e      	b.n	8001b7c <HAL_ADC_PollForConversion+0x134>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6919      	ldr	r1, [r3, #16]
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_ADC_PollForConversion+0x1e8>)
 8001b46:	400b      	ands	r3, r1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d106      	bne.n	8001b5a <HAL_ADC_PollForConversion+0x112>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68d9      	ldr	r1, [r3, #12]
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_ADC_PollForConversion+0x1ec>)
 8001b54:	400b      	ands	r3, r1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <HAL_ADC_PollForConversion+0x12e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6919      	ldr	r1, [r3, #16]
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_ADC_PollForConversion+0x1f0>)
 8001b62:	400b      	ands	r3, r1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d108      	bne.n	8001b7a <HAL_ADC_PollForConversion+0x132>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_ADC_PollForConversion+0x1f0>)
 8001b70:	400b      	ands	r3, r1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_PollForConversion+0x132>
 8001b76:	2354      	movs	r3, #84	; 0x54
 8001b78:	e000      	b.n	8001b7c <HAL_ADC_PollForConversion+0x134>
 8001b7a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b82:	e01d      	b.n	8001bc0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b8a:	d016      	beq.n	8001bba <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_ADC_PollForConversion+0x15a>
 8001b92:	f7ff fd7b 	bl	800168c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20b      	bcs.n	8001bba <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f043 0204 	orr.w	r2, r3, #4
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e030      	b.n	8001c1c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8dd      	bhi.n	8001b84 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0212 	mvn.w	r2, #18
 8001bd0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001be8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bec:	d115      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d111      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	20000000 	.word	0x20000000
 8001c28:	24924924 	.word	0x24924924
 8001c2c:	00924924 	.word	0x00924924
 8001c30:	12492492 	.word	0x12492492
 8001c34:	00492492 	.word	0x00492492
 8001c38:	00249249 	.word	0x00249249

08001c3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x20>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0dc      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1da>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d81c      	bhi.n	8001cbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b05      	subs	r3, #5
 8001c96:	221f      	movs	r2, #31
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b05      	subs	r3, #5
 8001cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
 8001cbc:	e03c      	b.n	8001d38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d81c      	bhi.n	8001d00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b23      	subs	r3, #35	; 0x23
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	4019      	ands	r1, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b23      	subs	r3, #35	; 0x23
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	e01b      	b.n	8001d38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b41      	subs	r3, #65	; 0x41
 8001d12:	221f      	movs	r2, #31
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b41      	subs	r3, #65	; 0x41
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d91c      	bls.n	8001d7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6898      	ldr	r0, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	e019      	b.n	8001dae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6919      	ldr	r1, [r3, #16]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dba:	2b11      	cmp	r3, #17
 8001dbc:	d132      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d125      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d126      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001de4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d11a      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	0c9a      	lsrs	r2, r3, #18
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e04:	e002      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f9      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x1b2>
 8001e12:	e007      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f043 0220 	orr.w	r2, r3, #32
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40012400 	.word	0x40012400
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	431bde83 	.word	0x431bde83

08001e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d039      	beq.n	8001ed6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <ADC_Enable+0x9c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <ADC_Enable+0xa0>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e80:	e002      	b.n	8001e88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e8e:	f7ff fbfd 	bl	800168c <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e94:	e018      	b.n	8001ec8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e96:	f7ff fbf9 	bl	800168c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d911      	bls.n	8001ec8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e007      	b.n	8001ed8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d1df      	bne.n	8001e96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d127      	bne.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f12:	f7ff fbbb 	bl	800168c <HAL_GetTick>
 8001f16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f18:	e014      	b.n	8001f44 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f1a:	f7ff fbb7 	bl	800168c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d90d      	bls.n	8001f44 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f043 0210 	orr.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e007      	b.n	8001f54 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d0e3      	beq.n	8001f1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4906      	ldr	r1, [pc, #24]	; (8001ff4 <__NVIC_EnableIRQ+0x34>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff4f 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff64 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ffb2 	bl	800204c <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff81 	bl	8001ff8 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff57 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b08b      	sub	sp, #44	; 0x2c
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212e:	e127      	b.n	8002380 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002130:	2201      	movs	r2, #1
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8116 	bne.w	800237a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b12      	cmp	r3, #18
 8002154:	d034      	beq.n	80021c0 <HAL_GPIO_Init+0xa4>
 8002156:	2b12      	cmp	r3, #18
 8002158:	d80d      	bhi.n	8002176 <HAL_GPIO_Init+0x5a>
 800215a:	2b02      	cmp	r3, #2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x9a>
 800215e:	2b02      	cmp	r3, #2
 8002160:	d804      	bhi.n	800216c <HAL_GPIO_Init+0x50>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d031      	beq.n	80021ca <HAL_GPIO_Init+0xae>
 8002166:	2b01      	cmp	r3, #1
 8002168:	d01c      	beq.n	80021a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216a:	e048      	b.n	80021fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800216c:	2b03      	cmp	r3, #3
 800216e:	d043      	beq.n	80021f8 <HAL_GPIO_Init+0xdc>
 8002170:	2b11      	cmp	r3, #17
 8002172:	d01b      	beq.n	80021ac <HAL_GPIO_Init+0x90>
          break;
 8002174:	e043      	b.n	80021fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002176:	4a89      	ldr	r2, [pc, #548]	; (800239c <HAL_GPIO_Init+0x280>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d026      	beq.n	80021ca <HAL_GPIO_Init+0xae>
 800217c:	4a87      	ldr	r2, [pc, #540]	; (800239c <HAL_GPIO_Init+0x280>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d806      	bhi.n	8002190 <HAL_GPIO_Init+0x74>
 8002182:	4a87      	ldr	r2, [pc, #540]	; (80023a0 <HAL_GPIO_Init+0x284>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d020      	beq.n	80021ca <HAL_GPIO_Init+0xae>
 8002188:	4a86      	ldr	r2, [pc, #536]	; (80023a4 <HAL_GPIO_Init+0x288>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01d      	beq.n	80021ca <HAL_GPIO_Init+0xae>
          break;
 800218e:	e036      	b.n	80021fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002190:	4a85      	ldr	r2, [pc, #532]	; (80023a8 <HAL_GPIO_Init+0x28c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0xae>
 8002196:	4a85      	ldr	r2, [pc, #532]	; (80023ac <HAL_GPIO_Init+0x290>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d016      	beq.n	80021ca <HAL_GPIO_Init+0xae>
 800219c:	4a84      	ldr	r2, [pc, #528]	; (80023b0 <HAL_GPIO_Init+0x294>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0xae>
          break;
 80021a2:	e02c      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e028      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	3304      	adds	r3, #4
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e023      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	3308      	adds	r3, #8
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e01e      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	330c      	adds	r3, #12
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e019      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021d2:	2304      	movs	r3, #4
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e012      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e0:	2308      	movs	r3, #8
 80021e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	611a      	str	r2, [r3, #16]
          break;
 80021ea:	e008      	b.n	80021fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ec:	2308      	movs	r3, #8
 80021ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	615a      	str	r2, [r3, #20]
          break;
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d801      	bhi.n	8002208 <HAL_GPIO_Init+0xec>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	e001      	b.n	800220c <HAL_GPIO_Init+0xf0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2bff      	cmp	r3, #255	; 0xff
 8002212:	d802      	bhi.n	800221a <HAL_GPIO_Init+0xfe>
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x104>
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	3b08      	subs	r3, #8
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	210f      	movs	r1, #15
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	401a      	ands	r2, r3
 8002232:	6a39      	ldr	r1, [r7, #32]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	431a      	orrs	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8096 	beq.w	800237a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800224e:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_GPIO_Init+0x298>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_GPIO_Init+0x298>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6193      	str	r3, [r2, #24]
 800225a:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <HAL_GPIO_Init+0x298>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002266:	4a54      	ldr	r2, [pc, #336]	; (80023b8 <HAL_GPIO_Init+0x29c>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_GPIO_Init+0x2a0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0x19e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_GPIO_Init+0x2a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_Init+0x19a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a49      	ldr	r2, [pc, #292]	; (80023c4 <HAL_GPIO_Init+0x2a8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x196>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_GPIO_Init+0x2ac>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_Init+0x192>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x1a0>
 80022ae:	2304      	movs	r3, #4
 80022b0:	e004      	b.n	80022bc <HAL_GPIO_Init+0x1a0>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_Init+0x1a0>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x1a0>
 80022ba:	2300      	movs	r3, #0
 80022bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022be:	f002 0203 	and.w	r2, r2, #3
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	4093      	lsls	r3, r2
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022cc:	493a      	ldr	r1, [pc, #232]	; (80023b8 <HAL_GPIO_Init+0x29c>)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022e6:	4b39      	ldr	r3, [pc, #228]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4938      	ldr	r1, [pc, #224]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	e006      	b.n	8002302 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f4:	4b35      	ldr	r3, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4933      	ldr	r1, [pc, #204]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 80022fe:	4013      	ands	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	492e      	ldr	r1, [pc, #184]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	43db      	mvns	r3, r3
 8002324:	4929      	ldr	r1, [pc, #164]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002326:	4013      	ands	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	4924      	ldr	r1, [pc, #144]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
 8002342:	e006      	b.n	8002352 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	43db      	mvns	r3, r3
 800234c:	491f      	ldr	r1, [pc, #124]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 800234e:	4013      	ands	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	491a      	ldr	r1, [pc, #104]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	60cb      	str	r3, [r1, #12]
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4915      	ldr	r1, [pc, #84]	; (80023cc <HAL_GPIO_Init+0x2b0>)
 8002376:	4013      	ands	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f aed0 	bne.w	8002130 <HAL_GPIO_Init+0x14>
  }
}
 8002390:	bf00      	nop
 8002392:	372c      	adds	r7, #44	; 0x2c
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	10210000 	.word	0x10210000
 80023a0:	10110000 	.word	0x10110000
 80023a4:	10120000 	.word	0x10120000
 80023a8:	10310000 	.word	0x10310000
 80023ac:	10320000 	.word	0x10320000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40011400 	.word	0x40011400
 80023cc:	40010400 	.word	0x40010400

080023d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e001      	b.n	80023f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
 800240a:	4613      	mov	r3, r2
 800240c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240e:	787b      	ldrb	r3, [r7, #1]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800241a:	e003      	b.n	8002424 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	041a      	lsls	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
	...

08002430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e26c      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	4b92      	ldr	r3, [pc, #584]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00c      	beq.n	8002476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800245c:	4b8f      	ldr	r3, [pc, #572]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d112      	bne.n	800248e <HAL_RCC_OscConfig+0x5e>
 8002468:	4b8c      	ldr	r3, [pc, #560]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002476:	4b89      	ldr	r3, [pc, #548]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d06c      	beq.n	800255c <HAL_RCC_OscConfig+0x12c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d168      	bne.n	800255c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e246      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x76>
 8002498:	4b80      	ldr	r3, [pc, #512]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7f      	ldr	r2, [pc, #508]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e02e      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b7b      	ldr	r3, [pc, #492]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7a      	ldr	r2, [pc, #488]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a77      	ldr	r2, [pc, #476]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0xbc>
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a71      	ldr	r2, [pc, #452]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6e      	ldr	r2, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024ec:	4b6b      	ldr	r3, [pc, #428]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6a      	ldr	r2, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a67      	ldr	r2, [pc, #412]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff f8be 	bl	800168c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff f8ba 	bl	800168c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1fa      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5d      	ldr	r3, [pc, #372]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xe4>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff f8aa 	bl	800168c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff f8a6 	bl	800168c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1e6      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x10c>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002576:	4b49      	ldr	r3, [pc, #292]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x18c>
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x176>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1ba      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4939      	ldr	r1, [pc, #228]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff f85f 	bl	800168c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff f85b 	bl	800168c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e19b      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4927      	ldr	r1, [pc, #156]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff f83e 	bl	800168c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7ff f83a 	bl	800168c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e17a      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03a      	beq.n	80026b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d019      	beq.n	800267a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCC_OscConfig+0x274>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7ff f81e 	bl	800168c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7ff f81a 	bl	800168c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e15a      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f000 fb0a 	bl	8002c8c <RCC_Delay>
 8002678:	e01c      	b.n	80026b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_OscConfig+0x274>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7ff f804 	bl	800168c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002686:	e00f      	b.n	80026a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7ff f800 	bl	800168c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d908      	bls.n	80026a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e140      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	42420000 	.word	0x42420000
 80026a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b9e      	ldr	r3, [pc, #632]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e9      	bne.n	8002688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a6 	beq.w	800280e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b97      	ldr	r3, [pc, #604]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b94      	ldr	r3, [pc, #592]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a93      	ldr	r2, [pc, #588]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]
 80026de:	4b91      	ldr	r3, [pc, #580]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b8e      	ldr	r3, [pc, #568]	; (8002928 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a8a      	ldr	r2, [pc, #552]	; (8002928 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7fe ffc1 	bl	800168c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7fe ffbd 	bl	800168c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	; 0x64
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0fd      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x312>
 8002734:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	e02d      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x334>
 800274a:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a75      	ldr	r2, [pc, #468]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a72      	ldr	r2, [pc, #456]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	e01c      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x356>
 800276c:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a6c      	ldr	r2, [pc, #432]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a69      	ldr	r2, [pc, #420]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a66      	ldr	r2, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6213      	str	r3, [r2, #32]
 8002792:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d015      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe ff71 	bl	800168c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe ff6d 	bl	800168c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0ab      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ee      	beq.n	80027ae <HAL_RCC_OscConfig+0x37e>
 80027d0:	e014      	b.n	80027fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe ff5b 	bl	800168c <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe ff57 	bl	800168c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e095      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ee      	bne.n	80027da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a47      	ldr	r2, [pc, #284]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8081 	beq.w	800291a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002818:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d061      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d146      	bne.n	80028ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	4b3f      	ldr	r3, [pc, #252]	; (800292c <HAL_RCC_OscConfig+0x4fc>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe ff2b 	bl	800168c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe ff27 	bl	800168c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e067      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	492d      	ldr	r1, [pc, #180]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a19      	ldr	r1, [r3, #32]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	430b      	orrs	r3, r1
 8002886:	4927      	ldr	r1, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x4fc>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fefb 	bl	800168c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fef7 	bl	800168c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e037      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x46a>
 80028b8:	e02f      	b.n	800291a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_RCC_OscConfig+0x4fc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fee4 	bl	800168c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fee0 	bl	800168c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e020      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x498>
 80028e6:	e018      	b.n	800291a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e013      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	429a      	cmp	r2, r3
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40007000 	.word	0x40007000
 800292c:	42420060 	.word	0x42420060

08002930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0d0      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d910      	bls.n	8002974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4965      	ldr	r1, [pc, #404]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d040      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d115      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e073      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06b      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4936      	ldr	r1, [pc, #216]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fe34 	bl	800168c <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fe fe30 	bl	800168c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e053      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d210      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 0207 	bic.w	r2, r3, #7
 8002a66:	4922      	ldr	r1, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4601      	mov	r1, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1cc>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1d0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe f980 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08006f70 	.word	0x08006f70
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	b490      	push	{r4, r7}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b0c:	1d3c      	adds	r4, r7, #4
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x46>
 8002b42:	e02d      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b46:	623b      	str	r3, [r7, #32]
      break;
 8002b48:	e02d      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	0c9b      	lsrs	r3, r3, #18
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b56:	4413      	add	r3, r2
 8002b58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0c5b      	lsrs	r3, r3, #17
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b76:	4413      	add	r3, r2
 8002b78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b82:	fb02 f203 	mul.w	r2, r2, r3
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e004      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	623b      	str	r3, [r7, #32]
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ba2:	623b      	str	r3, [r7, #32]
      break;
 8002ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3728      	adds	r7, #40	; 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc90      	pop	{r4, r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	08006e7c 	.word	0x08006e7c
 8002bb8:	08006e8c 	.word	0x08006e8c
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	007a1200 	.word	0x007a1200
 8002bc4:	003d0900 	.word	0x003d0900

08002bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bcc:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	20000000 	.word	0x20000000

08002bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002be0:	f7ff fff2 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002be4:	4601      	mov	r1, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08006f80 	.word	0x08006f80

08002c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c08:	f7ff ffde 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0adb      	lsrs	r3, r3, #11
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4a03      	ldr	r2, [pc, #12]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08006f80 	.word	0x08006f80

08002c2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	220f      	movs	r2, #15
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_GetClockConfig+0x58>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_RCC_GetClockConfig+0x58>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_GetClockConfig+0x58>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_GetClockConfig+0x58>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCC_GetClockConfig+0x5c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0207 	and.w	r2, r3, #7
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40022000 	.word	0x40022000

08002c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <RCC_Delay+0x34>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <RCC_Delay+0x38>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0a5b      	lsrs	r3, r3, #9
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ca8:	bf00      	nop
  }
  while (Delay --);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	60fa      	str	r2, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f9      	bne.n	8002ca8 <RCC_Delay+0x1c>
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	10624dd3 	.word	0x10624dd3

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d07d      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	61d3      	str	r3, [r2, #28]
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1c:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a42      	ldr	r2, [pc, #264]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7fe fcb0 	bl	800168c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe fcac 	bl	800168c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e06d      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02e      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d027      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d82:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d014      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fc7b 	bl	800168c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fc77 	bl	800168c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e036      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4917      	ldr	r1, [pc, #92]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	490b      	ldr	r1, [pc, #44]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4904      	ldr	r1, [pc, #16]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	42420440 	.word	0x42420440

08002e34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b08d      	sub	sp, #52	; 0x34
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e3e:	f107 040c 	add.w	r4, r7, #12
 8002e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d07f      	beq.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d002      	beq.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d048      	beq.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e70:	e08b      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e78:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d07f      	beq.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	0c9b      	lsrs	r3, r3, #18
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e90:	4413      	add	r3, r2
 8002e92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e96:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d018      	beq.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0c5b      	lsrs	r3, r3, #17
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ec2:	4a37      	ldr	r2, [pc, #220]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed2:	e004      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ede:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eea:	d102      	bne.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ef0:	e048      	b.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f00:	e040      	b.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d108      	bne.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f24:	e01f      	b.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d109      	bne.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002f3e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f44:	e00f      	b.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f50:	d11a      	bne.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002f5e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f64:	e010      	b.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f66:	e00f      	b.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f68:	f7ff fe4c 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0b9b      	lsrs	r3, r3, #14
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f82:	e002      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f88:	bf00      	nop
    }
  }
  return (frequency);
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3734      	adds	r7, #52	; 0x34
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd90      	pop	{r4, r7, pc}
 8002f94:	08006e90 	.word	0x08006e90
 8002f98:	08006ea0 	.word	0x08006ea0
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	007a1200 	.word	0x007a1200
 8002fa4:	003d0900 	.word	0x003d0900
 8002fa8:	aaaaaaab 	.word	0xaaaaaaab

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e041      	b.n	8003042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f839 	bl	800304a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 f9b4 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d001      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e03a      	b.n	80030ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <HAL_TIM_Base_Start_IT+0x98>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x58>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d009      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x58>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x58>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <HAL_TIM_Base_Start_IT+0xa0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d111      	bne.n	80030d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d010      	beq.n	80030e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	e007      	b.n	80030e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800

08003100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0202 	mvn.w	r2, #2
 800312c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8ed 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8e0 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f8ef 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0204 	mvn.w	r2, #4
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8c3 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8b6 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8c5 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0208 	mvn.w	r2, #8
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2204      	movs	r2, #4
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f899 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f88c 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f89b 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2208      	movs	r2, #8
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f86f 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f862 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f871 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fce0 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d107      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8bf 	bl	800342e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f835 	bl	8003346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0220 	mvn.w	r2, #32
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f88a 	bl	800341c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a29      	ldr	r2, [pc, #164]	; (8003410 <TIM_Base_SetConfig+0xb8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a26      	ldr	r2, [pc, #152]	; (8003414 <TIM_Base_SetConfig+0xbc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a25      	ldr	r2, [pc, #148]	; (8003418 <TIM_Base_SetConfig+0xc0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <TIM_Base_SetConfig+0xb8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <TIM_Base_SetConfig+0xbc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <TIM_Base_SetConfig+0xc0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <TIM_Base_SetConfig+0xb8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	615a      	str	r2, [r3, #20]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800

0800341c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03f      	b.n	80034d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fc72 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f905 	bl	8003694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b08a      	sub	sp, #40	; 0x28
 80034de:	af02      	add	r7, sp, #8
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d17c      	bne.n	80035f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_UART_Transmit+0x2c>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e075      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x3e>
 8003514:	2302      	movs	r3, #2
 8003516:	e06e      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800352e:	f7fe f8ad 	bl	800168c <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d108      	bne.n	800355c <HAL_UART_Transmit+0x82>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e003      	b.n	8003564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800356c:	e02a      	b.n	80035c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f840 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e036      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	3302      	adds	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e007      	b.n	80035b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1cf      	bne.n	800356e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f810 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	e02c      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003616:	d028      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0x30>
 800361e:	f7fe f835 	bl	800168c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	429a      	cmp	r2, r3
 800362c:	d21d      	bcs.n	800366a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800363c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e00f      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0c3      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ce:	f023 030c 	bic.w	r3, r3, #12
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	430b      	orrs	r3, r1
 80036da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <UART_SetConfig+0x114>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d103      	bne.n	8003704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7ff fa82 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	e002      	b.n	800370a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003704:	f7ff fa6a 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 8003708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	4a22      	ldr	r2, [pc, #136]	; (80037ac <UART_SetConfig+0x118>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	0119      	lsls	r1, r3, #4
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <UART_SetConfig+0x118>)
 8003742:	fba3 0302 	umull	r0, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2064      	movs	r0, #100	; 0x64
 800374a:	fb00 f303 	mul.w	r3, r0, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	3332      	adds	r3, #50	; 0x32
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <UART_SetConfig+0x118>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003760:	4419      	add	r1, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009a      	lsls	r2, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fbb2 f2f3 	udiv	r2, r2, r3
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <UART_SetConfig+0x118>)
 800377a:	fba3 0302 	umull	r0, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2064      	movs	r0, #100	; 0x64
 8003782:	fb00 f303 	mul.w	r3, r0, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	3332      	adds	r3, #50	; 0x32
 800378c:	4a07      	ldr	r2, [pc, #28]	; (80037ac <UART_SetConfig+0x118>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	440a      	add	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40013800 	.word	0x40013800
 80037ac:	51eb851f 	.word	0x51eb851f

080037b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b6:	f3ef 8305 	mrs	r3, IPSR
 80037ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80037bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	607b      	str	r3, [r7, #4]
  return(result);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <osKernelInitialize+0x32>
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <osKernelInitialize+0x60>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d109      	bne.n	80037ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037d6:	f3ef 8311 	mrs	r3, BASEPRI
 80037da:	603b      	str	r3, [r7, #0]
  return(result);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037e2:	f06f 0305 	mvn.w	r3, #5
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e00c      	b.n	8003804 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <osKernelInitialize+0x60>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <osKernelInitialize+0x60>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e002      	b.n	8003804 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003804:	68fb      	ldr	r3, [r7, #12]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	20000094 	.word	0x20000094

08003814 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381a:	f3ef 8305 	mrs	r3, IPSR
 800381e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003820:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003826:	f3ef 8310 	mrs	r3, PRIMASK
 800382a:	607b      	str	r3, [r7, #4]
  return(result);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <osKernelStart+0x32>
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <osKernelStart+0x64>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d109      	bne.n	800384e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800383a:	f3ef 8311 	mrs	r3, BASEPRI
 800383e:	603b      	str	r3, [r7, #0]
  return(result);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003846:	f06f 0305 	mvn.w	r3, #5
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e00e      	b.n	800386c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <osKernelStart+0x64>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <osKernelStart+0x64>)
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800385c:	f001 fa8a 	bl	8004d74 <vTaskStartScheduler>
      stat = osOK;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e002      	b.n	800386c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800386a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000094 	.word	0x20000094

0800387c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b092      	sub	sp, #72	; 0x48
 8003880:	af04      	add	r7, sp, #16
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388c:	f3ef 8305 	mrs	r3, IPSR
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 8094 	bne.w	80039c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389a:	f3ef 8310 	mrs	r3, PRIMASK
 800389e:	623b      	str	r3, [r7, #32]
  return(result);
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 808d 	bne.w	80039c2 <osThreadNew+0x146>
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <osThreadNew+0x150>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d106      	bne.n	80038be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038b0:	f3ef 8311 	mrs	r3, BASEPRI
 80038b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 8082 	bne.w	80039c2 <osThreadNew+0x146>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d07e      	beq.n	80039c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80038c8:	2318      	movs	r3, #24
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80038cc:	2300      	movs	r3, #0
 80038ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80038d0:	f107 031b 	add.w	r3, r7, #27
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d045      	beq.n	800396e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <osThreadNew+0x74>
        name = attr->name;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <osThreadNew+0x9a>
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b38      	cmp	r3, #56	; 0x38
 8003908:	d805      	bhi.n	8003916 <osThreadNew+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <osThreadNew+0x9e>
        return (NULL);
 8003916:	2300      	movs	r3, #0
 8003918:	e054      	b.n	80039c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <osThreadNew+0xd4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b5b      	cmp	r3, #91	; 0x5b
 8003938:	d90a      	bls.n	8003950 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <osThreadNew+0xd4>
        mem = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	e010      	b.n	8003972 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10c      	bne.n	8003972 <osThreadNew+0xf6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <osThreadNew+0xf6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <osThreadNew+0xf6>
          mem = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
 800396c:	e001      	b.n	8003972 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	2b01      	cmp	r3, #1
 8003976:	d110      	bne.n	800399a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003980:	9202      	str	r2, [sp, #8]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f001 f828 	bl	80049e4 <xTaskCreateStatic>
 8003994:	4603      	mov	r3, r0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e013      	b.n	80039c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d110      	bne.n	80039c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f001 f86f 	bl	8004a96 <xTaskCreate>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d001      	beq.n	80039c2 <osThreadNew+0x146>
          hTask = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3738      	adds	r7, #56	; 0x38
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000094 	.word	0x20000094

080039d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d8:	f3ef 8305 	mrs	r3, IPSR
 80039dc:	613b      	str	r3, [r7, #16]
  return(result);
 80039de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10f      	bne.n	8003a04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <osDelay+0x34>
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <osDelay+0x58>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d109      	bne.n	8003a0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039f8:	f3ef 8311 	mrs	r3, BASEPRI
 80039fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <osDelay+0x3c>
    stat = osErrorISR;
 8003a04:	f06f 0305 	mvn.w	r3, #5
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e007      	b.n	8003a1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 f978 	bl	8004d0c <vTaskDelay>
    }
  }

  return (stat);
 8003a1c:	697b      	ldr	r3, [r7, #20]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000094 	.word	0x20000094

08003a2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	; 0x30
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a3c:	f3ef 8305 	mrs	r3, IPSR
 8003a40:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d170      	bne.n	8003b2a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a48:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d16a      	bne.n	8003b2a <osMessageQueueNew+0xfe>
 8003a54:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <osMessageQueueNew+0x108>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d105      	bne.n	8003a68 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a60:	613b      	str	r3, [r7, #16]
  return(result);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d160      	bne.n	8003b2a <osMessageQueueNew+0xfe>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d05d      	beq.n	8003b2a <osMessageQueueNew+0xfe>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d05a      	beq.n	8003b2a <osMessageQueueNew+0xfe>
    mem = -1;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d029      	beq.n	8003ad4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <osMessageQueueNew+0x82>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b4f      	cmp	r3, #79	; 0x4f
 8003a8e:	d90e      	bls.n	8003aae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <osMessageQueueNew+0x82>
        mem = 1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	e014      	b.n	8003ad8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <osMessageQueueNew+0xac>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <osMessageQueueNew+0xac>
          mem = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e001      	b.n	8003ad8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10c      	bne.n	8003af8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	460b      	mov	r3, r1
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fa52 	bl	8003f98 <xQueueGenericCreateStatic>
 8003af4:	6278      	str	r0, [r7, #36]	; 0x24
 8003af6:	e008      	b.n	8003b0a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003afe:	2200      	movs	r2, #0
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 faba 	bl	800407c <xQueueGenericCreate>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osMessageQueueNew+0xf2>
        name = attr->name;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e001      	b.n	8003b22 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b22:	69f9      	ldr	r1, [r7, #28]
 8003b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b26:	f000 ff01 	bl	800492c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000094 	.word	0x20000094

08003b38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b50:	f3ef 8305 	mrs	r3, IPSR
 8003b54:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b56:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10f      	bne.n	8003b7c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b60:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <osMessageQueuePut+0x44>
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <osMessageQueuePut+0xe0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d12e      	bne.n	8003bce <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b70:	f3ef 8311 	mrs	r3, BASEPRI
 8003b74:	617b      	str	r3, [r7, #20]
  return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <osMessageQueuePut+0x56>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <osMessageQueuePut+0x56>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003b8e:	f06f 0303 	mvn.w	r3, #3
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b94:	e039      	b.n	8003c0a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b9a:	f107 0210 	add.w	r2, r7, #16
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6a38      	ldr	r0, [r7, #32]
 8003ba4:	f000 fbc4 	bl	8004330 <xQueueGenericSendFromISR>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d003      	beq.n	8003bb6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003bae:	f06f 0302 	mvn.w	r3, #2
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bb4:	e029      	b.n	8003c0a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d026      	beq.n	8003c0a <osMessageQueuePut+0xd2>
 8003bbc:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <osMessageQueuePut+0xe4>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bcc:	e01d      	b.n	8003c0a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <osMessageQueuePut+0xa2>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003bda:	f06f 0303 	mvn.w	r3, #3
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	e014      	b.n	8003c0c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	6a38      	ldr	r0, [r7, #32]
 8003bea:	f000 faa7 	bl	800413c <xQueueGenericSend>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00b      	beq.n	8003c0c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003bfa:	f06f 0301 	mvn.w	r3, #1
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e004      	b.n	8003c0c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003c02:	f06f 0302 	mvn.w	r3, #2
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	e000      	b.n	8003c0c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3728      	adds	r7, #40	; 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000094 	.word	0x20000094
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c36:	f3ef 8305 	mrs	r3, IPSR
 8003c3a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c3c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <osMessageQueueGet+0x42>
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <osMessageQueueGet+0xdc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d12e      	bne.n	8003cb4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c56:	f3ef 8311 	mrs	r3, BASEPRI
 8003c5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d028      	beq.n	8003cb4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <osMessageQueueGet+0x54>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <osMessageQueueGet+0x54>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003c74:	f06f 0303 	mvn.w	r3, #3
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c7a:	e038      	b.n	8003cee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c80:	f107 0310 	add.w	r3, r7, #16
 8003c84:	461a      	mov	r2, r3
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	6a38      	ldr	r0, [r7, #32]
 8003c8a:	f000 fcc1 	bl	8004610 <xQueueReceiveFromISR>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d003      	beq.n	8003c9c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003c94:	f06f 0302 	mvn.w	r3, #2
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c9a:	e028      	b.n	8003cee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d025      	beq.n	8003cee <osMessageQueueGet+0xce>
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <osMessageQueueGet+0xe0>)
 8003ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cb2:	e01c      	b.n	8003cee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <osMessageQueueGet+0xa0>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003cc0:	f06f 0303 	mvn.w	r3, #3
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	e013      	b.n	8003cf0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	6a38      	ldr	r0, [r7, #32]
 8003cce:	f000 fbc3 	bl	8004458 <xQueueReceive>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d00b      	beq.n	8003cf0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003cde:	f06f 0301 	mvn.w	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	e004      	b.n	8003cf0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003ce6:	f06f 0302 	mvn.w	r3, #2
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	e000      	b.n	8003cf0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3728      	adds	r7, #40	; 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000094 	.word	0x20000094
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <vApplicationGetIdleTaskMemory+0x28>)
 8003d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	20000098 	.word	0x20000098
 8003d30:	200000f4 	.word	0x200000f4

08003d34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <vApplicationGetTimerTaskMemory+0x30>)
 8003d4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	200002f4 	.word	0x200002f4
 8003d64:	20000350 	.word	0x20000350

08003d68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f103 0208 	add.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f103 0208 	add.w	r2, r3, #8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f103 0208 	add.w	r2, r3, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1a:	d103      	bne.n	8003e24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e00c      	b.n	8003e3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3308      	adds	r3, #8
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e002      	b.n	8003e32 <vListInsert+0x2e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d2f6      	bcs.n	8003e2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6852      	ldr	r2, [r2, #4]
 8003e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d103      	bne.n	8003ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	1e5a      	subs	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
	...

08003ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	e7fe      	b.n	8003eee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003ef0:	f002 f852 	bl	8005f98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	3b01      	subs	r3, #1
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d114      	bne.n	8003f70 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01a      	beq.n	8003f84 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3310      	adds	r3, #16
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 f992 	bl	800527c <xTaskRemoveFromEventList>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d012      	beq.n	8003f84 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <xQueueGenericReset+0xcc>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	e009      	b.n	8003f84 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3310      	adds	r3, #16
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fef7 	bl	8003d68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3324      	adds	r3, #36	; 0x24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fef2 	bl	8003d68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f84:	f002 f836 	bl	8005ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f88:	2301      	movs	r3, #1
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	; 0x38
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <xQueueGenericCreateStatic+0x28>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	e7fe      	b.n	8003fbe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <xQueueGenericCreateStatic+0x42>
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <xQueueGenericCreateStatic+0x4e>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <xQueueGenericCreateStatic+0x52>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericCreateStatic+0x54>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <xQueueGenericCreateStatic+0x6c>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	e7fe      	b.n	8004002 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <xQueueGenericCreateStatic+0x78>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <xQueueGenericCreateStatic+0x7c>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <xQueueGenericCreateStatic+0x7e>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <xQueueGenericCreateStatic+0x96>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e7fe      	b.n	800402c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800402e:	2350      	movs	r3, #80	; 0x50
 8004030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d009      	beq.n	800404c <xQueueGenericCreateStatic+0xb4>
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e7fe      	b.n	800404a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800405e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f842 	bl	80040f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004074:	4618      	mov	r0, r3
 8004076:	3730      	adds	r7, #48	; 0x30
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <xQueueGenericCreate+0x28>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	e7fe      	b.n	80040a2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e004      	b.n	80040ba <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3350      	adds	r3, #80	; 0x50
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 f860 	bl	8006184 <pvPortMalloc>
 80040c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00f      	beq.n	80040ec <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	3350      	adds	r3, #80	; 0x50
 80040d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040da:	79fa      	ldrb	r2, [r7, #7]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f805 	bl	80040f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040ec:	69bb      	ldr	r3, [r7, #24]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e002      	b.n	8004118 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004124:	2101      	movs	r1, #1
 8004126:	69b8      	ldr	r0, [r7, #24]
 8004128:	f7ff fece 	bl	8003ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800414a:	2300      	movs	r3, #0
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <xQueueGenericSend+0x30>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
 800416a:	e7fe      	b.n	800416a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <xQueueGenericSend+0x3e>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <xQueueGenericSend+0x42>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericSend+0x44>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <xQueueGenericSend+0x5c>
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e7fe      	b.n	8004196 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x6a>
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <xQueueGenericSend+0x6e>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericSend+0x70>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <xQueueGenericSend+0x88>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	e7fe      	b.n	80041c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041c4:	f001 fa14 	bl	80055f0 <xTaskGetSchedulerState>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <xQueueGenericSend+0x98>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <xQueueGenericSend+0x9c>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <xQueueGenericSend+0x9e>
 80041d8:	2300      	movs	r3, #0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <xQueueGenericSend+0xb6>
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041f2:	f001 fed1 	bl	8005f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <xQueueGenericSend+0xcc>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d129      	bne.n	800425c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fa7c 	bl	800470a <prvCopyDataToQueue>
 8004212:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f82b 	bl	800527c <xTaskRemoveFromEventList>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800422c:	4b3f      	ldr	r3, [pc, #252]	; (800432c <xQueueGenericSend+0x1f0>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	e00a      	b.n	8004254 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <xQueueGenericSend+0x1f0>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004254:	f001 fece 	bl	8005ff4 <vPortExitCritical>
				return pdPASS;
 8004258:	2301      	movs	r3, #1
 800425a:	e063      	b.n	8004324 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004262:	f001 fec7 	bl	8005ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004266:	2300      	movs	r3, #0
 8004268:	e05c      	b.n	8004324 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f863 	bl	8005340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800427a:	2301      	movs	r3, #1
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800427e:	f001 feb9 	bl	8005ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004282:	f000 fddb 	bl	8004e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004286:	f001 fe87 	bl	8005f98 <vPortEnterCritical>
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004290:	b25b      	sxtb	r3, r3
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004296:	d103      	bne.n	80042a0 <xQueueGenericSend+0x164>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ac:	d103      	bne.n	80042b6 <xQueueGenericSend+0x17a>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b6:	f001 fe9d 	bl	8005ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ba:	1d3a      	adds	r2, r7, #4
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f852 	bl	800536c <xTaskCheckForTimeOut>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d124      	bne.n	8004318 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d0:	f000 fb13 	bl	80048fa <prvIsQueueFull>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	3310      	adds	r3, #16
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 ff7c 	bl	80051e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ea:	f000 fa9e 	bl	800482a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ee:	f000 fdb3 	bl	8004e58 <xTaskResumeAll>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f af7c 	bne.w	80041f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xQueueGenericSend+0x1f0>)
 80042fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	e772      	b.n	80041f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800430c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430e:	f000 fa8c 	bl	800482a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004312:	f000 fda1 	bl	8004e58 <xTaskResumeAll>
 8004316:	e76c      	b.n	80041f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431a:	f000 fa86 	bl	800482a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431e:	f000 fd9b 	bl	8004e58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004322:	2300      	movs	r3, #0
		}
	}
}
 8004324:	4618      	mov	r0, r3
 8004326:	3738      	adds	r7, #56	; 0x38
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08e      	sub	sp, #56	; 0x38
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <xQueueGenericSendFromISR+0x2c>
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
 800435a:	e7fe      	b.n	800435a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <xQueueGenericSendFromISR+0x3a>
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <xQueueGenericSendFromISR+0x3e>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <xQueueGenericSendFromISR+0x40>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <xQueueGenericSendFromISR+0x58>
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	e7fe      	b.n	8004386 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d103      	bne.n	8004396 <xQueueGenericSendFromISR+0x66>
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <xQueueGenericSendFromISR+0x6a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xQueueGenericSendFromISR+0x6c>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <xQueueGenericSendFromISR+0x84>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e7fe      	b.n	80043b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043b4:	f001 feaa 	bl	800610c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043b8:	f3ef 8211 	mrs	r2, BASEPRI
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61ba      	str	r2, [r7, #24]
 80043ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <xQueueGenericSendFromISR+0xb6>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d12c      	bne.n	8004440 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f6:	f000 f988 	bl	800470a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004402:	d112      	bne.n	800442a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	3324      	adds	r3, #36	; 0x24
 8004410:	4618      	mov	r0, r3
 8004412:	f000 ff33 	bl	800527c <xTaskRemoveFromEventList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00e      	beq.n	800443a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e007      	b.n	800443a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800442a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800442e:	3301      	adds	r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	b25a      	sxtb	r2, r3
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800443a:	2301      	movs	r3, #1
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800443e:	e001      	b.n	8004444 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004440:	2300      	movs	r3, #0
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004450:	4618      	mov	r0, r3
 8004452:	3738      	adds	r7, #56	; 0x38
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08c      	sub	sp, #48	; 0x30
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <xQueueReceive+0x2e>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	e7fe      	b.n	8004484 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <xQueueReceive+0x3c>
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <xQueueReceive+0x40>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <xQueueReceive+0x42>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <xQueueReceive+0x5a>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e7fe      	b.n	80044b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b2:	f001 f89d 	bl	80055f0 <xTaskGetSchedulerState>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <xQueueReceive+0x6a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <xQueueReceive+0x6e>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueReceive+0x70>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <xQueueReceive+0x88>
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e7fe      	b.n	80044de <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e0:	f001 fd5a 	bl	8005f98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01f      	beq.n	8004530 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f4:	f000 f973 	bl	80047de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	1e5a      	subs	r2, r3, #1
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00f      	beq.n	8004528 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	3310      	adds	r3, #16
 800450c:	4618      	mov	r0, r3
 800450e:	f000 feb5 	bl	800527c <xTaskRemoveFromEventList>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004518:	4b3c      	ldr	r3, [pc, #240]	; (800460c <xQueueReceive+0x1b4>)
 800451a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004528:	f001 fd64 	bl	8005ff4 <vPortExitCritical>
				return pdPASS;
 800452c:	2301      	movs	r3, #1
 800452e:	e069      	b.n	8004604 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004536:	f001 fd5d 	bl	8005ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800453a:	2300      	movs	r3, #0
 800453c:	e062      	b.n	8004604 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004544:	f107 0310 	add.w	r3, r7, #16
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fef9 	bl	8005340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004552:	f001 fd4f 	bl	8005ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004556:	f000 fc71 	bl	8004e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800455a:	f001 fd1d 	bl	8005f98 <vPortEnterCritical>
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004564:	b25b      	sxtb	r3, r3
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456a:	d103      	bne.n	8004574 <xQueueReceive+0x11c>
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457a:	b25b      	sxtb	r3, r3
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004580:	d103      	bne.n	800458a <xQueueReceive+0x132>
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458a:	f001 fd33 	bl	8005ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800458e:	1d3a      	adds	r2, r7, #4
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fee8 	bl	800536c <xTaskCheckForTimeOut>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d123      	bne.n	80045ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a4:	f000 f993 	bl	80048ce <prvIsQueueEmpty>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d017      	beq.n	80045de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	3324      	adds	r3, #36	; 0x24
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fe12 	bl	80051e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045be:	f000 f934 	bl	800482a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045c2:	f000 fc49 	bl	8004e58 <xTaskResumeAll>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d189      	bne.n	80044e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <xQueueReceive+0x1b4>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	e780      	b.n	80044e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e0:	f000 f923 	bl	800482a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045e4:	f000 fc38 	bl	8004e58 <xTaskResumeAll>
 80045e8:	e77a      	b.n	80044e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ec:	f000 f91d 	bl	800482a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045f0:	f000 fc32 	bl	8004e58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f6:	f000 f96a 	bl	80048ce <prvIsQueueEmpty>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f43f af6f 	beq.w	80044e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004602:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004604:	4618      	mov	r0, r3
 8004606:	3730      	adds	r7, #48	; 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	; 0x38
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <xQueueReceiveFromISR+0x2a>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	e7fe      	b.n	8004638 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <xQueueReceiveFromISR+0x38>
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <xQueueReceiveFromISR+0x3c>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <xQueueReceiveFromISR+0x3e>
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <xQueueReceiveFromISR+0x56>
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	e7fe      	b.n	8004664 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004666:	f001 fd51 	bl	800610c <vPortValidateInterruptPriority>
	__asm volatile
 800466a:	f3ef 8211 	mrs	r2, BASEPRI
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	61ba      	str	r2, [r7, #24]
 8004680:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004682:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02f      	beq.n	80046f2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a0:	f000 f89d 	bl	80047de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b4:	d112      	bne.n	80046dc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	3310      	adds	r3, #16
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fdda 	bl	800527c <xTaskRemoveFromEventList>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00e      	beq.n	80046ec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00b      	beq.n	80046ec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e007      	b.n	80046ec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80046dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e0:	3301      	adds	r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	b25a      	sxtb	r2, r3
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80046ec:	2301      	movs	r3, #1
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
 80046f0:	e001      	b.n	80046f6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004702:	4618      	mov	r0, r3
 8004704:	3738      	adds	r7, #56	; 0x38
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10d      	bne.n	8004744 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d14d      	bne.n	80047cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 ff79 	bl	800562c <xTaskPriorityDisinherit>
 800473a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	e043      	b.n	80047cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d119      	bne.n	800477e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6898      	ldr	r0, [r3, #8]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	461a      	mov	r2, r3
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	f001 ff13 	bl	8006580 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	441a      	add	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d32b      	bcc.n	80047cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	e026      	b.n	80047cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68d8      	ldr	r0, [r3, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	461a      	mov	r2, r3
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	f001 fef9 	bl	8006580 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	425b      	negs	r3, r3
 8004798:	441a      	add	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d207      	bcs.n	80047ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	425b      	negs	r3, r3
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d105      	bne.n	80047cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047d4:	697b      	ldr	r3, [r7, #20]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d018      	beq.n	8004822 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d303      	bcc.n	8004812 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68d9      	ldr	r1, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	461a      	mov	r2, r3
 800481c:	6838      	ldr	r0, [r7, #0]
 800481e:	f001 feaf 	bl	8006580 <memcpy>
	}
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004832:	f001 fbb1 	bl	8005f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800483c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800483e:	e011      	b.n	8004864 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d012      	beq.n	800486e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fd15 	bl	800527c <xTaskRemoveFromEventList>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004858:	f000 fde8 	bl	800542c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	3b01      	subs	r3, #1
 8004860:	b2db      	uxtb	r3, r3
 8004862:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dce9      	bgt.n	8004840 <prvUnlockQueue+0x16>
 800486c:	e000      	b.n	8004870 <prvUnlockQueue+0x46>
					break;
 800486e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	22ff      	movs	r2, #255	; 0xff
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004878:	f001 fbbc 	bl	8005ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800487c:	f001 fb8c 	bl	8005f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004886:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004888:	e011      	b.n	80048ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3310      	adds	r3, #16
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fcf0 	bl	800527c <xTaskRemoveFromEventList>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048a2:	f000 fdc3 	bl	800542c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048a6:	7bbb      	ldrb	r3, [r7, #14]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dce9      	bgt.n	800488a <prvUnlockQueue+0x60>
 80048b6:	e000      	b.n	80048ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048c2:	f001 fb97 	bl	8005ff4 <vPortExitCritical>
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048d6:	f001 fb5f 	bl	8005f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e001      	b.n	80048ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 fb82 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 80048f0:	68fb      	ldr	r3, [r7, #12]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004902:	f001 fb49 	bl	8005f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	429a      	cmp	r2, r3
 8004910:	d102      	bne.n	8004918 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e001      	b.n	800491c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800491c:	f001 fb6a 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e014      	b.n	8004966 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800493c:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <vQueueAddToRegistry+0x4c>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004948:	490b      	ldr	r1, [pc, #44]	; (8004978 <vQueueAddToRegistry+0x4c>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <vQueueAddToRegistry+0x4c>)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800495e:	e005      	b.n	800496c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b07      	cmp	r3, #7
 800496a:	d9e7      	bls.n	800493c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20001aa0 	.word	0x20001aa0

0800497c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800498c:	f001 fb04 	bl	8005f98 <vPortEnterCritical>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004996:	b25b      	sxtb	r3, r3
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499c:	d103      	bne.n	80049a6 <vQueueWaitForMessageRestricted+0x2a>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ac:	b25b      	sxtb	r3, r3
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b2:	d103      	bne.n	80049bc <vQueueWaitForMessageRestricted+0x40>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049bc:	f001 fb1a 	bl	8005ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	3324      	adds	r3, #36	; 0x24
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fc29 	bl	8005228 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f7ff ff27 	bl	800482a <prvUnlockQueue>
	}
 80049dc:	bf00      	nop
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	; 0x38
 80049e8:	af04      	add	r7, sp, #16
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <xTaskCreateStatic+0x28>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	e7fe      	b.n	8004a0a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <xTaskCreateStatic+0x42>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e7fe      	b.n	8004a24 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a26:	235c      	movs	r3, #92	; 0x5c
 8004a28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8004a2e:	d009      	beq.n	8004a44 <xTaskCreateStatic+0x60>
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e7fe      	b.n	8004a42 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01e      	beq.n	8004a88 <xTaskCreateStatic+0xa4>
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01b      	beq.n	8004a88 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a62:	2300      	movs	r3, #0
 8004a64:	9303      	str	r3, [sp, #12]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	9302      	str	r3, [sp, #8]
 8004a6a:	f107 0314 	add.w	r3, r7, #20
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f850 	bl	8004b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a82:	f000 f8d3 	bl	8004c2c <prvAddNewTaskToReadyList>
 8004a86:	e001      	b.n	8004a8c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a8c:	697b      	ldr	r3, [r7, #20]
	}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b08c      	sub	sp, #48	; 0x30
 8004a9a:	af04      	add	r7, sp, #16
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 fb6a 	bl	8006184 <pvPortMalloc>
 8004ab0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ab8:	205c      	movs	r0, #92	; 0x5c
 8004aba:	f001 fb63 	bl	8006184 <pvPortMalloc>
 8004abe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
 8004acc:	e005      	b.n	8004ada <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f001 fc1a 	bl	8006308 <vPortFree>
 8004ad4:	e001      	b.n	8004ada <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d017      	beq.n	8004b10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f80e 	bl	8004b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b04:	69f8      	ldr	r0, [r7, #28]
 8004b06:	f000 f891 	bl	8004c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e002      	b.n	8004b16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b16:	69bb      	ldr	r3, [r7, #24]
	}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	461a      	mov	r2, r3
 8004b38:	21a5      	movs	r1, #165	; 0xa5
 8004b3a:	f001 fd2c 	bl	8006596 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f023 0307 	bic.w	r3, r3, #7
 8004b56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <prvInitialiseNewTask+0x56>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e7fe      	b.n	8004b74 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e012      	b.n	8004ba2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	7819      	ldrb	r1, [r3, #0]
 8004b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	3334      	adds	r3, #52	; 0x34
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d006      	beq.n	8004baa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	d9e9      	bls.n	8004b7c <prvInitialiseNewTask+0x5c>
 8004ba8:	e000      	b.n	8004bac <prvInitialiseNewTask+0x8c>
		{
			break;
 8004baa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	2b37      	cmp	r3, #55	; 0x37
 8004bb8:	d901      	bls.n	8004bbe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bba:	2337      	movs	r3, #55	; 0x37
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2200      	movs	r2, #0
 8004bce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f8e6 	bl	8003da6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	3318      	adds	r3, #24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff f8e1 	bl	8003da6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	69b8      	ldr	r0, [r7, #24]
 8004c0e:	f001 f8d7 	bl	8005dc0 <pxPortInitialiseStack>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c24:	bf00      	nop
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c34:	f001 f9b0 	bl	8005f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c38:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <prvAddNewTaskToReadyList+0xc4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	4a2c      	ldr	r2, [pc, #176]	; (8004cf0 <prvAddNewTaskToReadyList+0xc4>)
 8004c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c42:	4b2c      	ldr	r3, [pc, #176]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <prvAddNewTaskToReadyList+0xc4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d110      	bne.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c58:	f000 fc0c 	bl	8005474 <prvInitialiseTaskLists>
 8004c5c:	e00d      	b.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <prvAddNewTaskToReadyList+0xcc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d802      	bhi.n	8004c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c74:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c7a:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <prvAddNewTaskToReadyList+0xd0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <prvAddNewTaskToReadyList+0xd0>)
 8004c82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <prvAddNewTaskToReadyList+0xd0>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <prvAddNewTaskToReadyList+0xd4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d903      	bls.n	8004ca0 <prvAddNewTaskToReadyList+0x74>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <prvAddNewTaskToReadyList+0xd4>)
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <prvAddNewTaskToReadyList+0xd8>)
 8004cae:	441a      	add	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7ff f881 	bl	8003dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cbc:	f001 f99a 	bl	8005ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <prvAddNewTaskToReadyList+0xcc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <prvAddNewTaskToReadyList+0xc8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d207      	bcs.n	8004ce6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <prvAddNewTaskToReadyList+0xdc>)
 8004cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000c24 	.word	0x20000c24
 8004cf4:	20000750 	.word	0x20000750
 8004cf8:	20000c30 	.word	0x20000c30
 8004cfc:	20000c40 	.word	0x20000c40
 8004d00:	20000c2c 	.word	0x20000c2c
 8004d04:	20000754 	.word	0x20000754
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <vTaskDelay+0x60>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <vTaskDelay+0x2e>
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	e7fe      	b.n	8004d38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d3a:	f000 f87f 	bl	8004e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fcdf 	bl	8005704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d46:	f000 f887 	bl	8004e58 <xTaskResumeAll>
 8004d4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <vTaskDelay+0x64>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000c4c 	.word	0x20000c4c
 8004d70:	e000ed04 	.word	0xe000ed04

08004d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08a      	sub	sp, #40	; 0x28
 8004d78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d82:	463a      	mov	r2, r7
 8004d84:	1d39      	adds	r1, r7, #4
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe ffba 	bl	8003d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	9202      	str	r2, [sp, #8]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	460a      	mov	r2, r1
 8004da2:	4920      	ldr	r1, [pc, #128]	; (8004e24 <vTaskStartScheduler+0xb0>)
 8004da4:	4820      	ldr	r0, [pc, #128]	; (8004e28 <vTaskStartScheduler+0xb4>)
 8004da6:	f7ff fe1d 	bl	80049e4 <xTaskCreateStatic>
 8004daa:	4602      	mov	r2, r0
 8004dac:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <vTaskStartScheduler+0xb8>)
 8004dae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004db0:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <vTaskStartScheduler+0xb8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004db8:	2301      	movs	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e001      	b.n	8004dc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d102      	bne.n	8004dce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dc8:	f000 fcf0 	bl	80057ac <xTimerCreateTimerTask>
 8004dcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d115      	bne.n	8004e00 <vTaskStartScheduler+0x8c>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <vTaskStartScheduler+0xbc>)
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <vTaskStartScheduler+0xc0>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <vTaskStartScheduler+0xc4>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dfa:	f001 f85d 	bl	8005eb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dfe:	e00d      	b.n	8004e1c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e06:	d109      	bne.n	8004e1c <vTaskStartScheduler+0xa8>
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e7fe      	b.n	8004e1a <vTaskStartScheduler+0xa6>
}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	08006ea4 	.word	0x08006ea4
 8004e28:	08005445 	.word	0x08005445
 8004e2c:	20000c48 	.word	0x20000c48
 8004e30:	20000c44 	.word	0x20000c44
 8004e34:	20000c30 	.word	0x20000c30
 8004e38:	20000c28 	.word	0x20000c28

08004e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <vTaskSuspendAll+0x18>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <vTaskSuspendAll+0x18>)
 8004e48:	6013      	str	r3, [r2, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000c4c 	.word	0x20000c4c

08004e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e66:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <xTaskResumeAll+0x114>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <xTaskResumeAll+0x2a>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	e7fe      	b.n	8004e80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e82:	f001 f889 	bl	8005f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e86:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <xTaskResumeAll+0x114>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	4a37      	ldr	r2, [pc, #220]	; (8004f6c <xTaskResumeAll+0x114>)
 8004e8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <xTaskResumeAll+0x114>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d162      	bne.n	8004f5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <xTaskResumeAll+0x118>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05e      	beq.n	8004f5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea0:	e02f      	b.n	8004f02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ea2:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <xTaskResumeAll+0x11c>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe ffe0 	bl	8003e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe ffdb 	bl	8003e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <xTaskResumeAll+0x120>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d903      	bls.n	8004ed2 <xTaskResumeAll+0x7a>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <xTaskResumeAll+0x120>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <xTaskResumeAll+0x124>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe ff68 	bl	8003dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <xTaskResumeAll+0x128>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <xTaskResumeAll+0x12c>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <xTaskResumeAll+0x11c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1cb      	bne.n	8004ea2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f10:	f000 fb4a 	bl	80055a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f14:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <xTaskResumeAll+0x130>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f20:	f000 f844 	bl	8004fac <xTaskIncrementTick>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <xTaskResumeAll+0x12c>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f1      	bne.n	8004f20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <xTaskResumeAll+0x130>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <xTaskResumeAll+0x12c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <xTaskResumeAll+0x134>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f5e:	f001 f849 	bl	8005ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f62:	68bb      	ldr	r3, [r7, #8]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000c4c 	.word	0x20000c4c
 8004f70:	20000c24 	.word	0x20000c24
 8004f74:	20000be4 	.word	0x20000be4
 8004f78:	20000c2c 	.word	0x20000c2c
 8004f7c:	20000754 	.word	0x20000754
 8004f80:	20000750 	.word	0x20000750
 8004f84:	20000c38 	.word	0x20000c38
 8004f88:	20000c34 	.word	0x20000c34
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <xTaskGetTickCount+0x18>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f9c:	687b      	ldr	r3, [r7, #4]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	20000c28 	.word	0x20000c28

08004fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb6:	4b51      	ldr	r3, [pc, #324]	; (80050fc <xTaskIncrementTick+0x150>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 808d 	bne.w	80050da <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fc0:	4b4f      	ldr	r3, [pc, #316]	; (8005100 <xTaskIncrementTick+0x154>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fc8:	4a4d      	ldr	r2, [pc, #308]	; (8005100 <xTaskIncrementTick+0x154>)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11f      	bne.n	8005014 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <xTaskIncrementTick+0x158>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <xTaskIncrementTick+0x46>
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	e7fe      	b.n	8004ff0 <xTaskIncrementTick+0x44>
 8004ff2:	4b44      	ldr	r3, [pc, #272]	; (8005104 <xTaskIncrementTick+0x158>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <xTaskIncrementTick+0x15c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a41      	ldr	r2, [pc, #260]	; (8005104 <xTaskIncrementTick+0x158>)
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	4a41      	ldr	r2, [pc, #260]	; (8005108 <xTaskIncrementTick+0x15c>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b41      	ldr	r3, [pc, #260]	; (800510c <xTaskIncrementTick+0x160>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	4a3f      	ldr	r2, [pc, #252]	; (800510c <xTaskIncrementTick+0x160>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	f000 faca 	bl	80055a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005014:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <xTaskIncrementTick+0x164>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d34e      	bcc.n	80050bc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <xTaskIncrementTick+0x158>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <xTaskIncrementTick+0x80>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <xTaskIncrementTick+0x82>
 800502c:	2300      	movs	r3, #0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <xTaskIncrementTick+0x164>)
 8005034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005038:	601a      	str	r2, [r3, #0]
					break;
 800503a:	e03f      	b.n	80050bc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800503c:	4b31      	ldr	r3, [pc, #196]	; (8005104 <xTaskIncrementTick+0x158>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d203      	bcs.n	800505c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005054:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <xTaskIncrementTick+0x164>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6013      	str	r3, [r2, #0]
						break;
 800505a:	e02f      	b.n	80050bc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	3304      	adds	r3, #4
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe ff07 	bl	8003e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3318      	adds	r3, #24
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fefe 	bl	8003e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b25      	ldr	r3, [pc, #148]	; (8005114 <xTaskIncrementTick+0x168>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <xTaskIncrementTick+0xe0>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <xTaskIncrementTick+0x168>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <xTaskIncrementTick+0x16c>)
 800509a:	441a      	add	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe fe8b 	bl	8003dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <xTaskIncrementTick+0x170>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3b3      	bcc.n	800501e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ba:	e7b0      	b.n	800501e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <xTaskIncrementTick+0x170>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	4915      	ldr	r1, [pc, #84]	; (8005118 <xTaskIncrementTick+0x16c>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d907      	bls.n	80050e4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e004      	b.n	80050e4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <xTaskIncrementTick+0x174>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <xTaskIncrementTick+0x174>)
 80050e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050e4:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <xTaskIncrementTick+0x178>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050f0:	697b      	ldr	r3, [r7, #20]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000c4c 	.word	0x20000c4c
 8005100:	20000c28 	.word	0x20000c28
 8005104:	20000bdc 	.word	0x20000bdc
 8005108:	20000be0 	.word	0x20000be0
 800510c:	20000c3c 	.word	0x20000c3c
 8005110:	20000c44 	.word	0x20000c44
 8005114:	20000c2c 	.word	0x20000c2c
 8005118:	20000754 	.word	0x20000754
 800511c:	20000750 	.word	0x20000750
 8005120:	20000c34 	.word	0x20000c34
 8005124:	20000c38 	.word	0x20000c38

08005128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <vTaskSwitchContext+0xa4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <vTaskSwitchContext+0xa8>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800513c:	e040      	b.n	80051c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <vTaskSwitchContext+0xa8>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <vTaskSwitchContext+0xac>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e00f      	b.n	800516c <vTaskSwitchContext+0x44>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <vTaskSwitchContext+0x3e>
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	e7fe      	b.n	8005164 <vTaskSwitchContext+0x3c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	491a      	ldr	r1, [pc, #104]	; (80051d8 <vTaskSwitchContext+0xb0>)
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0e5      	beq.n	800514c <vTaskSwitchContext+0x24>
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <vTaskSwitchContext+0xb0>)
 800518c:	4413      	add	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3308      	adds	r3, #8
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d104      	bne.n	80051b0 <vTaskSwitchContext+0x88>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <vTaskSwitchContext+0xb4>)
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <vTaskSwitchContext+0xac>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000c4c 	.word	0x20000c4c
 80051d0:	20000c38 	.word	0x20000c38
 80051d4:	20000c2c 	.word	0x20000c2c
 80051d8:	20000754 	.word	0x20000754
 80051dc:	20000750 	.word	0x20000750

080051e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <vTaskPlaceOnEventList+0x24>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e7fe      	b.n	8005202 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <vTaskPlaceOnEventList+0x44>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3318      	adds	r3, #24
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fe fdf9 	bl	8003e04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005212:	2101      	movs	r1, #1
 8005214:	6838      	ldr	r0, [r7, #0]
 8005216:	f000 fa75 	bl	8005704 <prvAddCurrentTaskToDelayedList>
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000750 	.word	0x20000750

08005228 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <vTaskPlaceOnEventListRestricted+0x26>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e7fe      	b.n	800524c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vTaskPlaceOnEventListRestricted+0x50>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3318      	adds	r3, #24
 8005254:	4619      	mov	r1, r3
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7fe fdb1 	bl	8003dbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	f000 fa4a 	bl	8005704 <prvAddCurrentTaskToDelayedList>
	}
 8005270:	bf00      	nop
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000750 	.word	0x20000750

0800527c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <xTaskRemoveFromEventList+0x2a>
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e7fe      	b.n	80052a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3318      	adds	r3, #24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe fde2 	bl	8003e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b0:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <xTaskRemoveFromEventList+0xac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11d      	bne.n	80052f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fdd9 	bl	8003e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <xTaskRemoveFromEventList+0xb0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d903      	bls.n	80052d6 <xTaskRemoveFromEventList+0x5a>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <xTaskRemoveFromEventList+0xb0>)
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <xTaskRemoveFromEventList+0xb4>)
 80052e4:	441a      	add	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7fe fd66 	bl	8003dbe <vListInsertEnd>
 80052f2:	e005      	b.n	8005300 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3318      	adds	r3, #24
 80052f8:	4619      	mov	r1, r3
 80052fa:	480e      	ldr	r0, [pc, #56]	; (8005334 <xTaskRemoveFromEventList+0xb8>)
 80052fc:	f7fe fd5f 	bl	8003dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <xTaskRemoveFromEventList+0xbc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d905      	bls.n	800531a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <xTaskRemoveFromEventList+0xc0>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e001      	b.n	800531e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000c4c 	.word	0x20000c4c
 800532c:	20000c2c 	.word	0x20000c2c
 8005330:	20000754 	.word	0x20000754
 8005334:	20000be4 	.word	0x20000be4
 8005338:	20000750 	.word	0x20000750
 800533c:	20000c38 	.word	0x20000c38

08005340 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <vTaskInternalSetTimeOutState+0x24>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <vTaskInternalSetTimeOutState+0x28>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	605a      	str	r2, [r3, #4]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000c3c 	.word	0x20000c3c
 8005368:	20000c28 	.word	0x20000c28

0800536c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <xTaskCheckForTimeOut+0x24>
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e7fe      	b.n	800538e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <xTaskCheckForTimeOut+0x3e>
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e7fe      	b.n	80053a8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80053aa:	f000 fdf5 	bl	8005f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053ae:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <xTaskCheckForTimeOut+0xb8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c6:	d102      	bne.n	80053ce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e023      	b.n	8005416 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <xTaskCheckForTimeOut+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d007      	beq.n	80053ea <xTaskCheckForTimeOut+0x7e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e015      	b.n	8005416 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d20b      	bcs.n	800540c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff9d 	bl	8005340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	e004      	b.n	8005416 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005412:	2301      	movs	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005416:	f000 fded 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 800541a:	69fb      	ldr	r3, [r7, #28]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000c28 	.word	0x20000c28
 8005428:	20000c3c 	.word	0x20000c3c

0800542c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <vTaskMissedYield+0x14>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000c38 	.word	0x20000c38

08005444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800544c:	f000 f852 	bl	80054f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <prvIdleTask+0x28>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d9f9      	bls.n	800544c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <prvIdleTask+0x2c>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005468:	e7f0      	b.n	800544c <prvIdleTask+0x8>
 800546a:	bf00      	nop
 800546c:	20000754 	.word	0x20000754
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	e00c      	b.n	800549a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <prvInitialiseTaskLists+0x60>)
 800548c:	4413      	add	r3, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fc6a 	bl	8003d68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3301      	adds	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b37      	cmp	r3, #55	; 0x37
 800549e:	d9ef      	bls.n	8005480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054a0:	480d      	ldr	r0, [pc, #52]	; (80054d8 <prvInitialiseTaskLists+0x64>)
 80054a2:	f7fe fc61 	bl	8003d68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054a6:	480d      	ldr	r0, [pc, #52]	; (80054dc <prvInitialiseTaskLists+0x68>)
 80054a8:	f7fe fc5e 	bl	8003d68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054ac:	480c      	ldr	r0, [pc, #48]	; (80054e0 <prvInitialiseTaskLists+0x6c>)
 80054ae:	f7fe fc5b 	bl	8003d68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054b2:	480c      	ldr	r0, [pc, #48]	; (80054e4 <prvInitialiseTaskLists+0x70>)
 80054b4:	f7fe fc58 	bl	8003d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054b8:	480b      	ldr	r0, [pc, #44]	; (80054e8 <prvInitialiseTaskLists+0x74>)
 80054ba:	f7fe fc55 	bl	8003d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <prvInitialiseTaskLists+0x78>)
 80054c0:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <prvInitialiseTaskLists+0x64>)
 80054c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <prvInitialiseTaskLists+0x7c>)
 80054c6:	4a05      	ldr	r2, [pc, #20]	; (80054dc <prvInitialiseTaskLists+0x68>)
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000754 	.word	0x20000754
 80054d8:	20000bb4 	.word	0x20000bb4
 80054dc:	20000bc8 	.word	0x20000bc8
 80054e0:	20000be4 	.word	0x20000be4
 80054e4:	20000bf8 	.word	0x20000bf8
 80054e8:	20000c10 	.word	0x20000c10
 80054ec:	20000bdc 	.word	0x20000bdc
 80054f0:	20000be0 	.word	0x20000be0

080054f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054fa:	e019      	b.n	8005530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054fc:	f000 fd4c 	bl	8005f98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <prvCheckTasksWaitingTermination+0x4c>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fcb1 	bl	8003e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <prvCheckTasksWaitingTermination+0x50>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3b01      	subs	r3, #1
 8005518:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <prvCheckTasksWaitingTermination+0x50>)
 800551a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <prvCheckTasksWaitingTermination+0x54>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <prvCheckTasksWaitingTermination+0x54>)
 8005524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005526:	f000 fd65 	bl	8005ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f80e 	bl	800554c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <prvCheckTasksWaitingTermination+0x54>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e1      	bne.n	80054fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000bf8 	.word	0x20000bf8
 8005544:	20000c24 	.word	0x20000c24
 8005548:	20000c0c 	.word	0x20000c0c

0800554c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800555a:	2b00      	cmp	r3, #0
 800555c:	d108      	bne.n	8005570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fed0 	bl	8006308 <vPortFree>
				vPortFree( pxTCB );
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fecd 	bl	8006308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800556e:	e017      	b.n	80055a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005576:	2b01      	cmp	r3, #1
 8005578:	d103      	bne.n	8005582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fec4 	bl	8006308 <vPortFree>
	}
 8005580:	e00e      	b.n	80055a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005588:	2b02      	cmp	r3, #2
 800558a:	d009      	beq.n	80055a0 <prvDeleteTCB+0x54>
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e7fe      	b.n	800559e <prvDeleteTCB+0x52>
	}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <prvResetNextTaskUnblockTime+0x40>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <prvResetNextTaskUnblockTime+0x14>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <prvResetNextTaskUnblockTime+0x16>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <prvResetNextTaskUnblockTime+0x44>)
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055ca:	e008      	b.n	80055de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <prvResetNextTaskUnblockTime+0x40>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a04      	ldr	r2, [pc, #16]	; (80055ec <prvResetNextTaskUnblockTime+0x44>)
 80055dc:	6013      	str	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	20000bdc 	.word	0x20000bdc
 80055ec:	20000c44 	.word	0x20000c44

080055f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <xTaskGetSchedulerState+0x34>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055fe:	2301      	movs	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	e008      	b.n	8005616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <xTaskGetSchedulerState+0x38>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800560c:	2302      	movs	r3, #2
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	e001      	b.n	8005616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005616:	687b      	ldr	r3, [r7, #4]
	}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000c30 	.word	0x20000c30
 8005628:	20000c4c 	.word	0x20000c4c

0800562c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d054      	beq.n	80056ec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <xTaskPriorityDisinherit+0xcc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	429a      	cmp	r2, r3
 800564a:	d009      	beq.n	8005660 <xTaskPriorityDisinherit+0x34>
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e7fe      	b.n	800565e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <xTaskPriorityDisinherit+0x50>
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	e7fe      	b.n	800567a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568e:	429a      	cmp	r2, r3
 8005690:	d02c      	beq.n	80056ec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005696:	2b00      	cmp	r3, #0
 8005698:	d128      	bne.n	80056ec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	3304      	adds	r3, #4
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fbe8 	bl	8003e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <xTaskPriorityDisinherit+0xd0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d903      	bls.n	80056cc <xTaskPriorityDisinherit+0xa0>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <xTaskPriorityDisinherit+0xd0>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <xTaskPriorityDisinherit+0xd4>)
 80056da:	441a      	add	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fe fb6b 	bl	8003dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056ec:	697b      	ldr	r3, [r7, #20]
	}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000750 	.word	0x20000750
 80056fc:	20000c2c 	.word	0x20000c2c
 8005700:	20000754 	.word	0x20000754

08005704 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800570e:	4b21      	ldr	r3, [pc, #132]	; (8005794 <prvAddCurrentTaskToDelayedList+0x90>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005714:	4b20      	ldr	r3, [pc, #128]	; (8005798 <prvAddCurrentTaskToDelayedList+0x94>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fbaa 	bl	8003e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005726:	d10a      	bne.n	800573e <prvAddCurrentTaskToDelayedList+0x3a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <prvAddCurrentTaskToDelayedList+0x94>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4819      	ldr	r0, [pc, #100]	; (800579c <prvAddCurrentTaskToDelayedList+0x98>)
 8005738:	f7fe fb41 	bl	8003dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800573c:	e026      	b.n	800578c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4413      	add	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <prvAddCurrentTaskToDelayedList+0x94>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d209      	bcs.n	800576a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <prvAddCurrentTaskToDelayedList+0x94>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f7fe fb4e 	bl	8003e04 <vListInsert>
}
 8005768:	e010      	b.n	800578c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <prvAddCurrentTaskToDelayedList+0x94>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7fe fb44 	bl	8003e04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d202      	bcs.n	800578c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6013      	str	r3, [r2, #0]
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000c28 	.word	0x20000c28
 8005798:	20000750 	.word	0x20000750
 800579c:	20000c10 	.word	0x20000c10
 80057a0:	20000be0 	.word	0x20000be0
 80057a4:	20000bdc 	.word	0x20000bdc
 80057a8:	20000c44 	.word	0x20000c44

080057ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057b6:	f000 fac3 	bl	8005d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057ba:	4b1c      	ldr	r3, [pc, #112]	; (800582c <xTimerCreateTimerTask+0x80>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d021      	beq.n	8005806 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057ca:	1d3a      	adds	r2, r7, #4
 80057cc:	f107 0108 	add.w	r1, r7, #8
 80057d0:	f107 030c 	add.w	r3, r7, #12
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe faad 	bl	8003d34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	9202      	str	r2, [sp, #8]
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	2302      	movs	r3, #2
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2300      	movs	r3, #0
 80057ea:	460a      	mov	r2, r1
 80057ec:	4910      	ldr	r1, [pc, #64]	; (8005830 <xTimerCreateTimerTask+0x84>)
 80057ee:	4811      	ldr	r0, [pc, #68]	; (8005834 <xTimerCreateTimerTask+0x88>)
 80057f0:	f7ff f8f8 	bl	80049e4 <xTaskCreateStatic>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <xTimerCreateTimerTask+0x8c>)
 80057f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057fa:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <xTimerCreateTimerTask+0x8c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005802:	2301      	movs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <xTimerCreateTimerTask+0x74>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	e7fe      	b.n	800581e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005820:	697b      	ldr	r3, [r7, #20]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000c80 	.word	0x20000c80
 8005830:	08006eac 	.word	0x08006eac
 8005834:	08005955 	.word	0x08005955
 8005838:	20000c84 	.word	0x20000c84

0800583c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <xTimerGenericCommand+0x2c>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	623b      	str	r3, [r7, #32]
 8005866:	e7fe      	b.n	8005866 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <xTimerGenericCommand+0x94>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d02a      	beq.n	80058c6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b05      	cmp	r3, #5
 8005880:	dc18      	bgt.n	80058b4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005882:	f7ff feb5 	bl	80055f0 <xTaskGetSchedulerState>
 8005886:	4603      	mov	r3, r0
 8005888:	2b02      	cmp	r3, #2
 800588a:	d109      	bne.n	80058a0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <xTimerGenericCommand+0x94>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	f107 0110 	add.w	r1, r7, #16
 8005894:	2300      	movs	r3, #0
 8005896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005898:	f7fe fc50 	bl	800413c <xQueueGenericSend>
 800589c:	6278      	str	r0, [r7, #36]	; 0x24
 800589e:	e012      	b.n	80058c6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <xTimerGenericCommand+0x94>)
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	f107 0110 	add.w	r1, r7, #16
 80058a8:	2300      	movs	r3, #0
 80058aa:	2200      	movs	r2, #0
 80058ac:	f7fe fc46 	bl	800413c <xQueueGenericSend>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24
 80058b2:	e008      	b.n	80058c6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <xTimerGenericCommand+0x94>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	f107 0110 	add.w	r1, r7, #16
 80058bc:	2300      	movs	r3, #0
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	f7fe fd36 	bl	8004330 <xQueueGenericSendFromISR>
 80058c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	; 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000c80 	.word	0x20000c80

080058d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af02      	add	r7, sp, #8
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058de:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <prvProcessExpiredTimer+0x7c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe fac1 	bl	8003e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d121      	bne.n	800593e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	18d1      	adds	r1, r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f000 f8c8 	bl	8005a9c <prvInsertTimerInActiveList>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d015      	beq.n	800593e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005912:	2300      	movs	r3, #0
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	2100      	movs	r1, #0
 800591c:	6978      	ldr	r0, [r7, #20]
 800591e:	f7ff ff8d 	bl	800583c <xTimerGenericCommand>
 8005922:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <prvProcessExpiredTimer+0x6a>
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e7fe      	b.n	800593c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	4798      	blx	r3
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000c78 	.word	0x20000c78

08005954 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800595c:	f107 0308 	add.w	r3, r7, #8
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f857 	bl	8005a14 <prvGetNextExpireTime>
 8005966:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4619      	mov	r1, r3
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f803 	bl	8005978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005972:	f000 f8d5 	bl	8005b20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005976:	e7f1      	b.n	800595c <prvTimerTask+0x8>

08005978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005982:	f7ff fa5b 	bl	8004e3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f866 	bl	8005a5c <prvSampleTimeNow>
 8005990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d130      	bne.n	80059fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <prvProcessTimerOrBlockTask+0x3c>
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d806      	bhi.n	80059b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059a6:	f7ff fa57 	bl	8004e58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ff91 	bl	80058d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059b2:	e024      	b.n	80059fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <prvProcessTimerOrBlockTask+0x90>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059cc:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <prvProcessTimerOrBlockTask+0x94>)
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	f7fe ffcf 	bl	800497c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059de:	f7ff fa3b 	bl	8004e58 <xTaskResumeAll>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <prvProcessTimerOrBlockTask+0x98>)
 80059ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
}
 80059f8:	e001      	b.n	80059fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059fa:	f7ff fa2d 	bl	8004e58 <xTaskResumeAll>
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000c7c 	.word	0x20000c7c
 8005a0c:	20000c80 	.word	0x20000c80
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <prvGetNextExpireTime+0x44>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <prvGetNextExpireTime+0x44>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e001      	b.n	8005a4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000c78 	.word	0x20000c78

08005a5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a64:	f7ff fa94 	bl	8004f90 <xTaskGetTickCount>
 8005a68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <prvSampleTimeNow+0x3c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d205      	bcs.n	8005a80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a74:	f000 f904 	bl	8005c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a86:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <prvSampleTimeNow+0x3c>)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000c88 	.word	0x20000c88

08005a9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d812      	bhi.n	8005ae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d302      	bcc.n	8005ad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e01b      	b.n	8005b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ad6:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <prvInsertTimerInActiveList+0x7c>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fe f98f 	bl	8003e04 <vListInsert>
 8005ae6:	e012      	b.n	8005b0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d206      	bcs.n	8005afe <prvInsertTimerInActiveList+0x62>
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e007      	b.n	8005b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <prvInsertTimerInActiveList+0x80>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7fe f97b 	bl	8003e04 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b0e:	697b      	ldr	r3, [r7, #20]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000c7c 	.word	0x20000c7c
 8005b1c:	20000c78 	.word	0x20000c78

08005b20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08e      	sub	sp, #56	; 0x38
 8005b24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b26:	e099      	b.n	8005c5c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da17      	bge.n	8005b5e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	3304      	adds	r3, #4
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <prvProcessReceivedCommands+0x2e>
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e7fe      	b.n	8005b4c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b54:	6850      	ldr	r0, [r2, #4]
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	6892      	ldr	r2, [r2, #8]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	db7a      	blt.n	8005c5a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	3304      	adds	r3, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe f97d 	bl	8003e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff6d 	bl	8005a5c <prvSampleTimeNow>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d868      	bhi.n	8005c5c <prvProcessReceivedCommands+0x13c>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <prvProcessReceivedCommands+0x70>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005c5d 	.word	0x08005c5d
 8005ba0:	08005c13 	.word	0x08005c13
 8005ba4:	08005c49 	.word	0x08005c49
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bb9 	.word	0x08005bb9
 8005bb0:	08005c5d 	.word	0x08005c5d
 8005bb4:	08005c13 	.word	0x08005c13
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	18d1      	adds	r1, r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc6:	f7ff ff69 	bl	8005a9c <prvInsertTimerInActiveList>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d045      	beq.n	8005c5c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d13d      	bne.n	8005c5c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	441a      	add	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2300      	movs	r3, #0
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf2:	f7ff fe23 	bl	800583c <xTimerGenericCommand>
 8005bf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d12e      	bne.n	8005c5c <prvProcessReceivedCommands+0x13c>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e7fe      	b.n	8005c10 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <prvProcessReceivedCommands+0x114>
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e7fe      	b.n	8005c32 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	18d1      	adds	r1, r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c42:	f7ff ff2b 	bl	8005a9c <prvInsertTimerInActiveList>
					break;
 8005c46:	e009      	b.n	8005c5c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c54:	f000 fb58 	bl	8006308 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c58:	e000      	b.n	8005c5c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c5a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <prvProcessReceivedCommands+0x15c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	1d39      	adds	r1, r7, #4
 8005c62:	2200      	movs	r2, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fbf7 	bl	8004458 <xQueueReceive>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f47f af5b 	bne.w	8005b28 <prvProcessReceivedCommands+0x8>
	}
}
 8005c72:	bf00      	nop
 8005c74:	3730      	adds	r7, #48	; 0x30
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000c80 	.word	0x20000c80

08005c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c86:	e044      	b.n	8005d12 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c92:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe f8e7 	bl	8003e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d12d      	bne.n	8005d12 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d90e      	bls.n	8005ce6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cd4:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f7fe f890 	bl	8003e04 <vListInsert>
 8005ce4:	e015      	b.n	8005d12 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fda3 	bl	800583c <xTimerGenericCommand>
 8005cf6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <prvSwitchTimerLists+0x92>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	e7fe      	b.n	8005d10 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1b5      	bne.n	8005c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <prvSwitchTimerLists+0xbc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005d28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d2a:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <prvSwitchTimerLists+0xbc>)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6013      	str	r3, [r2, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000c78 	.word	0x20000c78
 8005d3c:	20000c7c 	.word	0x20000c7c

08005d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d46:	f000 f927 	bl	8005f98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <prvCheckForValidListAndQueue+0x60>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d120      	bne.n	8005d94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d52:	4814      	ldr	r0, [pc, #80]	; (8005da4 <prvCheckForValidListAndQueue+0x64>)
 8005d54:	f7fe f808 	bl	8003d68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d58:	4813      	ldr	r0, [pc, #76]	; (8005da8 <prvCheckForValidListAndQueue+0x68>)
 8005d5a:	f7fe f805 	bl	8003d68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <prvCheckForValidListAndQueue+0x6c>)
 8005d60:	4a10      	ldr	r2, [pc, #64]	; (8005da4 <prvCheckForValidListAndQueue+0x64>)
 8005d62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d64:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <prvCheckForValidListAndQueue+0x70>)
 8005d66:	4a10      	ldr	r2, [pc, #64]	; (8005da8 <prvCheckForValidListAndQueue+0x68>)
 8005d68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <prvCheckForValidListAndQueue+0x74>)
 8005d70:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <prvCheckForValidListAndQueue+0x78>)
 8005d72:	2110      	movs	r1, #16
 8005d74:	200a      	movs	r0, #10
 8005d76:	f7fe f90f 	bl	8003f98 <xQueueGenericCreateStatic>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <prvCheckForValidListAndQueue+0x60>)
 8005d7e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <prvCheckForValidListAndQueue+0x60>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <prvCheckForValidListAndQueue+0x60>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	490b      	ldr	r1, [pc, #44]	; (8005dbc <prvCheckForValidListAndQueue+0x7c>)
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fdcc 	bl	800492c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d94:	f000 f92e 	bl	8005ff4 <vPortExitCritical>
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000c80 	.word	0x20000c80
 8005da4:	20000c50 	.word	0x20000c50
 8005da8:	20000c64 	.word	0x20000c64
 8005dac:	20000c78 	.word	0x20000c78
 8005db0:	20000c7c 	.word	0x20000c7c
 8005db4:	20000d2c 	.word	0x20000d2c
 8005db8:	20000c8c 	.word	0x20000c8c
 8005dbc:	08006eb4 	.word	0x08006eb4

08005dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005df0:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <pxPortInitialiseStack+0x54>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b14      	subs	r3, #20
 8005dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b20      	subs	r3, #32
 8005e06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	08005e19 	.word	0x08005e19

08005e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e22:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <prvTaskExitError+0x4c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2a:	d009      	beq.n	8005e40 <prvTaskExitError+0x28>
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e7fe      	b.n	8005e3e <prvTaskExitError+0x26>
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e52:	bf00      	nop
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0fc      	beq.n	8005e54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr
 8005e64:	2000000c 	.word	0x2000000c
	...

08005e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <pxCurrentTCBConst2>)
 8005e72:	6819      	ldr	r1, [r3, #0]
 8005e74:	6808      	ldr	r0, [r1, #0]
 8005e76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e7a:	f380 8809 	msr	PSP, r0
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f04f 0000 	mov.w	r0, #0
 8005e86:	f380 8811 	msr	BASEPRI, r0
 8005e8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e8e:	4770      	bx	lr

08005e90 <pxCurrentTCBConst2>:
 8005e90:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e98:	4806      	ldr	r0, [pc, #24]	; (8005eb4 <prvPortStartFirstTask+0x1c>)
 8005e9a:	6800      	ldr	r0, [r0, #0]
 8005e9c:	6800      	ldr	r0, [r0, #0]
 8005e9e:	f380 8808 	msr	MSP, r0
 8005ea2:	b662      	cpsie	i
 8005ea4:	b661      	cpsie	f
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	df00      	svc	0
 8005eb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eb2:	bf00      	nop
 8005eb4:	e000ed08 	.word	0xe000ed08

08005eb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <xPortStartScheduler+0xcc>)
 8005ec0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <xPortStartScheduler+0xd0>)
 8005ee4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005ee8:	2207      	movs	r2, #7
 8005eea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eec:	e009      	b.n	8005f02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005eee:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005ef6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d0ef      	beq.n	8005eee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1c3 0307 	rsb	r3, r3, #7
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d009      	beq.n	8005f2e <xPortStartScheduler+0x76>
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	e7fe      	b.n	8005f2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f2e:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f38:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f40:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <xPortStartScheduler+0xd4>)
 8005f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <xPortStartScheduler+0xd8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0f      	ldr	r2, [pc, #60]	; (8005f90 <xPortStartScheduler+0xd8>)
 8005f52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f58:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <xPortStartScheduler+0xd8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <xPortStartScheduler+0xd8>)
 8005f5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f64:	f000 f8b0 	bl	80060c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <xPortStartScheduler+0xdc>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f6e:	f7ff ff93 	bl	8005e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f72:	f7ff f8d9 	bl	8005128 <vTaskSwitchContext>
	prvTaskExitError();
 8005f76:	f7ff ff4f 	bl	8005e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000e400 	.word	0xe000e400
 8005f88:	20000d7c 	.word	0x20000d7c
 8005f8c:	20000d80 	.word	0x20000d80
 8005f90:	e000ed20 	.word	0xe000ed20
 8005f94:	2000000c 	.word	0x2000000c

08005f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <vPortEnterCritical+0x54>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a0d      	ldr	r2, [pc, #52]	; (8005fec <vPortEnterCritical+0x54>)
 8005fb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fba:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <vPortEnterCritical+0x54>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d10e      	bne.n	8005fe0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <vPortEnterCritical+0x58>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <vPortEnterCritical+0x48>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	e7fe      	b.n	8005fde <vPortEnterCritical+0x46>
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	2000000c 	.word	0x2000000c
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <vPortExitCritical+0x48>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <vPortExitCritical+0x22>
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	607b      	str	r3, [r7, #4]
 8006014:	e7fe      	b.n	8006014 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <vPortExitCritical+0x48>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3b01      	subs	r3, #1
 800601c:	4a07      	ldr	r2, [pc, #28]	; (800603c <vPortExitCritical+0x48>)
 800601e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <vPortExitCritical+0x48>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <vPortExitCritical+0x3e>
 8006028:	2300      	movs	r3, #0
 800602a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	2000000c 	.word	0x2000000c

08006040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006040:	f3ef 8009 	mrs	r0, PSP
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <pxCurrentTCBConst>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006050:	6010      	str	r0, [r2, #0]
 8006052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006056:	f04f 0050 	mov.w	r0, #80	; 0x50
 800605a:	f380 8811 	msr	BASEPRI, r0
 800605e:	f7ff f863 	bl	8005128 <vTaskSwitchContext>
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	6808      	ldr	r0, [r1, #0]
 8006072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006076:	f380 8809 	msr	PSP, r0
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	4770      	bx	lr

08006080 <pxCurrentTCBConst>:
 8006080:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060a0:	f7fe ff84 	bl	8004fac <xTaskIncrementTick>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <SysTick_Handler+0x3c>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060cc:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <vPortSetupTimerInterrupt+0x30>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <vPortSetupTimerInterrupt+0x34>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060d8:	4b09      	ldr	r3, [pc, #36]	; (8006100 <vPortSetupTimerInterrupt+0x38>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <vPortSetupTimerInterrupt+0x3c>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	099b      	lsrs	r3, r3, #6
 80060e4:	4a08      	ldr	r2, [pc, #32]	; (8006108 <vPortSetupTimerInterrupt+0x40>)
 80060e6:	3b01      	subs	r3, #1
 80060e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ea:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <vPortSetupTimerInterrupt+0x30>)
 80060ec:	2207      	movs	r2, #7
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	e000e010 	.word	0xe000e010
 80060fc:	e000e018 	.word	0xe000e018
 8006100:	20000000 	.word	0x20000000
 8006104:	10624dd3 	.word	0x10624dd3
 8006108:	e000e014 	.word	0xe000e014

0800610c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006112:	f3ef 8305 	mrs	r3, IPSR
 8006116:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d913      	bls.n	8006146 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800611e:	4a15      	ldr	r2, [pc, #84]	; (8006174 <vPortValidateInterruptPriority+0x68>)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <vPortValidateInterruptPriority+0x6c>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	7afa      	ldrb	r2, [r7, #11]
 800612e:	429a      	cmp	r2, r3
 8006130:	d209      	bcs.n	8006146 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	e7fe      	b.n	8006144 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <vPortValidateInterruptPriority+0x70>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800614e:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <vPortValidateInterruptPriority+0x74>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d909      	bls.n	800616a <vPortValidateInterruptPriority+0x5e>
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	e7fe      	b.n	8006168 <vPortValidateInterruptPriority+0x5c>
	}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	e000e3f0 	.word	0xe000e3f0
 8006178:	20000d7c 	.word	0x20000d7c
 800617c:	e000ed0c 	.word	0xe000ed0c
 8006180:	20000d80 	.word	0x20000d80

08006184 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006190:	f7fe fe54 	bl	8004e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006194:	4b57      	ldr	r3, [pc, #348]	; (80062f4 <pvPortMalloc+0x170>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800619c:	f000 f90c 	bl	80063b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a0:	4b55      	ldr	r3, [pc, #340]	; (80062f8 <pvPortMalloc+0x174>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 808c 	bne.w	80062c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01c      	beq.n	80061ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80061b4:	2208      	movs	r2, #8
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d013      	beq.n	80061ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f023 0307 	bic.w	r3, r3, #7
 80061cc:	3308      	adds	r3, #8
 80061ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <pvPortMalloc+0x6a>
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e7fe      	b.n	80061ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d068      	beq.n	80062c6 <pvPortMalloc+0x142>
 80061f4:	4b41      	ldr	r3, [pc, #260]	; (80062fc <pvPortMalloc+0x178>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d863      	bhi.n	80062c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061fe:	4b40      	ldr	r3, [pc, #256]	; (8006300 <pvPortMalloc+0x17c>)
 8006200:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006202:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <pvPortMalloc+0x17c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006208:	e004      	b.n	8006214 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <pvPortMalloc+0xa2>
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f1      	bne.n	800620a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006226:	4b33      	ldr	r3, [pc, #204]	; (80062f4 <pvPortMalloc+0x170>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	429a      	cmp	r2, r3
 800622e:	d04a      	beq.n	80062c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2208      	movs	r2, #8
 8006236:	4413      	add	r3, r2
 8006238:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	1ad2      	subs	r2, r2, r3
 800624a:	2308      	movs	r3, #8
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	429a      	cmp	r2, r3
 8006250:	d91e      	bls.n	8006290 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <pvPortMalloc+0xf4>
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e7fe      	b.n	8006276 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800628a:	69b8      	ldr	r0, [r7, #24]
 800628c:	f000 f8f6 	bl	800647c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006290:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <pvPortMalloc+0x178>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <pvPortMalloc+0x178>)
 800629c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800629e:	4b17      	ldr	r3, [pc, #92]	; (80062fc <pvPortMalloc+0x178>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b18      	ldr	r3, [pc, #96]	; (8006304 <pvPortMalloc+0x180>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d203      	bcs.n	80062b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <pvPortMalloc+0x178>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <pvPortMalloc+0x180>)
 80062b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <pvPortMalloc+0x174>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062c6:	f7fe fdc7 	bl	8004e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <pvPortMalloc+0x164>
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e7fe      	b.n	80062e6 <pvPortMalloc+0x162>
	return pvReturn;
 80062e8:	69fb      	ldr	r3, [r7, #28]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3728      	adds	r7, #40	; 0x28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	2000198c 	.word	0x2000198c
 80062f8:	20001998 	.word	0x20001998
 80062fc:	20001990 	.word	0x20001990
 8006300:	20001984 	.word	0x20001984
 8006304:	20001994 	.word	0x20001994

08006308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d046      	beq.n	80063a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800631a:	2308      	movs	r3, #8
 800631c:	425b      	negs	r3, r3
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <vPortFree+0xa8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <vPortFree+0x42>
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	e7fe      	b.n	8006348 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <vPortFree+0x5e>
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	e7fe      	b.n	8006364 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <vPortFree+0xa8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d019      	beq.n	80063a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d115      	bne.n	80063a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortFree+0xa8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	43db      	mvns	r3, r3
 8006386:	401a      	ands	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800638c:	f7fe fd56 	bl	8004e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <vPortFree+0xac>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4413      	add	r3, r2
 800639a:	4a06      	ldr	r2, [pc, #24]	; (80063b4 <vPortFree+0xac>)
 800639c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639e:	6938      	ldr	r0, [r7, #16]
 80063a0:	f000 f86c 	bl	800647c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063a4:	f7fe fd58 	bl	8004e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20001998 	.word	0x20001998
 80063b4:	20001990 	.word	0x20001990

080063b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063c4:	4b27      	ldr	r3, [pc, #156]	; (8006464 <prvHeapInit+0xac>)
 80063c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3307      	adds	r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0307 	bic.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <prvHeapInit+0xac>)
 80063e8:	4413      	add	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <prvHeapInit+0xb0>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063f6:	4b1c      	ldr	r3, [pc, #112]	; (8006468 <prvHeapInit+0xb0>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006404:	2208      	movs	r2, #8
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a15      	ldr	r2, [pc, #84]	; (800646c <prvHeapInit+0xb4>)
 8006418:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <prvHeapInit+0xb4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2200      	movs	r2, #0
 8006420:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006422:	4b12      	ldr	r3, [pc, #72]	; (800646c <prvHeapInit+0xb4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <prvHeapInit+0xb4>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <prvHeapInit+0xb8>)
 8006446:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <prvHeapInit+0xbc>)
 800644e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <prvHeapInit+0xc0>)
 8006452:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006456:	601a      	str	r2, [r3, #0]
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000d84 	.word	0x20000d84
 8006468:	20001984 	.word	0x20001984
 800646c:	2000198c 	.word	0x2000198c
 8006470:	20001994 	.word	0x20001994
 8006474:	20001990 	.word	0x20001990
 8006478:	20001998 	.word	0x20001998

0800647c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006484:	4b27      	ldr	r3, [pc, #156]	; (8006524 <prvInsertBlockIntoFreeList+0xa8>)
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e002      	b.n	8006490 <prvInsertBlockIntoFreeList+0x14>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d8f7      	bhi.n	800648a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4413      	add	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d108      	bne.n	80064be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	441a      	add	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	441a      	add	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d118      	bne.n	8006504 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b14      	ldr	r3, [pc, #80]	; (8006528 <prvInsertBlockIntoFreeList+0xac>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d00d      	beq.n	80064fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	e008      	b.n	800650c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <prvInsertBlockIntoFreeList+0xac>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e003      	b.n	800650c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d002      	beq.n	800651a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr
 8006524:	20001984 	.word	0x20001984
 8006528:	2000198c 	.word	0x2000198c

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	; (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000010 	.word	0x20000010

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	2500      	movs	r5, #0
 800653c:	4e0c      	ldr	r6, [pc, #48]	; (8006570 <__libc_init_array+0x38>)
 800653e:	4c0d      	ldr	r4, [pc, #52]	; (8006574 <__libc_init_array+0x3c>)
 8006540:	1ba4      	subs	r4, r4, r6
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	42a5      	cmp	r5, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	f000 fc3e 	bl	8006dc8 <_init>
 800654c:	2500      	movs	r5, #0
 800654e:	4e0a      	ldr	r6, [pc, #40]	; (8006578 <__libc_init_array+0x40>)
 8006550:	4c0a      	ldr	r4, [pc, #40]	; (800657c <__libc_init_array+0x44>)
 8006552:	1ba4      	subs	r4, r4, r6
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	42a5      	cmp	r5, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006560:	4798      	blx	r3
 8006562:	3501      	adds	r5, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800656a:	4798      	blx	r3
 800656c:	3501      	adds	r5, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	08006fbc 	.word	0x08006fbc
 8006574:	08006fbc 	.word	0x08006fbc
 8006578:	08006fbc 	.word	0x08006fbc
 800657c:	08006fc0 	.word	0x08006fc0

08006580 <memcpy>:
 8006580:	b510      	push	{r4, lr}
 8006582:	1e43      	subs	r3, r0, #1
 8006584:	440a      	add	r2, r1
 8006586:	4291      	cmp	r1, r2
 8006588:	d100      	bne.n	800658c <memcpy+0xc>
 800658a:	bd10      	pop	{r4, pc}
 800658c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006594:	e7f7      	b.n	8006586 <memcpy+0x6>

08006596 <memset>:
 8006596:	4603      	mov	r3, r0
 8006598:	4402      	add	r2, r0
 800659a:	4293      	cmp	r3, r2
 800659c:	d100      	bne.n	80065a0 <memset+0xa>
 800659e:	4770      	bx	lr
 80065a0:	f803 1b01 	strb.w	r1, [r3], #1
 80065a4:	e7f9      	b.n	800659a <memset+0x4>
	...

080065a8 <siprintf>:
 80065a8:	b40e      	push	{r1, r2, r3}
 80065aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065ae:	b500      	push	{lr}
 80065b0:	b09c      	sub	sp, #112	; 0x70
 80065b2:	ab1d      	add	r3, sp, #116	; 0x74
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	9006      	str	r0, [sp, #24]
 80065b8:	9107      	str	r1, [sp, #28]
 80065ba:	9104      	str	r1, [sp, #16]
 80065bc:	4808      	ldr	r0, [pc, #32]	; (80065e0 <siprintf+0x38>)
 80065be:	4909      	ldr	r1, [pc, #36]	; (80065e4 <siprintf+0x3c>)
 80065c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	6800      	ldr	r0, [r0, #0]
 80065c8:	a902      	add	r1, sp, #8
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	f000 f86e 	bl	80066ac <_svfiprintf_r>
 80065d0:	2200      	movs	r2, #0
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	b01c      	add	sp, #112	; 0x70
 80065d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065dc:	b003      	add	sp, #12
 80065de:	4770      	bx	lr
 80065e0:	20000010 	.word	0x20000010
 80065e4:	ffff0208 	.word	0xffff0208

080065e8 <strcpy>:
 80065e8:	4603      	mov	r3, r0
 80065ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ee:	f803 2b01 	strb.w	r2, [r3], #1
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	d1f9      	bne.n	80065ea <strcpy+0x2>
 80065f6:	4770      	bx	lr

080065f8 <__ssputs_r>:
 80065f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	688e      	ldr	r6, [r1, #8]
 80065fe:	4682      	mov	sl, r0
 8006600:	429e      	cmp	r6, r3
 8006602:	460c      	mov	r4, r1
 8006604:	4690      	mov	r8, r2
 8006606:	4699      	mov	r9, r3
 8006608:	d837      	bhi.n	800667a <__ssputs_r+0x82>
 800660a:	898a      	ldrh	r2, [r1, #12]
 800660c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006610:	d031      	beq.n	8006676 <__ssputs_r+0x7e>
 8006612:	2302      	movs	r3, #2
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	6909      	ldr	r1, [r1, #16]
 8006618:	1a6f      	subs	r7, r5, r1
 800661a:	6965      	ldr	r5, [r4, #20]
 800661c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006620:	fb95 f5f3 	sdiv	r5, r5, r3
 8006624:	f109 0301 	add.w	r3, r9, #1
 8006628:	443b      	add	r3, r7
 800662a:	429d      	cmp	r5, r3
 800662c:	bf38      	it	cc
 800662e:	461d      	movcc	r5, r3
 8006630:	0553      	lsls	r3, r2, #21
 8006632:	d530      	bpl.n	8006696 <__ssputs_r+0x9e>
 8006634:	4629      	mov	r1, r5
 8006636:	f000 fb2d 	bl	8006c94 <_malloc_r>
 800663a:	4606      	mov	r6, r0
 800663c:	b950      	cbnz	r0, 8006654 <__ssputs_r+0x5c>
 800663e:	230c      	movs	r3, #12
 8006640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006644:	f8ca 3000 	str.w	r3, [sl]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006654:	463a      	mov	r2, r7
 8006656:	6921      	ldr	r1, [r4, #16]
 8006658:	f7ff ff92 	bl	8006580 <memcpy>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	6126      	str	r6, [r4, #16]
 800666a:	443e      	add	r6, r7
 800666c:	6026      	str	r6, [r4, #0]
 800666e:	464e      	mov	r6, r9
 8006670:	6165      	str	r5, [r4, #20]
 8006672:	1bed      	subs	r5, r5, r7
 8006674:	60a5      	str	r5, [r4, #8]
 8006676:	454e      	cmp	r6, r9
 8006678:	d900      	bls.n	800667c <__ssputs_r+0x84>
 800667a:	464e      	mov	r6, r9
 800667c:	4632      	mov	r2, r6
 800667e:	4641      	mov	r1, r8
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	f000 faa1 	bl	8006bc8 <memmove>
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	2000      	movs	r0, #0
 800668a:	1b9b      	subs	r3, r3, r6
 800668c:	60a3      	str	r3, [r4, #8]
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	441e      	add	r6, r3
 8006692:	6026      	str	r6, [r4, #0]
 8006694:	e7dc      	b.n	8006650 <__ssputs_r+0x58>
 8006696:	462a      	mov	r2, r5
 8006698:	f000 fb56 	bl	8006d48 <_realloc_r>
 800669c:	4606      	mov	r6, r0
 800669e:	2800      	cmp	r0, #0
 80066a0:	d1e2      	bne.n	8006668 <__ssputs_r+0x70>
 80066a2:	6921      	ldr	r1, [r4, #16]
 80066a4:	4650      	mov	r0, sl
 80066a6:	f000 faa9 	bl	8006bfc <_free_r>
 80066aa:	e7c8      	b.n	800663e <__ssputs_r+0x46>

080066ac <_svfiprintf_r>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	461d      	mov	r5, r3
 80066b2:	898b      	ldrh	r3, [r1, #12]
 80066b4:	b09d      	sub	sp, #116	; 0x74
 80066b6:	061f      	lsls	r7, r3, #24
 80066b8:	4680      	mov	r8, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4616      	mov	r6, r2
 80066be:	d50f      	bpl.n	80066e0 <_svfiprintf_r+0x34>
 80066c0:	690b      	ldr	r3, [r1, #16]
 80066c2:	b96b      	cbnz	r3, 80066e0 <_svfiprintf_r+0x34>
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	f000 fae5 	bl	8006c94 <_malloc_r>
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	6120      	str	r0, [r4, #16]
 80066ce:	b928      	cbnz	r0, 80066dc <_svfiprintf_r+0x30>
 80066d0:	230c      	movs	r3, #12
 80066d2:	f8c8 3000 	str.w	r3, [r8]
 80066d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066da:	e0c8      	b.n	800686e <_svfiprintf_r+0x1c2>
 80066dc:	2340      	movs	r3, #64	; 0x40
 80066de:	6163      	str	r3, [r4, #20]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9309      	str	r3, [sp, #36]	; 0x24
 80066e4:	2320      	movs	r3, #32
 80066e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ea:	2330      	movs	r3, #48	; 0x30
 80066ec:	f04f 0b01 	mov.w	fp, #1
 80066f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066f4:	9503      	str	r5, [sp, #12]
 80066f6:	4637      	mov	r7, r6
 80066f8:	463d      	mov	r5, r7
 80066fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066fe:	b10b      	cbz	r3, 8006704 <_svfiprintf_r+0x58>
 8006700:	2b25      	cmp	r3, #37	; 0x25
 8006702:	d13e      	bne.n	8006782 <_svfiprintf_r+0xd6>
 8006704:	ebb7 0a06 	subs.w	sl, r7, r6
 8006708:	d00b      	beq.n	8006722 <_svfiprintf_r+0x76>
 800670a:	4653      	mov	r3, sl
 800670c:	4632      	mov	r2, r6
 800670e:	4621      	mov	r1, r4
 8006710:	4640      	mov	r0, r8
 8006712:	f7ff ff71 	bl	80065f8 <__ssputs_r>
 8006716:	3001      	adds	r0, #1
 8006718:	f000 80a4 	beq.w	8006864 <_svfiprintf_r+0x1b8>
 800671c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671e:	4453      	add	r3, sl
 8006720:	9309      	str	r3, [sp, #36]	; 0x24
 8006722:	783b      	ldrb	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 809d 	beq.w	8006864 <_svfiprintf_r+0x1b8>
 800672a:	2300      	movs	r3, #0
 800672c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673c:	931a      	str	r3, [sp, #104]	; 0x68
 800673e:	462f      	mov	r7, r5
 8006740:	2205      	movs	r2, #5
 8006742:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006746:	4850      	ldr	r0, [pc, #320]	; (8006888 <_svfiprintf_r+0x1dc>)
 8006748:	f000 fa30 	bl	8006bac <memchr>
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	b9d0      	cbnz	r0, 8006786 <_svfiprintf_r+0xda>
 8006750:	06d9      	lsls	r1, r3, #27
 8006752:	bf44      	itt	mi
 8006754:	2220      	movmi	r2, #32
 8006756:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800675a:	071a      	lsls	r2, r3, #28
 800675c:	bf44      	itt	mi
 800675e:	222b      	movmi	r2, #43	; 0x2b
 8006760:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006764:	782a      	ldrb	r2, [r5, #0]
 8006766:	2a2a      	cmp	r2, #42	; 0x2a
 8006768:	d015      	beq.n	8006796 <_svfiprintf_r+0xea>
 800676a:	462f      	mov	r7, r5
 800676c:	2000      	movs	r0, #0
 800676e:	250a      	movs	r5, #10
 8006770:	9a07      	ldr	r2, [sp, #28]
 8006772:	4639      	mov	r1, r7
 8006774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006778:	3b30      	subs	r3, #48	; 0x30
 800677a:	2b09      	cmp	r3, #9
 800677c:	d94d      	bls.n	800681a <_svfiprintf_r+0x16e>
 800677e:	b1b8      	cbz	r0, 80067b0 <_svfiprintf_r+0x104>
 8006780:	e00f      	b.n	80067a2 <_svfiprintf_r+0xf6>
 8006782:	462f      	mov	r7, r5
 8006784:	e7b8      	b.n	80066f8 <_svfiprintf_r+0x4c>
 8006786:	4a40      	ldr	r2, [pc, #256]	; (8006888 <_svfiprintf_r+0x1dc>)
 8006788:	463d      	mov	r5, r7
 800678a:	1a80      	subs	r0, r0, r2
 800678c:	fa0b f000 	lsl.w	r0, fp, r0
 8006790:	4318      	orrs	r0, r3
 8006792:	9004      	str	r0, [sp, #16]
 8006794:	e7d3      	b.n	800673e <_svfiprintf_r+0x92>
 8006796:	9a03      	ldr	r2, [sp, #12]
 8006798:	1d11      	adds	r1, r2, #4
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	9103      	str	r1, [sp, #12]
 800679e:	2a00      	cmp	r2, #0
 80067a0:	db01      	blt.n	80067a6 <_svfiprintf_r+0xfa>
 80067a2:	9207      	str	r2, [sp, #28]
 80067a4:	e004      	b.n	80067b0 <_svfiprintf_r+0x104>
 80067a6:	4252      	negs	r2, r2
 80067a8:	f043 0302 	orr.w	r3, r3, #2
 80067ac:	9207      	str	r2, [sp, #28]
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	783b      	ldrb	r3, [r7, #0]
 80067b2:	2b2e      	cmp	r3, #46	; 0x2e
 80067b4:	d10c      	bne.n	80067d0 <_svfiprintf_r+0x124>
 80067b6:	787b      	ldrb	r3, [r7, #1]
 80067b8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ba:	d133      	bne.n	8006824 <_svfiprintf_r+0x178>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	3702      	adds	r7, #2
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	9203      	str	r2, [sp, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	4d2e      	ldr	r5, [pc, #184]	; (800688c <_svfiprintf_r+0x1e0>)
 80067d2:	2203      	movs	r2, #3
 80067d4:	7839      	ldrb	r1, [r7, #0]
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f9e8 	bl	8006bac <memchr>
 80067dc:	b138      	cbz	r0, 80067ee <_svfiprintf_r+0x142>
 80067de:	2340      	movs	r3, #64	; 0x40
 80067e0:	1b40      	subs	r0, r0, r5
 80067e2:	fa03 f000 	lsl.w	r0, r3, r0
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	3701      	adds	r7, #1
 80067ea:	4303      	orrs	r3, r0
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	7839      	ldrb	r1, [r7, #0]
 80067f0:	2206      	movs	r2, #6
 80067f2:	4827      	ldr	r0, [pc, #156]	; (8006890 <_svfiprintf_r+0x1e4>)
 80067f4:	1c7e      	adds	r6, r7, #1
 80067f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fa:	f000 f9d7 	bl	8006bac <memchr>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d038      	beq.n	8006874 <_svfiprintf_r+0x1c8>
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <_svfiprintf_r+0x1e8>)
 8006804:	bb13      	cbnz	r3, 800684c <_svfiprintf_r+0x1a0>
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	3307      	adds	r3, #7
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	3308      	adds	r3, #8
 8006810:	9303      	str	r3, [sp, #12]
 8006812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006814:	444b      	add	r3, r9
 8006816:	9309      	str	r3, [sp, #36]	; 0x24
 8006818:	e76d      	b.n	80066f6 <_svfiprintf_r+0x4a>
 800681a:	fb05 3202 	mla	r2, r5, r2, r3
 800681e:	2001      	movs	r0, #1
 8006820:	460f      	mov	r7, r1
 8006822:	e7a6      	b.n	8006772 <_svfiprintf_r+0xc6>
 8006824:	2300      	movs	r3, #0
 8006826:	250a      	movs	r5, #10
 8006828:	4619      	mov	r1, r3
 800682a:	3701      	adds	r7, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	4638      	mov	r0, r7
 8006830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006834:	3a30      	subs	r2, #48	; 0x30
 8006836:	2a09      	cmp	r2, #9
 8006838:	d903      	bls.n	8006842 <_svfiprintf_r+0x196>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0c8      	beq.n	80067d0 <_svfiprintf_r+0x124>
 800683e:	9105      	str	r1, [sp, #20]
 8006840:	e7c6      	b.n	80067d0 <_svfiprintf_r+0x124>
 8006842:	fb05 2101 	mla	r1, r5, r1, r2
 8006846:	2301      	movs	r3, #1
 8006848:	4607      	mov	r7, r0
 800684a:	e7f0      	b.n	800682e <_svfiprintf_r+0x182>
 800684c:	ab03      	add	r3, sp, #12
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	4622      	mov	r2, r4
 8006852:	4b11      	ldr	r3, [pc, #68]	; (8006898 <_svfiprintf_r+0x1ec>)
 8006854:	a904      	add	r1, sp, #16
 8006856:	4640      	mov	r0, r8
 8006858:	f3af 8000 	nop.w
 800685c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006860:	4681      	mov	r9, r0
 8006862:	d1d6      	bne.n	8006812 <_svfiprintf_r+0x166>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	065b      	lsls	r3, r3, #25
 8006868:	f53f af35 	bmi.w	80066d6 <_svfiprintf_r+0x2a>
 800686c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800686e:	b01d      	add	sp, #116	; 0x74
 8006870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006874:	ab03      	add	r3, sp, #12
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	4622      	mov	r2, r4
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <_svfiprintf_r+0x1ec>)
 800687c:	a904      	add	r1, sp, #16
 800687e:	4640      	mov	r0, r8
 8006880:	f000 f882 	bl	8006988 <_printf_i>
 8006884:	e7ea      	b.n	800685c <_svfiprintf_r+0x1b0>
 8006886:	bf00      	nop
 8006888:	08006f88 	.word	0x08006f88
 800688c:	08006f8e 	.word	0x08006f8e
 8006890:	08006f92 	.word	0x08006f92
 8006894:	00000000 	.word	0x00000000
 8006898:	080065f9 	.word	0x080065f9

0800689c <_printf_common>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	4691      	mov	r9, r2
 80068a2:	461f      	mov	r7, r3
 80068a4:	688a      	ldr	r2, [r1, #8]
 80068a6:	690b      	ldr	r3, [r1, #16]
 80068a8:	4606      	mov	r6, r0
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bfb8      	it	lt
 80068ae:	4613      	movlt	r3, r2
 80068b0:	f8c9 3000 	str.w	r3, [r9]
 80068b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b8:	460c      	mov	r4, r1
 80068ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068be:	b112      	cbz	r2, 80068c6 <_printf_common+0x2a>
 80068c0:	3301      	adds	r3, #1
 80068c2:	f8c9 3000 	str.w	r3, [r9]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	0699      	lsls	r1, r3, #26
 80068ca:	bf42      	ittt	mi
 80068cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068d0:	3302      	addmi	r3, #2
 80068d2:	f8c9 3000 	strmi.w	r3, [r9]
 80068d6:	6825      	ldr	r5, [r4, #0]
 80068d8:	f015 0506 	ands.w	r5, r5, #6
 80068dc:	d107      	bne.n	80068ee <_printf_common+0x52>
 80068de:	f104 0a19 	add.w	sl, r4, #25
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	f8d9 2000 	ldr.w	r2, [r9]
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	42ab      	cmp	r3, r5
 80068ec:	dc29      	bgt.n	8006942 <_printf_common+0xa6>
 80068ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	3300      	adds	r3, #0
 80068f6:	bf18      	it	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	0692      	lsls	r2, r2, #26
 80068fc:	d42e      	bmi.n	800695c <_printf_common+0xc0>
 80068fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006902:	4639      	mov	r1, r7
 8006904:	4630      	mov	r0, r6
 8006906:	47c0      	blx	r8
 8006908:	3001      	adds	r0, #1
 800690a:	d021      	beq.n	8006950 <_printf_common+0xb4>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	68e5      	ldr	r5, [r4, #12]
 8006910:	f003 0306 	and.w	r3, r3, #6
 8006914:	2b04      	cmp	r3, #4
 8006916:	bf18      	it	ne
 8006918:	2500      	movne	r5, #0
 800691a:	f8d9 2000 	ldr.w	r2, [r9]
 800691e:	f04f 0900 	mov.w	r9, #0
 8006922:	bf08      	it	eq
 8006924:	1aad      	subeq	r5, r5, r2
 8006926:	68a3      	ldr	r3, [r4, #8]
 8006928:	6922      	ldr	r2, [r4, #16]
 800692a:	bf08      	it	eq
 800692c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006930:	4293      	cmp	r3, r2
 8006932:	bfc4      	itt	gt
 8006934:	1a9b      	subgt	r3, r3, r2
 8006936:	18ed      	addgt	r5, r5, r3
 8006938:	341a      	adds	r4, #26
 800693a:	454d      	cmp	r5, r9
 800693c:	d11a      	bne.n	8006974 <_printf_common+0xd8>
 800693e:	2000      	movs	r0, #0
 8006940:	e008      	b.n	8006954 <_printf_common+0xb8>
 8006942:	2301      	movs	r3, #1
 8006944:	4652      	mov	r2, sl
 8006946:	4639      	mov	r1, r7
 8006948:	4630      	mov	r0, r6
 800694a:	47c0      	blx	r8
 800694c:	3001      	adds	r0, #1
 800694e:	d103      	bne.n	8006958 <_printf_common+0xbc>
 8006950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006958:	3501      	adds	r5, #1
 800695a:	e7c2      	b.n	80068e2 <_printf_common+0x46>
 800695c:	2030      	movs	r0, #48	; 0x30
 800695e:	18e1      	adds	r1, r4, r3
 8006960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800696a:	4422      	add	r2, r4
 800696c:	3302      	adds	r3, #2
 800696e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006972:	e7c4      	b.n	80068fe <_printf_common+0x62>
 8006974:	2301      	movs	r3, #1
 8006976:	4622      	mov	r2, r4
 8006978:	4639      	mov	r1, r7
 800697a:	4630      	mov	r0, r6
 800697c:	47c0      	blx	r8
 800697e:	3001      	adds	r0, #1
 8006980:	d0e6      	beq.n	8006950 <_printf_common+0xb4>
 8006982:	f109 0901 	add.w	r9, r9, #1
 8006986:	e7d8      	b.n	800693a <_printf_common+0x9e>

08006988 <_printf_i>:
 8006988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800698c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006990:	460c      	mov	r4, r1
 8006992:	7e09      	ldrb	r1, [r1, #24]
 8006994:	b085      	sub	sp, #20
 8006996:	296e      	cmp	r1, #110	; 0x6e
 8006998:	4617      	mov	r7, r2
 800699a:	4606      	mov	r6, r0
 800699c:	4698      	mov	r8, r3
 800699e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069a0:	f000 80b3 	beq.w	8006b0a <_printf_i+0x182>
 80069a4:	d822      	bhi.n	80069ec <_printf_i+0x64>
 80069a6:	2963      	cmp	r1, #99	; 0x63
 80069a8:	d036      	beq.n	8006a18 <_printf_i+0x90>
 80069aa:	d80a      	bhi.n	80069c2 <_printf_i+0x3a>
 80069ac:	2900      	cmp	r1, #0
 80069ae:	f000 80b9 	beq.w	8006b24 <_printf_i+0x19c>
 80069b2:	2958      	cmp	r1, #88	; 0x58
 80069b4:	f000 8083 	beq.w	8006abe <_printf_i+0x136>
 80069b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80069c0:	e032      	b.n	8006a28 <_printf_i+0xa0>
 80069c2:	2964      	cmp	r1, #100	; 0x64
 80069c4:	d001      	beq.n	80069ca <_printf_i+0x42>
 80069c6:	2969      	cmp	r1, #105	; 0x69
 80069c8:	d1f6      	bne.n	80069b8 <_printf_i+0x30>
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	6813      	ldr	r3, [r2, #0]
 80069ce:	0605      	lsls	r5, r0, #24
 80069d0:	f103 0104 	add.w	r1, r3, #4
 80069d4:	d52a      	bpl.n	8006a2c <_printf_i+0xa4>
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6011      	str	r1, [r2, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	da03      	bge.n	80069e6 <_printf_i+0x5e>
 80069de:	222d      	movs	r2, #45	; 0x2d
 80069e0:	425b      	negs	r3, r3
 80069e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069e6:	486f      	ldr	r0, [pc, #444]	; (8006ba4 <_printf_i+0x21c>)
 80069e8:	220a      	movs	r2, #10
 80069ea:	e039      	b.n	8006a60 <_printf_i+0xd8>
 80069ec:	2973      	cmp	r1, #115	; 0x73
 80069ee:	f000 809d 	beq.w	8006b2c <_printf_i+0x1a4>
 80069f2:	d808      	bhi.n	8006a06 <_printf_i+0x7e>
 80069f4:	296f      	cmp	r1, #111	; 0x6f
 80069f6:	d020      	beq.n	8006a3a <_printf_i+0xb2>
 80069f8:	2970      	cmp	r1, #112	; 0x70
 80069fa:	d1dd      	bne.n	80069b8 <_printf_i+0x30>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	f043 0320 	orr.w	r3, r3, #32
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	e003      	b.n	8006a0e <_printf_i+0x86>
 8006a06:	2975      	cmp	r1, #117	; 0x75
 8006a08:	d017      	beq.n	8006a3a <_printf_i+0xb2>
 8006a0a:	2978      	cmp	r1, #120	; 0x78
 8006a0c:	d1d4      	bne.n	80069b8 <_printf_i+0x30>
 8006a0e:	2378      	movs	r3, #120	; 0x78
 8006a10:	4865      	ldr	r0, [pc, #404]	; (8006ba8 <_printf_i+0x220>)
 8006a12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a16:	e055      	b.n	8006ac4 <_printf_i+0x13c>
 8006a18:	6813      	ldr	r3, [r2, #0]
 8006a1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1e:	1d19      	adds	r1, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6011      	str	r1, [r2, #0]
 8006a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e08c      	b.n	8006b46 <_printf_i+0x1be>
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a32:	6011      	str	r1, [r2, #0]
 8006a34:	bf18      	it	ne
 8006a36:	b21b      	sxthne	r3, r3
 8006a38:	e7cf      	b.n	80069da <_printf_i+0x52>
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	6825      	ldr	r5, [r4, #0]
 8006a3e:	1d18      	adds	r0, r3, #4
 8006a40:	6010      	str	r0, [r2, #0]
 8006a42:	0628      	lsls	r0, r5, #24
 8006a44:	d501      	bpl.n	8006a4a <_printf_i+0xc2>
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	e002      	b.n	8006a50 <_printf_i+0xc8>
 8006a4a:	0668      	lsls	r0, r5, #25
 8006a4c:	d5fb      	bpl.n	8006a46 <_printf_i+0xbe>
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	296f      	cmp	r1, #111	; 0x6f
 8006a52:	bf14      	ite	ne
 8006a54:	220a      	movne	r2, #10
 8006a56:	2208      	moveq	r2, #8
 8006a58:	4852      	ldr	r0, [pc, #328]	; (8006ba4 <_printf_i+0x21c>)
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a60:	6865      	ldr	r5, [r4, #4]
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	60a5      	str	r5, [r4, #8]
 8006a66:	f2c0 8095 	blt.w	8006b94 <_printf_i+0x20c>
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	f021 0104 	bic.w	r1, r1, #4
 8006a70:	6021      	str	r1, [r4, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d13d      	bne.n	8006af2 <_printf_i+0x16a>
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	f040 808e 	bne.w	8006b98 <_printf_i+0x210>
 8006a7c:	4665      	mov	r5, ip
 8006a7e:	2a08      	cmp	r2, #8
 8006a80:	d10b      	bne.n	8006a9a <_printf_i+0x112>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	07db      	lsls	r3, r3, #31
 8006a86:	d508      	bpl.n	8006a9a <_printf_i+0x112>
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	bfde      	ittt	le
 8006a90:	2330      	movle	r3, #48	; 0x30
 8006a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a9a:	ebac 0305 	sub.w	r3, ip, r5
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	f8cd 8000 	str.w	r8, [sp]
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	aa03      	add	r2, sp, #12
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff fef6 	bl	800689c <_printf_common>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d14d      	bne.n	8006b50 <_printf_i+0x1c8>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab8:	b005      	add	sp, #20
 8006aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006abe:	4839      	ldr	r0, [pc, #228]	; (8006ba4 <_printf_i+0x21c>)
 8006ac0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ac4:	6813      	ldr	r3, [r2, #0]
 8006ac6:	6821      	ldr	r1, [r4, #0]
 8006ac8:	1d1d      	adds	r5, r3, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6015      	str	r5, [r2, #0]
 8006ace:	060a      	lsls	r2, r1, #24
 8006ad0:	d50b      	bpl.n	8006aea <_printf_i+0x162>
 8006ad2:	07ca      	lsls	r2, r1, #31
 8006ad4:	bf44      	itt	mi
 8006ad6:	f041 0120 	orrmi.w	r1, r1, #32
 8006ada:	6021      	strmi	r1, [r4, #0]
 8006adc:	b91b      	cbnz	r3, 8006ae6 <_printf_i+0x15e>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	f022 0220 	bic.w	r2, r2, #32
 8006ae4:	6022      	str	r2, [r4, #0]
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	e7b7      	b.n	8006a5a <_printf_i+0xd2>
 8006aea:	064d      	lsls	r5, r1, #25
 8006aec:	bf48      	it	mi
 8006aee:	b29b      	uxthmi	r3, r3
 8006af0:	e7ef      	b.n	8006ad2 <_printf_i+0x14a>
 8006af2:	4665      	mov	r5, ip
 8006af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006af8:	fb02 3311 	mls	r3, r2, r1, r3
 8006afc:	5cc3      	ldrb	r3, [r0, r3]
 8006afe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b02:	460b      	mov	r3, r1
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d1f5      	bne.n	8006af4 <_printf_i+0x16c>
 8006b08:	e7b9      	b.n	8006a7e <_printf_i+0xf6>
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	6825      	ldr	r5, [r4, #0]
 8006b0e:	1d18      	adds	r0, r3, #4
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	6010      	str	r0, [r2, #0]
 8006b14:	0628      	lsls	r0, r5, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	d501      	bpl.n	8006b1e <_printf_i+0x196>
 8006b1a:	6019      	str	r1, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <_printf_i+0x19c>
 8006b1e:	066a      	lsls	r2, r5, #25
 8006b20:	d5fb      	bpl.n	8006b1a <_printf_i+0x192>
 8006b22:	8019      	strh	r1, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	4665      	mov	r5, ip
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	e7b9      	b.n	8006aa0 <_printf_i+0x118>
 8006b2c:	6813      	ldr	r3, [r2, #0]
 8006b2e:	1d19      	adds	r1, r3, #4
 8006b30:	6011      	str	r1, [r2, #0]
 8006b32:	681d      	ldr	r5, [r3, #0]
 8006b34:	6862      	ldr	r2, [r4, #4]
 8006b36:	2100      	movs	r1, #0
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f837 	bl	8006bac <memchr>
 8006b3e:	b108      	cbz	r0, 8006b44 <_printf_i+0x1bc>
 8006b40:	1b40      	subs	r0, r0, r5
 8006b42:	6060      	str	r0, [r4, #4]
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b4e:	e7a7      	b.n	8006aa0 <_printf_i+0x118>
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	462a      	mov	r2, r5
 8006b54:	4639      	mov	r1, r7
 8006b56:	4630      	mov	r0, r6
 8006b58:	47c0      	blx	r8
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0aa      	beq.n	8006ab4 <_printf_i+0x12c>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d413      	bmi.n	8006b8c <_printf_i+0x204>
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	bfb8      	it	lt
 8006b6c:	4618      	movlt	r0, r3
 8006b6e:	e7a3      	b.n	8006ab8 <_printf_i+0x130>
 8006b70:	2301      	movs	r3, #1
 8006b72:	464a      	mov	r2, r9
 8006b74:	4639      	mov	r1, r7
 8006b76:	4630      	mov	r0, r6
 8006b78:	47c0      	blx	r8
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d09a      	beq.n	8006ab4 <_printf_i+0x12c>
 8006b7e:	3501      	adds	r5, #1
 8006b80:	68e3      	ldr	r3, [r4, #12]
 8006b82:	9a03      	ldr	r2, [sp, #12]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	dcf2      	bgt.n	8006b70 <_printf_i+0x1e8>
 8006b8a:	e7eb      	b.n	8006b64 <_printf_i+0x1dc>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	f104 0919 	add.w	r9, r4, #25
 8006b92:	e7f5      	b.n	8006b80 <_printf_i+0x1f8>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1ac      	bne.n	8006af2 <_printf_i+0x16a>
 8006b98:	7803      	ldrb	r3, [r0, #0]
 8006b9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ba2:	e76c      	b.n	8006a7e <_printf_i+0xf6>
 8006ba4:	08006f99 	.word	0x08006f99
 8006ba8:	08006faa 	.word	0x08006faa

08006bac <memchr>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	b2c9      	uxtb	r1, r1
 8006bb0:	4402      	add	r2, r0
 8006bb2:	4290      	cmp	r0, r2
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	d101      	bne.n	8006bbc <memchr+0x10>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e003      	b.n	8006bc4 <memchr+0x18>
 8006bbc:	781c      	ldrb	r4, [r3, #0]
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	428c      	cmp	r4, r1
 8006bc2:	d1f6      	bne.n	8006bb2 <memchr+0x6>
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <memmove>:
 8006bc8:	4288      	cmp	r0, r1
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	eb01 0302 	add.w	r3, r1, r2
 8006bd0:	d807      	bhi.n	8006be2 <memmove+0x1a>
 8006bd2:	1e42      	subs	r2, r0, #1
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d00a      	beq.n	8006bee <memmove+0x26>
 8006bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bdc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006be0:	e7f8      	b.n	8006bd4 <memmove+0xc>
 8006be2:	4283      	cmp	r3, r0
 8006be4:	d9f5      	bls.n	8006bd2 <memmove+0xa>
 8006be6:	1881      	adds	r1, r0, r2
 8006be8:	1ad2      	subs	r2, r2, r3
 8006bea:	42d3      	cmn	r3, r2
 8006bec:	d100      	bne.n	8006bf0 <memmove+0x28>
 8006bee:	bd10      	pop	{r4, pc}
 8006bf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bf8:	e7f7      	b.n	8006bea <memmove+0x22>
	...

08006bfc <_free_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4605      	mov	r5, r0
 8006c00:	2900      	cmp	r1, #0
 8006c02:	d043      	beq.n	8006c8c <_free_r+0x90>
 8006c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c08:	1f0c      	subs	r4, r1, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bfb8      	it	lt
 8006c0e:	18e4      	addlt	r4, r4, r3
 8006c10:	f000 f8d0 	bl	8006db4 <__malloc_lock>
 8006c14:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <_free_r+0x94>)
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	4610      	mov	r0, r2
 8006c1a:	b933      	cbnz	r3, 8006c2a <_free_r+0x2e>
 8006c1c:	6063      	str	r3, [r4, #4]
 8006c1e:	6014      	str	r4, [r2, #0]
 8006c20:	4628      	mov	r0, r5
 8006c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c26:	f000 b8c6 	b.w	8006db6 <__malloc_unlock>
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	d90b      	bls.n	8006c46 <_free_r+0x4a>
 8006c2e:	6821      	ldr	r1, [r4, #0]
 8006c30:	1862      	adds	r2, r4, r1
 8006c32:	4293      	cmp	r3, r2
 8006c34:	bf01      	itttt	eq
 8006c36:	681a      	ldreq	r2, [r3, #0]
 8006c38:	685b      	ldreq	r3, [r3, #4]
 8006c3a:	1852      	addeq	r2, r2, r1
 8006c3c:	6022      	streq	r2, [r4, #0]
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	6004      	str	r4, [r0, #0]
 8006c42:	e7ed      	b.n	8006c20 <_free_r+0x24>
 8006c44:	4613      	mov	r3, r2
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	b10a      	cbz	r2, 8006c4e <_free_r+0x52>
 8006c4a:	42a2      	cmp	r2, r4
 8006c4c:	d9fa      	bls.n	8006c44 <_free_r+0x48>
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	1858      	adds	r0, r3, r1
 8006c52:	42a0      	cmp	r0, r4
 8006c54:	d10b      	bne.n	8006c6e <_free_r+0x72>
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	4401      	add	r1, r0
 8006c5a:	1858      	adds	r0, r3, r1
 8006c5c:	4282      	cmp	r2, r0
 8006c5e:	6019      	str	r1, [r3, #0]
 8006c60:	d1de      	bne.n	8006c20 <_free_r+0x24>
 8006c62:	6810      	ldr	r0, [r2, #0]
 8006c64:	6852      	ldr	r2, [r2, #4]
 8006c66:	4401      	add	r1, r0
 8006c68:	6019      	str	r1, [r3, #0]
 8006c6a:	605a      	str	r2, [r3, #4]
 8006c6c:	e7d8      	b.n	8006c20 <_free_r+0x24>
 8006c6e:	d902      	bls.n	8006c76 <_free_r+0x7a>
 8006c70:	230c      	movs	r3, #12
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	e7d4      	b.n	8006c20 <_free_r+0x24>
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1821      	adds	r1, r4, r0
 8006c7a:	428a      	cmp	r2, r1
 8006c7c:	bf01      	itttt	eq
 8006c7e:	6811      	ldreq	r1, [r2, #0]
 8006c80:	6852      	ldreq	r2, [r2, #4]
 8006c82:	1809      	addeq	r1, r1, r0
 8006c84:	6021      	streq	r1, [r4, #0]
 8006c86:	6062      	str	r2, [r4, #4]
 8006c88:	605c      	str	r4, [r3, #4]
 8006c8a:	e7c9      	b.n	8006c20 <_free_r+0x24>
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	bf00      	nop
 8006c90:	2000199c 	.word	0x2000199c

08006c94 <_malloc_r>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	1ccd      	adds	r5, r1, #3
 8006c98:	f025 0503 	bic.w	r5, r5, #3
 8006c9c:	3508      	adds	r5, #8
 8006c9e:	2d0c      	cmp	r5, #12
 8006ca0:	bf38      	it	cc
 8006ca2:	250c      	movcc	r5, #12
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	db01      	blt.n	8006cae <_malloc_r+0x1a>
 8006caa:	42a9      	cmp	r1, r5
 8006cac:	d903      	bls.n	8006cb6 <_malloc_r+0x22>
 8006cae:	230c      	movs	r3, #12
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
 8006cb6:	f000 f87d 	bl	8006db4 <__malloc_lock>
 8006cba:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <_malloc_r+0xac>)
 8006cbc:	6814      	ldr	r4, [r2, #0]
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	b991      	cbnz	r1, 8006ce8 <_malloc_r+0x54>
 8006cc2:	4c20      	ldr	r4, [pc, #128]	; (8006d44 <_malloc_r+0xb0>)
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	b91b      	cbnz	r3, 8006cd0 <_malloc_r+0x3c>
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 f863 	bl	8006d94 <_sbrk_r>
 8006cce:	6020      	str	r0, [r4, #0]
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f85e 	bl	8006d94 <_sbrk_r>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d124      	bne.n	8006d26 <_malloc_r+0x92>
 8006cdc:	230c      	movs	r3, #12
 8006cde:	4630      	mov	r0, r6
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	f000 f868 	bl	8006db6 <__malloc_unlock>
 8006ce6:	e7e4      	b.n	8006cb2 <_malloc_r+0x1e>
 8006ce8:	680b      	ldr	r3, [r1, #0]
 8006cea:	1b5b      	subs	r3, r3, r5
 8006cec:	d418      	bmi.n	8006d20 <_malloc_r+0x8c>
 8006cee:	2b0b      	cmp	r3, #11
 8006cf0:	d90f      	bls.n	8006d12 <_malloc_r+0x7e>
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	18cc      	adds	r4, r1, r3
 8006cf6:	50cd      	str	r5, [r1, r3]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f85c 	bl	8006db6 <__malloc_unlock>
 8006cfe:	f104 000b 	add.w	r0, r4, #11
 8006d02:	1d23      	adds	r3, r4, #4
 8006d04:	f020 0007 	bic.w	r0, r0, #7
 8006d08:	1ac3      	subs	r3, r0, r3
 8006d0a:	d0d3      	beq.n	8006cb4 <_malloc_r+0x20>
 8006d0c:	425a      	negs	r2, r3
 8006d0e:	50e2      	str	r2, [r4, r3]
 8006d10:	e7d0      	b.n	8006cb4 <_malloc_r+0x20>
 8006d12:	684b      	ldr	r3, [r1, #4]
 8006d14:	428c      	cmp	r4, r1
 8006d16:	bf16      	itet	ne
 8006d18:	6063      	strne	r3, [r4, #4]
 8006d1a:	6013      	streq	r3, [r2, #0]
 8006d1c:	460c      	movne	r4, r1
 8006d1e:	e7eb      	b.n	8006cf8 <_malloc_r+0x64>
 8006d20:	460c      	mov	r4, r1
 8006d22:	6849      	ldr	r1, [r1, #4]
 8006d24:	e7cc      	b.n	8006cc0 <_malloc_r+0x2c>
 8006d26:	1cc4      	adds	r4, r0, #3
 8006d28:	f024 0403 	bic.w	r4, r4, #3
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	d005      	beq.n	8006d3c <_malloc_r+0xa8>
 8006d30:	1a21      	subs	r1, r4, r0
 8006d32:	4630      	mov	r0, r6
 8006d34:	f000 f82e 	bl	8006d94 <_sbrk_r>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d0cf      	beq.n	8006cdc <_malloc_r+0x48>
 8006d3c:	6025      	str	r5, [r4, #0]
 8006d3e:	e7db      	b.n	8006cf8 <_malloc_r+0x64>
 8006d40:	2000199c 	.word	0x2000199c
 8006d44:	200019a0 	.word	0x200019a0

08006d48 <_realloc_r>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	460e      	mov	r6, r1
 8006d50:	b921      	cbnz	r1, 8006d5c <_realloc_r+0x14>
 8006d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d56:	4611      	mov	r1, r2
 8006d58:	f7ff bf9c 	b.w	8006c94 <_malloc_r>
 8006d5c:	b922      	cbnz	r2, 8006d68 <_realloc_r+0x20>
 8006d5e:	f7ff ff4d 	bl	8006bfc <_free_r>
 8006d62:	4625      	mov	r5, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d68:	f000 f826 	bl	8006db8 <_malloc_usable_size_r>
 8006d6c:	42a0      	cmp	r0, r4
 8006d6e:	d20f      	bcs.n	8006d90 <_realloc_r+0x48>
 8006d70:	4621      	mov	r1, r4
 8006d72:	4638      	mov	r0, r7
 8006d74:	f7ff ff8e 	bl	8006c94 <_malloc_r>
 8006d78:	4605      	mov	r5, r0
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d0f2      	beq.n	8006d64 <_realloc_r+0x1c>
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4622      	mov	r2, r4
 8006d82:	f7ff fbfd 	bl	8006580 <memcpy>
 8006d86:	4631      	mov	r1, r6
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff ff37 	bl	8006bfc <_free_r>
 8006d8e:	e7e9      	b.n	8006d64 <_realloc_r+0x1c>
 8006d90:	4635      	mov	r5, r6
 8006d92:	e7e7      	b.n	8006d64 <_realloc_r+0x1c>

08006d94 <_sbrk_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	2300      	movs	r3, #0
 8006d98:	4c05      	ldr	r4, [pc, #20]	; (8006db0 <_sbrk_r+0x1c>)
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	f7fa f898 	bl	8000ed4 <_sbrk>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_sbrk_r+0x1a>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_sbrk_r+0x1a>
 8006dac:	602b      	str	r3, [r5, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20001ae0 	.word	0x20001ae0

08006db4 <__malloc_lock>:
 8006db4:	4770      	bx	lr

08006db6 <__malloc_unlock>:
 8006db6:	4770      	bx	lr

08006db8 <_malloc_usable_size_r>:
 8006db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbc:	1f18      	subs	r0, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfbc      	itt	lt
 8006dc2:	580b      	ldrlt	r3, [r1, r0]
 8006dc4:	18c0      	addlt	r0, r0, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_init>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr

08006dd4 <_fini>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr
