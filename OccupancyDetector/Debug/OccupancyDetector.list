
OccupancyDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a10  08005a10  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005a10  08005a10  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a10  08005a10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  20000074  08005a8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a84  08005a8c  00021a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018004  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000301e  00000000  00000000  000380a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  0003b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e2b  00000000  00000000  0003d578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010775  00000000  00000000  000413a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094789  00000000  00000000  00051b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e62a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000525c  00000000  00000000  000e631c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080058a8 	.word	0x080058a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080058a8 	.word	0x080058a8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fdae 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f85c 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8c0 	bl	80002e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f894 	bl	800028c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_IO_init();
 8000164:	f000 fb2a 	bl	80007bc <lcd_IO_init>

  lcd_init();
 8000168:	f000 fb6c 	bl	8000844 <lcd_init>

  char2LCD("hello");
 800016c:	481b      	ldr	r0, [pc, #108]	; (80001dc <main+0x8c>)
 800016e:	f000 fc33 	bl	80009d8 <char2LCD>

  CMD2LCD(0xC0);
 8000172:	20c0      	movs	r0, #192	; 0xc0
 8000174:	f000 fb3e 	bl	80007f4 <CMD2LCD>

  char2LCD("there");
 8000178:	4819      	ldr	r0, [pc, #100]	; (80001e0 <main+0x90>)
 800017a:	f000 fc2d 	bl	80009d8 <char2LCD>

  dipSW2LCD(0x00);
 800017e:	2000      	movs	r0, #0
 8000180:	f000 fbb8 	bl	80008f4 <dipSW2LCD>

  printString("\x1b[2J");
 8000184:	4817      	ldr	r0, [pc, #92]	; (80001e4 <main+0x94>)
 8000186:	f000 fadf 	bl	8000748 <printString>

  printString("\x1b[0;0H");
 800018a:	4817      	ldr	r0, [pc, #92]	; (80001e8 <main+0x98>)
 800018c:	f000 fadc 	bl	8000748 <printString>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000190:	f002 f884 	bl	800229c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &dataQueue_attributes);
 8000194:	4a15      	ldr	r2, [pc, #84]	; (80001ec <main+0x9c>)
 8000196:	2102      	movs	r1, #2
 8000198:	2001      	movs	r0, #1
 800019a:	f002 f9bd 	bl	8002518 <osMessageQueueNew>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b13      	ldr	r3, [pc, #76]	; (80001f0 <main+0xa0>)
 80001a2:	601a      	str	r2, [r3, #0]

  /* creation of structQueue */
  structQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &structQueue_attributes);
 80001a4:	4a13      	ldr	r2, [pc, #76]	; (80001f4 <main+0xa4>)
 80001a6:	2106      	movs	r1, #6
 80001a8:	2001      	movs	r0, #1
 80001aa:	f002 f9b5 	bl	8002518 <osMessageQueueNew>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <main+0xa8>)
 80001b2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calcTask */
  calcTaskHandle = osThreadNew(StartCalcTask, NULL, &calcTask_attributes);
 80001b4:	4a11      	ldr	r2, [pc, #68]	; (80001fc <main+0xac>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4811      	ldr	r0, [pc, #68]	; (8000200 <main+0xb0>)
 80001ba:	f002 f8d5 	bl	8002368 <osThreadNew>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b10      	ldr	r3, [pc, #64]	; (8000204 <main+0xb4>)
 80001c2:	601a      	str	r2, [r3, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 80001c4:	4a10      	ldr	r2, [pc, #64]	; (8000208 <main+0xb8>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4810      	ldr	r0, [pc, #64]	; (800020c <main+0xbc>)
 80001ca:	f002 f8cd 	bl	8002368 <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <main+0xc0>)
 80001d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001d4:	f002 f894 	bl	8002300 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x88>
 80001da:	bf00      	nop
 80001dc:	080058f0 	.word	0x080058f0
 80001e0:	080058f8 	.word	0x080058f8
 80001e4:	08005900 	.word	0x08005900
 80001e8:	08005908 	.word	0x08005908
 80001ec:	08005994 	.word	0x08005994
 80001f0:	200019f0 	.word	0x200019f0
 80001f4:	080059ac 	.word	0x080059ac
 80001f8:	200019a4 	.word	0x200019a4
 80001fc:	0800594c 	.word	0x0800594c
 8000200:	080003c9 	.word	0x080003c9
 8000204:	200019ac 	.word	0x200019ac
 8000208:	08005970 	.word	0x08005970
 800020c:	08000421 	.word	0x08000421
 8000210:	200019a8 	.word	0x200019a8

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f004 ff2f 	bl	8005086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	4618      	mov	r0, r3
 800024c:	f000 ffd8 	bl	8001200 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000256:	f000 f941 	bl	80004dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fa44 	bl	8001700 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f92d 	bl	80004dc <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	; 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 8000292:	4a12      	ldr	r2, [pc, #72]	; (80002dc <MX_USART2_UART_Init+0x50>)
 8000294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 8000298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800029c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002b2:	220c      	movs	r2, #12
 80002b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <MX_USART2_UART_Init+0x4c>)
 80002c4:	f001 fe32 	bl	8001f2c <HAL_UART_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ce:	f000 f905 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200019b0 	.word	0x200019b0
 80002dc:	40004400 	.word	0x40004400

080002e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f4:	4b30      	ldr	r3, [pc, #192]	; (80003b8 <MX_GPIO_Init+0xd8>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a2f      	ldr	r2, [pc, #188]	; (80003b8 <MX_GPIO_Init+0xd8>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <MX_GPIO_Init+0xd8>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b2a      	ldr	r3, [pc, #168]	; (80003b8 <MX_GPIO_Init+0xd8>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a29      	ldr	r2, [pc, #164]	; (80003b8 <MX_GPIO_Init+0xd8>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <MX_GPIO_Init+0xd8>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_GPIO_Init+0xd8>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a23      	ldr	r2, [pc, #140]	; (80003b8 <MX_GPIO_Init+0xd8>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_GPIO_Init+0xd8>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800033c:	2200      	movs	r2, #0
 800033e:	21ff      	movs	r1, #255	; 0xff
 8000340:	481e      	ldr	r0, [pc, #120]	; (80003bc <MX_GPIO_Init+0xdc>)
 8000342:	f000 ff45 	bl	80011d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2120      	movs	r1, #32
 800034a:	481d      	ldr	r0, [pc, #116]	; (80003c0 <MX_GPIO_Init+0xe0>)
 800034c:	f000 ff40 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2123      	movs	r1, #35	; 0x23
 8000354:	481b      	ldr	r0, [pc, #108]	; (80003c4 <MX_GPIO_Init+0xe4>)
 8000356:	f000 ff3b 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800035a:	23ff      	movs	r3, #255	; 0xff
 800035c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4812      	ldr	r0, [pc, #72]	; (80003bc <MX_GPIO_Init+0xdc>)
 8000372:	f000 fdd3 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000376:	2320      	movs	r3, #32
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_GPIO_Init+0xe0>)
 800038e:	f000 fdc5 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000392:	2323      	movs	r3, #35	; 0x23
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	4806      	ldr	r0, [pc, #24]	; (80003c4 <MX_GPIO_Init+0xe4>)
 80003aa:	f000 fdb7 	bl	8000f1c <HAL_GPIO_Init>

}
 80003ae:	bf00      	nop
 80003b0:	3720      	adds	r7, #32
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40011000 	.word	0x40011000
 80003c0:	40010800 	.word	0x40010800
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <StartCalcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalcTask */
void StartCalcTask(void *argument)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t data = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	81fb      	strh	r3, [r7, #14]
	struct DataStruct dc;
	dc.temp = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	813b      	strh	r3, [r7, #8]
	dc.CO2 = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	817b      	strh	r3, [r7, #10]
	dc.dB = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	81bb      	strh	r3, [r7, #12]
	{
//		if(osMessageQueuePut(dataQueueHandle, &dc.temp, 1U, 0U)!= osOK)
//		{
//			Error_Handler();
//		}
		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U)!= osOK)
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <StartCalcTask+0x54>)
 80003e2:	6818      	ldr	r0, [r3, #0]
 80003e4:	f107 0108 	add.w	r1, r7, #8
 80003e8:	2300      	movs	r3, #0
 80003ea:	2201      	movs	r2, #1
 80003ec:	f002 f91a 	bl	8002624 <osMessageQueuePut>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <StartCalcTask+0x32>
		{
			Error_Handler();
 80003f6:	f000 f871 	bl	80004dc <Error_Handler>
		}
		dc.temp += 2;
 80003fa:	893b      	ldrh	r3, [r7, #8]
 80003fc:	3302      	adds	r3, #2
 80003fe:	b29b      	uxth	r3, r3
 8000400:	813b      	strh	r3, [r7, #8]
		dc.CO2 += 5;
 8000402:	897b      	ldrh	r3, [r7, #10]
 8000404:	3305      	adds	r3, #5
 8000406:	b29b      	uxth	r3, r3
 8000408:	817b      	strh	r3, [r7, #10]
		dc.dB += 10;
 800040a:	89bb      	ldrh	r3, [r7, #12]
 800040c:	330a      	adds	r3, #10
 800040e:	b29b      	uxth	r3, r3
 8000410:	81bb      	strh	r3, [r7, #12]
		osDelay(500);
 8000412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000416:	f002 f851 	bl	80024bc <osDelay>
		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U)!= osOK)
 800041a:	e7e1      	b.n	80003e0 <StartCalcTask+0x18>
 800041c:	200019a4 	.word	0x200019a4

08000420 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08e      	sub	sp, #56	; 0x38
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
//		if(osMessageQueueGet(dataQueueHandle, &data, NULL, 0U) == osOK)
//		{
//			sprintf((char *)data_str, "%d", data);
//			printString((char *)data_str);
//		}
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <StartSendTask+0x88>)
 800042a:	6818      	ldr	r0, [r3, #0]
 800042c:	f107 0108 	add.w	r1, r7, #8
 8000430:	2300      	movs	r3, #0
 8000432:	2200      	movs	r2, #0
 8000434:	f002 f96a 	bl	800270c <osMessageQueueGet>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d12f      	bne.n	800049e <StartSendTask+0x7e>
		{
			sprintf((char *)data_str, "%d", dc.temp);
 800043e:	893b      	ldrh	r3, [r7, #8]
 8000440:	461a      	mov	r2, r3
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4919      	ldr	r1, [pc, #100]	; (80004ac <StartSendTask+0x8c>)
 8000448:	4618      	mov	r0, r3
 800044a:	f004 fe25 	bl	8005098 <siprintf>
			printString((char *)data_str);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f978 	bl	8000748 <printString>
			printString("     ");
 8000458:	4815      	ldr	r0, [pc, #84]	; (80004b0 <StartSendTask+0x90>)
 800045a:	f000 f975 	bl	8000748 <printString>
			sprintf((char *)data_str, "%d", dc.CO2);
 800045e:	897b      	ldrh	r3, [r7, #10]
 8000460:	461a      	mov	r2, r3
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4911      	ldr	r1, [pc, #68]	; (80004ac <StartSendTask+0x8c>)
 8000468:	4618      	mov	r0, r3
 800046a:	f004 fe15 	bl	8005098 <siprintf>
			printString((char *)data_str);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f968 	bl	8000748 <printString>
			printString("     ");
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <StartSendTask+0x90>)
 800047a:	f000 f965 	bl	8000748 <printString>
			sprintf((char *)data_str, "%d", dc.dB);
 800047e:	89bb      	ldrh	r3, [r7, #12]
 8000480:	461a      	mov	r2, r3
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4909      	ldr	r1, [pc, #36]	; (80004ac <StartSendTask+0x8c>)
 8000488:	4618      	mov	r0, r3
 800048a:	f004 fe05 	bl	8005098 <siprintf>
			printString((char *)data_str);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f958 	bl	8000748 <printString>
			printString("\r\n");
 8000498:	4806      	ldr	r0, [pc, #24]	; (80004b4 <StartSendTask+0x94>)
 800049a:	f000 f955 	bl	8000748 <printString>
		}
		osDelay(1000);
 800049e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a2:	f002 f80b 	bl	80024bc <osDelay>
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 80004a6:	e7bf      	b.n	8000428 <StartSendTask+0x8>
 80004a8:	200019a4 	.word	0x200019a4
 80004ac:	08005910 	.word	0x08005910
 80004b0:	08005914 	.word	0x08005914
 80004b4:	0800591c 	.word	0x0800591c

080004b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ca:	f000 fc09 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40000800 	.word	0x40000800

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <HAL_UART_MspInit+0x88>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d12f      	bne.n	80005cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800059c:	2304      	movs	r3, #4
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <HAL_UART_MspInit+0x90>)
 80005b0:	f000 fcb4 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005b4:	2308      	movs	r3, #8
 80005b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <HAL_UART_MspInit+0x90>)
 80005c8:	f000 fca8 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40004400 	.word	0x40004400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010800 	.word	0x40010800

080005e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	; 0x30
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	201e      	movs	r0, #30
 80005f6:	f000 fc66 	bl	8000ec6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005fa:	201e      	movs	r0, #30
 80005fc:	f000 fc7f 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <HAL_InitTick+0x9c>)
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_InitTick+0x9c>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	61d3      	str	r3, [r2, #28]
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_InitTick+0x9c>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000618:	f107 0210 	add.w	r2, r7, #16
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f9ea 	bl	80019fc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000628:	f001 f9c0 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 800062c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <HAL_InitTick+0xa0>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	0c9b      	lsrs	r3, r3, #18
 8000638:	3b01      	subs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <HAL_InitTick+0xa4>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <HAL_InitTick+0xa8>)
 8000640:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <HAL_InitTick+0xa4>)
 8000644:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000648:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_InitTick+0xa4>)
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_InitTick+0xa4>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_InitTick+0xa4>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800065c:	4809      	ldr	r0, [pc, #36]	; (8000684 <HAL_InitTick+0xa4>)
 800065e:	f001 fa1b 	bl	8001a98 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <HAL_InitTick+0xa4>)
 800066a:	f001 fa6d 	bl	8001b48 <HAL_TIM_Base_Start_IT>
 800066e:	4603      	mov	r3, r0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3730      	adds	r7, #48	; 0x30
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	431bde83 	.word	0x431bde83
 8000684:	200019f4 	.word	0x200019f4
 8000688:	40000800 	.word	0x40000800

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <HardFault_Handler+0x4>

0800069e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <MemManage_Handler+0x4>

080006a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <BusFault_Handler+0x4>

080006aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <UsageFault_Handler+0x4>

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <TIM4_IRQHandler+0x10>)
 80006c2:	f001 fa93 	bl	8001bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200019f4 	.word	0x200019f4

080006d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000700:	f004 fc8c 	bl	800501c <__errno>
 8000704:	4602      	mov	r2, r0
 8000706:	230c      	movs	r3, #12
 8000708:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20005000 	.word	0x20005000
 8000730:	00000400 	.word	0x00000400
 8000734:	20000090 	.word	0x20000090
 8000738:	20001a88 	.word	0x20001a88

0800073c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <printString>:
 */

#include "CommMod.h"

void printString(const char* mess)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09e      	sub	sp, #120	; 0x78
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef st;
	uint8_t cliBufferTX[100];

	while(huart2.gState == HAL_UART_STATE_BUSY_TX){}
 8000754:	bf00      	nop
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <printString+0x70>)
 8000758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b21      	cmp	r3, #33	; 0x21
 8000760:	d0f9      	beq.n	8000756 <printString+0xe>

	for(const char* p = mess; *p; ++p)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	673b      	str	r3, [r7, #112]	; 0x70
 8000766:	e00d      	b.n	8000784 <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 8000768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	f107 0208 	add.w	r2, r7, #8
 8000770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	701a      	strb	r2, [r3, #0]
		i++;
 8000778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800077a:	3301      	adds	r3, #1
 800077c:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 800077e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000780:	3301      	adds	r3, #1
 8000782:	673b      	str	r3, [r7, #112]	; 0x70
 8000784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1ed      	bne.n	8000768 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart2, cliBufferTX, i, 1000);
 800078c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800078e:	b29a      	uxth	r2, r3
 8000790:	f107 0108 	add.w	r1, r7, #8
 8000794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <printString+0x70>)
 800079a:	f001 fc14 	bl	8001fc6 <HAL_UART_Transmit>
 800079e:	4603      	mov	r3, r0
 80007a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 80007a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <printString+0x68>
	{
		Error_Handler();
 80007ac:	f7ff fe96 	bl	80004dc <Error_Handler>
	}

}
 80007b0:	bf00      	nop
 80007b2:	3778      	adds	r7, #120	; 0x78
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200019b0 	.word	0x200019b0

080007bc <lcd_IO_init>:
#include "stm32f1xx.h"
#include "lcd.h"


void lcd_IO_init (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

	//Enable peripheral clocks for ports B and C

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <lcd_IO_init+0x28>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <lcd_IO_init+0x28>)
 80007c6:	f043 0318 	orr.w	r3, r3, #24
 80007ca:	6193      	str	r3, [r2, #24]

	//Set the config and mode bits for Port B bit 0, 1, and 5 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOB->CRL = 0x44344433;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <lcd_IO_init+0x2c>)
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <lcd_IO_init+0x30>)
 80007d0:	601a      	str	r2, [r3, #0]

	//Set the config and mode bits for Port C bits 7 down to 0 so they will
	// be push-pull outputs (up to 50 MHz)
	GPIOC->CRL = 0x33333333;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <lcd_IO_init+0x34>)
 80007d4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80007d8:	601a      	str	r2, [r3, #0]

}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	44344433 	.word	0x44344433
 80007f0:	40011000 	.word	0x40011000

080007f4 <CMD2LCD>:

void CMD2LCD(uint8_t data)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = LCD_CM_ENA;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <CMD2LCD+0x44>)
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <CMD2LCD+0x48>)
 8000802:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <CMD2LCD+0x4c>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <CMD2LCD+0x4c>)
 800080a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800080e:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <CMD2LCD+0x4c>)
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	490a      	ldr	r1, [pc, #40]	; (8000840 <CMD2LCD+0x4c>)
 8000818:	4313      	orrs	r3, r2
 800081a:	60cb      	str	r3, [r1, #12]

	HAL_Delay(50);
 800081c:	2032      	movs	r0, #50	; 0x32
 800081e:	f000 fa7b 	bl	8000d18 <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_CM_DIS;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <CMD2LCD+0x44>)
 8000824:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000828:	611a      	str	r2, [r3, #16]

	HAL_Delay(180);
 800082a:	20b4      	movs	r0, #180	; 0xb4
 800082c:	f000 fa74 	bl	8000d18 <HAL_Delay>
	//delay(80000);

}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40010c00 	.word	0x40010c00
 800083c:	00210002 	.word	0x00210002
 8000840:	40011000 	.word	0x40011000

08000844 <lcd_init>:

void lcd_init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	for(int j = 0; j < 3; j++)
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	e008      	b.n	8000862 <lcd_init+0x1e>
	{
		CMD2LCD(0X38);
 8000850:	2038      	movs	r0, #56	; 0x38
 8000852:	f7ff ffcf 	bl	80007f4 <CMD2LCD>
		HAL_Delay(80);
 8000856:	2050      	movs	r0, #80	; 0x50
 8000858:	f000 fa5e 	bl	8000d18 <HAL_Delay>
	for(int j = 0; j < 3; j++)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b02      	cmp	r3, #2
 8000866:	ddf3      	ble.n	8000850 <lcd_init+0xc>
		//delay(24600);
	}

	CMD2LCD(0X38);
 8000868:	2038      	movs	r0, #56	; 0x38
 800086a:	f7ff ffc3 	bl	80007f4 <CMD2LCD>
	HAL_Delay(80);
 800086e:	2050      	movs	r0, #80	; 0x50
 8000870:	f000 fa52 	bl	8000d18 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X0F);
 8000874:	200f      	movs	r0, #15
 8000876:	f7ff ffbd 	bl	80007f4 <CMD2LCD>
	HAL_Delay(80);
 800087a:	2050      	movs	r0, #80	; 0x50
 800087c:	f000 fa4c 	bl	8000d18 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X01);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ffb7 	bl	80007f4 <CMD2LCD>
	HAL_Delay(80);
 8000886:	2050      	movs	r0, #80	; 0x50
 8000888:	f000 fa46 	bl	8000d18 <HAL_Delay>
	//delay(24600);

	CMD2LCD(0X06);
 800088c:	2006      	movs	r0, #6
 800088e:	f7ff ffb1 	bl	80007f4 <CMD2LCD>
	HAL_Delay(80);
 8000892:	2050      	movs	r0, #80	; 0x50
 8000894:	f000 fa40 	bl	8000d18 <HAL_Delay>
	//delay(24600);

}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <DAT2LCD>:

void DAT2LCD(uint8_t data)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = LCD_DM_ENA;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <DAT2LCD+0x44>)
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <DAT2LCD+0x48>)
 80008ae:	611a      	str	r2, [r3, #16]
	GPIOC->ODR &= 0xFF00;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <DAT2LCD+0x4c>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <DAT2LCD+0x4c>)
 80008b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80008ba:	60d3      	str	r3, [r2, #12]
	GPIOC->ODR |= data;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <DAT2LCD+0x4c>)
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	490a      	ldr	r1, [pc, #40]	; (80008ec <DAT2LCD+0x4c>)
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60cb      	str	r3, [r1, #12]
	HAL_Delay(2);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f000 fa25 	bl	8000d18 <HAL_Delay>
	//delay(8000);

	GPIOB->BSRR = LCD_DM_DIS;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <DAT2LCD+0x44>)
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <DAT2LCD+0x50>)
 80008d2:	611a      	str	r2, [r3, #16]
	HAL_Delay(20);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f000 fa1f 	bl	8000d18 <HAL_Delay>
	//delay(80000);

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	00200003 	.word	0x00200003
 80008ec:	40011000 	.word	0x40011000
 80008f0:	00220001 	.word	0x00220001

080008f4 <dipSW2LCD>:

void dipSW2LCD(uint8_t val)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	switch(val){
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d863      	bhi.n	80009cc <dipSW2LCD+0xd8>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <dipSW2LCD+0x18>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	0800094d 	.word	0x0800094d
 8000910:	08000955 	.word	0x08000955
 8000914:	0800095d 	.word	0x0800095d
 8000918:	08000965 	.word	0x08000965
 800091c:	0800096d 	.word	0x0800096d
 8000920:	08000975 	.word	0x08000975
 8000924:	0800097d 	.word	0x0800097d
 8000928:	08000985 	.word	0x08000985
 800092c:	0800098d 	.word	0x0800098d
 8000930:	08000995 	.word	0x08000995
 8000934:	0800099d 	.word	0x0800099d
 8000938:	080009a5 	.word	0x080009a5
 800093c:	080009ad 	.word	0x080009ad
 8000940:	080009b5 	.word	0x080009b5
 8000944:	080009bd 	.word	0x080009bd
 8000948:	080009c5 	.word	0x080009c5
	case 0x00:
		DAT2LCD(0x30);
 800094c:	2030      	movs	r0, #48	; 0x30
 800094e:	f7ff ffa7 	bl	80008a0 <DAT2LCD>
		break;
 8000952:	e03c      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x01:
		DAT2LCD(0x31);
 8000954:	2031      	movs	r0, #49	; 0x31
 8000956:	f7ff ffa3 	bl	80008a0 <DAT2LCD>
		break;
 800095a:	e038      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x02:
		DAT2LCD(0x32);
 800095c:	2032      	movs	r0, #50	; 0x32
 800095e:	f7ff ff9f 	bl	80008a0 <DAT2LCD>
		break;
 8000962:	e034      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x03:
		DAT2LCD(0x33);
 8000964:	2033      	movs	r0, #51	; 0x33
 8000966:	f7ff ff9b 	bl	80008a0 <DAT2LCD>
		break;
 800096a:	e030      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x04:
		DAT2LCD(0x34);
 800096c:	2034      	movs	r0, #52	; 0x34
 800096e:	f7ff ff97 	bl	80008a0 <DAT2LCD>
		break;
 8000972:	e02c      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x05:
		DAT2LCD(0x35);
 8000974:	2035      	movs	r0, #53	; 0x35
 8000976:	f7ff ff93 	bl	80008a0 <DAT2LCD>
		break;
 800097a:	e028      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x06:
		DAT2LCD(0x36);
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f7ff ff8f 	bl	80008a0 <DAT2LCD>
		break;
 8000982:	e024      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x07:
		DAT2LCD(0x37);
 8000984:	2037      	movs	r0, #55	; 0x37
 8000986:	f7ff ff8b 	bl	80008a0 <DAT2LCD>
		break;
 800098a:	e020      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x08:
		DAT2LCD(0x38);
 800098c:	2038      	movs	r0, #56	; 0x38
 800098e:	f7ff ff87 	bl	80008a0 <DAT2LCD>
		break;
 8000992:	e01c      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x09:
		DAT2LCD(0x39);
 8000994:	2039      	movs	r0, #57	; 0x39
 8000996:	f7ff ff83 	bl	80008a0 <DAT2LCD>
		break;
 800099a:	e018      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x0A:
		DAT2LCD(0x41);
 800099c:	2041      	movs	r0, #65	; 0x41
 800099e:	f7ff ff7f 	bl	80008a0 <DAT2LCD>
		break;
 80009a2:	e014      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x0B:
		DAT2LCD(0x42);
 80009a4:	2042      	movs	r0, #66	; 0x42
 80009a6:	f7ff ff7b 	bl	80008a0 <DAT2LCD>
		break;
 80009aa:	e010      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x0C:
		DAT2LCD(0x43);
 80009ac:	2043      	movs	r0, #67	; 0x43
 80009ae:	f7ff ff77 	bl	80008a0 <DAT2LCD>
		break;
 80009b2:	e00c      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x0D:
		DAT2LCD(0x44);
 80009b4:	2044      	movs	r0, #68	; 0x44
 80009b6:	f7ff ff73 	bl	80008a0 <DAT2LCD>
		break;
 80009ba:	e008      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x0E:
		DAT2LCD(0x45);
 80009bc:	2045      	movs	r0, #69	; 0x45
 80009be:	f7ff ff6f 	bl	80008a0 <DAT2LCD>
		break;
 80009c2:	e004      	b.n	80009ce <dipSW2LCD+0xda>

	case 0x0F:
		DAT2LCD(0x46);
 80009c4:	2046      	movs	r0, #70	; 0x46
 80009c6:	f7ff ff6b 	bl	80008a0 <DAT2LCD>
		break;
 80009ca:	e000      	b.n	80009ce <dipSW2LCD+0xda>

	default:
		break;
 80009cc:	bf00      	nop
	}
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop

080009d8 <char2LCD>:

void char2LCD(char * val)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	//toLower()

	int i = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 80009e4:	e134      	b.n	8000c50 <char2LCD+0x278>
	{
		switch(val[i]){
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3b30      	subs	r3, #48	; 0x30
 80009f0:	2b4a      	cmp	r3, #74	; 0x4a
 80009f2:	f200 8129 	bhi.w	8000c48 <char2LCD+0x270>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <char2LCD+0x24>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000b29 	.word	0x08000b29
 8000a00:	08000b31 	.word	0x08000b31
 8000a04:	08000b39 	.word	0x08000b39
 8000a08:	08000b41 	.word	0x08000b41
 8000a0c:	08000b49 	.word	0x08000b49
 8000a10:	08000b51 	.word	0x08000b51
 8000a14:	08000b59 	.word	0x08000b59
 8000a18:	08000b61 	.word	0x08000b61
 8000a1c:	08000b69 	.word	0x08000b69
 8000a20:	08000b71 	.word	0x08000b71
 8000a24:	08000c49 	.word	0x08000c49
 8000a28:	08000c49 	.word	0x08000c49
 8000a2c:	08000c49 	.word	0x08000c49
 8000a30:	08000c49 	.word	0x08000c49
 8000a34:	08000c49 	.word	0x08000c49
 8000a38:	08000c49 	.word	0x08000c49
 8000a3c:	08000c49 	.word	0x08000c49
 8000a40:	08000c49 	.word	0x08000c49
 8000a44:	08000c49 	.word	0x08000c49
 8000a48:	08000c49 	.word	0x08000c49
 8000a4c:	08000c49 	.word	0x08000c49
 8000a50:	08000c49 	.word	0x08000c49
 8000a54:	08000c49 	.word	0x08000c49
 8000a58:	08000c49 	.word	0x08000c49
 8000a5c:	08000c49 	.word	0x08000c49
 8000a60:	08000c49 	.word	0x08000c49
 8000a64:	08000c49 	.word	0x08000c49
 8000a68:	08000c49 	.word	0x08000c49
 8000a6c:	08000c49 	.word	0x08000c49
 8000a70:	08000c49 	.word	0x08000c49
 8000a74:	08000c49 	.word	0x08000c49
 8000a78:	08000c49 	.word	0x08000c49
 8000a7c:	08000c49 	.word	0x08000c49
 8000a80:	08000c49 	.word	0x08000c49
 8000a84:	08000c49 	.word	0x08000c49
 8000a88:	08000c49 	.word	0x08000c49
 8000a8c:	08000c49 	.word	0x08000c49
 8000a90:	08000c49 	.word	0x08000c49
 8000a94:	08000c49 	.word	0x08000c49
 8000a98:	08000c49 	.word	0x08000c49
 8000a9c:	08000c49 	.word	0x08000c49
 8000aa0:	08000c49 	.word	0x08000c49
 8000aa4:	08000c49 	.word	0x08000c49
 8000aa8:	08000c49 	.word	0x08000c49
 8000aac:	08000c49 	.word	0x08000c49
 8000ab0:	08000c49 	.word	0x08000c49
 8000ab4:	08000c49 	.word	0x08000c49
 8000ab8:	08000c49 	.word	0x08000c49
 8000abc:	08000c49 	.word	0x08000c49
 8000ac0:	08000b79 	.word	0x08000b79
 8000ac4:	08000b81 	.word	0x08000b81
 8000ac8:	08000b89 	.word	0x08000b89
 8000acc:	08000b91 	.word	0x08000b91
 8000ad0:	08000b99 	.word	0x08000b99
 8000ad4:	08000ba1 	.word	0x08000ba1
 8000ad8:	08000ba9 	.word	0x08000ba9
 8000adc:	08000bb1 	.word	0x08000bb1
 8000ae0:	08000bb9 	.word	0x08000bb9
 8000ae4:	08000bc1 	.word	0x08000bc1
 8000ae8:	08000bc9 	.word	0x08000bc9
 8000aec:	08000bd1 	.word	0x08000bd1
 8000af0:	08000bd9 	.word	0x08000bd9
 8000af4:	08000be1 	.word	0x08000be1
 8000af8:	08000be9 	.word	0x08000be9
 8000afc:	08000bf1 	.word	0x08000bf1
 8000b00:	08000bf9 	.word	0x08000bf9
 8000b04:	08000c01 	.word	0x08000c01
 8000b08:	08000c09 	.word	0x08000c09
 8000b0c:	08000c11 	.word	0x08000c11
 8000b10:	08000c19 	.word	0x08000c19
 8000b14:	08000c21 	.word	0x08000c21
 8000b18:	08000c29 	.word	0x08000c29
 8000b1c:	08000c31 	.word	0x08000c31
 8000b20:	08000c39 	.word	0x08000c39
 8000b24:	08000c41 	.word	0x08000c41
		case '0':
			DAT2LCD(0x30);
 8000b28:	2030      	movs	r0, #48	; 0x30
 8000b2a:	f7ff feb9 	bl	80008a0 <DAT2LCD>
			break;
 8000b2e:	e08c      	b.n	8000c4a <char2LCD+0x272>

		case '1':
			DAT2LCD(0x31);
 8000b30:	2031      	movs	r0, #49	; 0x31
 8000b32:	f7ff feb5 	bl	80008a0 <DAT2LCD>
			break;
 8000b36:	e088      	b.n	8000c4a <char2LCD+0x272>

		case '2':
			DAT2LCD(0x32);
 8000b38:	2032      	movs	r0, #50	; 0x32
 8000b3a:	f7ff feb1 	bl	80008a0 <DAT2LCD>
			break;
 8000b3e:	e084      	b.n	8000c4a <char2LCD+0x272>

		case '3':
			DAT2LCD(0x33);
 8000b40:	2033      	movs	r0, #51	; 0x33
 8000b42:	f7ff fead 	bl	80008a0 <DAT2LCD>
			break;
 8000b46:	e080      	b.n	8000c4a <char2LCD+0x272>

		case '4':
			DAT2LCD(0x34);
 8000b48:	2034      	movs	r0, #52	; 0x34
 8000b4a:	f7ff fea9 	bl	80008a0 <DAT2LCD>
			break;
 8000b4e:	e07c      	b.n	8000c4a <char2LCD+0x272>

		case '5':
			DAT2LCD(0x35);
 8000b50:	2035      	movs	r0, #53	; 0x35
 8000b52:	f7ff fea5 	bl	80008a0 <DAT2LCD>
			break;
 8000b56:	e078      	b.n	8000c4a <char2LCD+0x272>

		case '6':
			DAT2LCD(0x36);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	f7ff fea1 	bl	80008a0 <DAT2LCD>
			break;
 8000b5e:	e074      	b.n	8000c4a <char2LCD+0x272>

		case '7':
			DAT2LCD(0x37);
 8000b60:	2037      	movs	r0, #55	; 0x37
 8000b62:	f7ff fe9d 	bl	80008a0 <DAT2LCD>
			break;
 8000b66:	e070      	b.n	8000c4a <char2LCD+0x272>

		case '8':
			DAT2LCD(0x38);
 8000b68:	2038      	movs	r0, #56	; 0x38
 8000b6a:	f7ff fe99 	bl	80008a0 <DAT2LCD>
			break;
 8000b6e:	e06c      	b.n	8000c4a <char2LCD+0x272>

		case '9':
			DAT2LCD(0x39);
 8000b70:	2039      	movs	r0, #57	; 0x39
 8000b72:	f7ff fe95 	bl	80008a0 <DAT2LCD>
			break;
 8000b76:	e068      	b.n	8000c4a <char2LCD+0x272>

		case 'a':
			DAT2LCD(0x41);
 8000b78:	2041      	movs	r0, #65	; 0x41
 8000b7a:	f7ff fe91 	bl	80008a0 <DAT2LCD>
			break;
 8000b7e:	e064      	b.n	8000c4a <char2LCD+0x272>

		case 'b':
			DAT2LCD(0x42);
 8000b80:	2042      	movs	r0, #66	; 0x42
 8000b82:	f7ff fe8d 	bl	80008a0 <DAT2LCD>
			break;
 8000b86:	e060      	b.n	8000c4a <char2LCD+0x272>

		case 'c':
			DAT2LCD(0x43);
 8000b88:	2043      	movs	r0, #67	; 0x43
 8000b8a:	f7ff fe89 	bl	80008a0 <DAT2LCD>
			break;
 8000b8e:	e05c      	b.n	8000c4a <char2LCD+0x272>

		case 'd':
			DAT2LCD(0x44);
 8000b90:	2044      	movs	r0, #68	; 0x44
 8000b92:	f7ff fe85 	bl	80008a0 <DAT2LCD>
			break;
 8000b96:	e058      	b.n	8000c4a <char2LCD+0x272>

		case 'e':
			DAT2LCD(0x45);
 8000b98:	2045      	movs	r0, #69	; 0x45
 8000b9a:	f7ff fe81 	bl	80008a0 <DAT2LCD>
			break;
 8000b9e:	e054      	b.n	8000c4a <char2LCD+0x272>

		case 'f':
			DAT2LCD(0x46);
 8000ba0:	2046      	movs	r0, #70	; 0x46
 8000ba2:	f7ff fe7d 	bl	80008a0 <DAT2LCD>
			break;
 8000ba6:	e050      	b.n	8000c4a <char2LCD+0x272>

		case 'g':
			DAT2LCD(0x47);
 8000ba8:	2047      	movs	r0, #71	; 0x47
 8000baa:	f7ff fe79 	bl	80008a0 <DAT2LCD>
			break;
 8000bae:	e04c      	b.n	8000c4a <char2LCD+0x272>

		case 'h':
			DAT2LCD(0x48);
 8000bb0:	2048      	movs	r0, #72	; 0x48
 8000bb2:	f7ff fe75 	bl	80008a0 <DAT2LCD>
			break;
 8000bb6:	e048      	b.n	8000c4a <char2LCD+0x272>

		case 'i':
			DAT2LCD(0x49);
 8000bb8:	2049      	movs	r0, #73	; 0x49
 8000bba:	f7ff fe71 	bl	80008a0 <DAT2LCD>
			break;
 8000bbe:	e044      	b.n	8000c4a <char2LCD+0x272>

		case 'j':
			DAT2LCD(0x4A);
 8000bc0:	204a      	movs	r0, #74	; 0x4a
 8000bc2:	f7ff fe6d 	bl	80008a0 <DAT2LCD>
			break;
 8000bc6:	e040      	b.n	8000c4a <char2LCD+0x272>

		case 'k':
			DAT2LCD(0x4B);
 8000bc8:	204b      	movs	r0, #75	; 0x4b
 8000bca:	f7ff fe69 	bl	80008a0 <DAT2LCD>
			break;
 8000bce:	e03c      	b.n	8000c4a <char2LCD+0x272>

		case 'l':
			DAT2LCD(0x4C);
 8000bd0:	204c      	movs	r0, #76	; 0x4c
 8000bd2:	f7ff fe65 	bl	80008a0 <DAT2LCD>
			break;
 8000bd6:	e038      	b.n	8000c4a <char2LCD+0x272>

		case 'm':
			DAT2LCD(0x4D);
 8000bd8:	204d      	movs	r0, #77	; 0x4d
 8000bda:	f7ff fe61 	bl	80008a0 <DAT2LCD>
			break;
 8000bde:	e034      	b.n	8000c4a <char2LCD+0x272>

		case 'n':
			DAT2LCD(0x4E);
 8000be0:	204e      	movs	r0, #78	; 0x4e
 8000be2:	f7ff fe5d 	bl	80008a0 <DAT2LCD>
			break;
 8000be6:	e030      	b.n	8000c4a <char2LCD+0x272>

		case 'o':
			DAT2LCD(0x4F);
 8000be8:	204f      	movs	r0, #79	; 0x4f
 8000bea:	f7ff fe59 	bl	80008a0 <DAT2LCD>
			break;
 8000bee:	e02c      	b.n	8000c4a <char2LCD+0x272>

		case 'p':
			DAT2LCD(0x50);
 8000bf0:	2050      	movs	r0, #80	; 0x50
 8000bf2:	f7ff fe55 	bl	80008a0 <DAT2LCD>
			break;
 8000bf6:	e028      	b.n	8000c4a <char2LCD+0x272>

		case 'q':
			DAT2LCD(0x51);
 8000bf8:	2051      	movs	r0, #81	; 0x51
 8000bfa:	f7ff fe51 	bl	80008a0 <DAT2LCD>
			break;
 8000bfe:	e024      	b.n	8000c4a <char2LCD+0x272>

		case 'r':
			DAT2LCD(0x52);
 8000c00:	2052      	movs	r0, #82	; 0x52
 8000c02:	f7ff fe4d 	bl	80008a0 <DAT2LCD>
			break;
 8000c06:	e020      	b.n	8000c4a <char2LCD+0x272>

		case 's':
			DAT2LCD(0x53);
 8000c08:	2053      	movs	r0, #83	; 0x53
 8000c0a:	f7ff fe49 	bl	80008a0 <DAT2LCD>
			break;
 8000c0e:	e01c      	b.n	8000c4a <char2LCD+0x272>

		case 't':
			DAT2LCD(0x54);
 8000c10:	2054      	movs	r0, #84	; 0x54
 8000c12:	f7ff fe45 	bl	80008a0 <DAT2LCD>
			break;
 8000c16:	e018      	b.n	8000c4a <char2LCD+0x272>

		case 'u':
			DAT2LCD(0x55);
 8000c18:	2055      	movs	r0, #85	; 0x55
 8000c1a:	f7ff fe41 	bl	80008a0 <DAT2LCD>
			break;
 8000c1e:	e014      	b.n	8000c4a <char2LCD+0x272>

		case 'v':
			DAT2LCD(0x56);
 8000c20:	2056      	movs	r0, #86	; 0x56
 8000c22:	f7ff fe3d 	bl	80008a0 <DAT2LCD>
			break;
 8000c26:	e010      	b.n	8000c4a <char2LCD+0x272>

		case 'w':
			DAT2LCD(0x57);
 8000c28:	2057      	movs	r0, #87	; 0x57
 8000c2a:	f7ff fe39 	bl	80008a0 <DAT2LCD>
			break;
 8000c2e:	e00c      	b.n	8000c4a <char2LCD+0x272>

		case 'x':
			DAT2LCD(0x58);
 8000c30:	2058      	movs	r0, #88	; 0x58
 8000c32:	f7ff fe35 	bl	80008a0 <DAT2LCD>
			break;
 8000c36:	e008      	b.n	8000c4a <char2LCD+0x272>

		case 'y':
			DAT2LCD(0x59);
 8000c38:	2059      	movs	r0, #89	; 0x59
 8000c3a:	f7ff fe31 	bl	80008a0 <DAT2LCD>
			break;
 8000c3e:	e004      	b.n	8000c4a <char2LCD+0x272>

		case 'z':
			DAT2LCD(0x5A);
 8000c40:	205a      	movs	r0, #90	; 0x5a
 8000c42:	f7ff fe2d 	bl	80008a0 <DAT2LCD>
			break;
 8000c46:	e000      	b.n	8000c4a <char2LCD+0x272>
		DAT2LCD();
		break;
			 */

		default:
			break;
 8000c48:	bf00      	nop
		}
		i++;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
	while(val[i] != NULL)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f47f aec4 	bne.w	80009e6 <char2LCD+0xe>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop

08000c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8e:	f7ff fd55 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 f9c9 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fa5b 	bl	8000150 <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c9c:	08005a18 	.word	0x08005a18
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ca4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000ca8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000cac:	20001a84 	.word	0x20001a84

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x28>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8f3 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fc88 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fc0a 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20001a3c 	.word	0x20001a3c

08000d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20001a3c 	.word	0x20001a3c

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff fff0 	bl	8000d04 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_Delay+0x40>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffe0 	bl	8000d04 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <__NVIC_EnableIRQ+0x34>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff4f 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff64 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ffb2 	bl	8000e4c <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff81 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff57 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e127      	b.n	8001180 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f30:	2201      	movs	r2, #1
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8116 	bne.w	800117a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d034      	beq.n	8000fc0 <HAL_GPIO_Init+0xa4>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d80d      	bhi.n	8000f76 <HAL_GPIO_Init+0x5a>
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x9a>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d804      	bhi.n	8000f6c <HAL_GPIO_Init+0x50>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d031      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d01c      	beq.n	8000fa4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6a:	e048      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d043      	beq.n	8000ff8 <HAL_GPIO_Init+0xdc>
 8000f70:	2b11      	cmp	r3, #17
 8000f72:	d01b      	beq.n	8000fac <HAL_GPIO_Init+0x90>
          break;
 8000f74:	e043      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f76:	4a89      	ldr	r2, [pc, #548]	; (800119c <HAL_GPIO_Init+0x280>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d026      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f7c:	4a87      	ldr	r2, [pc, #540]	; (800119c <HAL_GPIO_Init+0x280>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d806      	bhi.n	8000f90 <HAL_GPIO_Init+0x74>
 8000f82:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <HAL_GPIO_Init+0x284>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d020      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f88:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <HAL_GPIO_Init+0x288>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01d      	beq.n	8000fca <HAL_GPIO_Init+0xae>
          break;
 8000f8e:	e036      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f90:	4a85      	ldr	r2, [pc, #532]	; (80011a8 <HAL_GPIO_Init+0x28c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f96:	4a85      	ldr	r2, [pc, #532]	; (80011ac <HAL_GPIO_Init+0x290>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d016      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f9c:	4a84      	ldr	r2, [pc, #528]	; (80011b0 <HAL_GPIO_Init+0x294>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0xae>
          break;
 8000fa2:	e02c      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e028      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e023      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e01e      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e019      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e012      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	611a      	str	r2, [r3, #16]
          break;
 8000fea:	e008      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	615a      	str	r2, [r3, #20]
          break;
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d801      	bhi.n	8001008 <HAL_GPIO_Init+0xec>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e001      	b.n	800100c <HAL_GPIO_Init+0xf0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3304      	adds	r3, #4
 800100c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d802      	bhi.n	800101a <HAL_GPIO_Init+0xfe>
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x104>
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3b08      	subs	r3, #8
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	210f      	movs	r1, #15
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	6a39      	ldr	r1, [r7, #32]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	431a      	orrs	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 8096 	beq.w	800117a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x298>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001066:	4a54      	ldr	r2, [pc, #336]	; (80011b8 <HAL_GPIO_Init+0x29c>)
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x19e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x19a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2a8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x196>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x192>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010ba:	2300      	movs	r3, #0
 80010bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010cc:	493a      	ldr	r1, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x29c>)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4938      	ldr	r1, [pc, #224]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	4933      	ldr	r1, [pc, #204]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	492e      	ldr	r1, [pc, #184]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	4929      	ldr	r1, [pc, #164]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001126:	4013      	ands	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	608b      	str	r3, [r1, #8]
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	43db      	mvns	r3, r3
 800114c:	491f      	ldr	r1, [pc, #124]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800114e:	4013      	ands	r3, r2
 8001150:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	491a      	ldr	r1, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	60cb      	str	r3, [r1, #12]
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	43db      	mvns	r3, r3
 8001174:	4915      	ldr	r1, [pc, #84]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001176:	4013      	ands	r3, r2
 8001178:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	3301      	adds	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	fa22 f303 	lsr.w	r3, r2, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	f47f aed0 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 8001190:	bf00      	nop
 8001192:	372c      	adds	r7, #44	; 0x2c
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	10210000 	.word	0x10210000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	10120000 	.word	0x10120000
 80011a8:	10310000 	.word	0x10310000
 80011ac:	10320000 	.word	0x10320000
 80011b0:	10220000 	.word	0x10220000
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010000 	.word	0x40010000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40010c00 	.word	0x40010c00
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40011400 	.word	0x40011400
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	611a      	str	r2, [r3, #16]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e26c      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8087 	beq.w	800132e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001220:	4b92      	ldr	r3, [pc, #584]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b04      	cmp	r3, #4
 800122a:	d00c      	beq.n	8001246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d112      	bne.n	800125e <HAL_RCC_OscConfig+0x5e>
 8001238:	4b8c      	ldr	r3, [pc, #560]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d10b      	bne.n	800125e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001246:	4b89      	ldr	r3, [pc, #548]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d06c      	beq.n	800132c <HAL_RCC_OscConfig+0x12c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d168      	bne.n	800132c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e246      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x76>
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a7f      	ldr	r2, [pc, #508]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e02e      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b7b      	ldr	r3, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a7a      	ldr	r2, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b78      	ldr	r3, [pc, #480]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a77      	ldr	r2, [pc, #476]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01d      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0xbc>
 80012a2:	4b72      	ldr	r3, [pc, #456]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a71      	ldr	r2, [pc, #452]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6f      	ldr	r3, [pc, #444]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6e      	ldr	r2, [pc, #440]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 80012bc:	4b6b      	ldr	r3, [pc, #428]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a6a      	ldr	r2, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b68      	ldr	r3, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a67      	ldr	r2, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fd12 	bl	8000d04 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fd0e 	bl	8000d04 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1fa      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe4>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcfe 	bl	8000d04 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcfa 	bl	8000d04 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1e6      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x10c>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x18c>
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1ba      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4939      	ldr	r1, [pc, #228]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e03a      	b.n	8001402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x270>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fcb3 	bl	8000d04 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fcaf 	bl	8000d04 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e19b      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4927      	ldr	r1, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x270>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc92 	bl	8000d04 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc8e 	bl	8000d04 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e17a      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d03a      	beq.n	8001484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d019      	beq.n	800144a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_RCC_OscConfig+0x274>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fc72 	bl	8000d04 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fc6e 	bl	8000d04 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e15a      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_RCC_OscConfig+0x26c>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fb0a 	bl	8001a5c <RCC_Delay>
 8001448:	e01c      	b.n	8001484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_RCC_OscConfig+0x274>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fc58 	bl	8000d04 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001456:	e00f      	b.n	8001478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fc54 	bl	8000d04 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d908      	bls.n	8001478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e140      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	42420000 	.word	0x42420000
 8001474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b9e      	ldr	r3, [pc, #632]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e9      	bne.n	8001458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a6 	beq.w	80015de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b97      	ldr	r3, [pc, #604]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a93      	ldr	r2, [pc, #588]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a8a      	ldr	r2, [pc, #552]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fc15 	bl	8000d04 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff fc11 	bl	8000d04 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b64      	cmp	r3, #100	; 0x64
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0fd      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x312>
 8001504:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a7a      	ldr	r2, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	e02d      	b.n	800156e <HAL_RCC_OscConfig+0x36e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x334>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6213      	str	r3, [r2, #32]
 8001526:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x36e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x356>
 800153c:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6213      	str	r3, [r2, #32]
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a69      	ldr	r2, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x36e>
 8001556:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a66      	ldr	r2, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbc5 	bl	8000d04 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fbc1 	bl	8000d04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0ab      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x37e>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fbaf 	bl	8000d04 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fbab 	bl	8000d04 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e095      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8081 	beq.w	80016ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d061      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d146      	bne.n	800168a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_RCC_OscConfig+0x4fc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fb7f 	bl	8000d04 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fb7b 	bl	8000d04 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e067      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d108      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	492d      	ldr	r1, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a19      	ldr	r1, [r3, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	430b      	orrs	r3, r1
 8001656:	4927      	ldr	r1, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x4fc>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb4f 	bl	8000d04 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb4b 	bl	8000d04 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e037      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x46a>
 8001688:	e02f      	b.n	80016ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_RCC_OscConfig+0x4fc>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb38 	bl	8000d04 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb34 	bl	8000d04 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e020      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x498>
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e013      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42420060 	.word	0x42420060

08001700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0d0      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d910      	bls.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0207 	bic.w	r2, r3, #7
 800172a:	4965      	ldr	r1, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800177e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d040      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e073      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06b      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4936      	ldr	r1, [pc, #216]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa88 	bl	8000d04 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff fa84 	bl	8000d04 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e053      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d210      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4922      	ldr	r1, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4601      	mov	r1, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	fa21 f303 	lsr.w	r3, r1, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1cc>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1d0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe96 	bl	80005e0 <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	080059c4 	.word	0x080059c4
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b490      	push	{r4, r7}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018dc:	1d3c      	adds	r4, r7, #4
 80018de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x40>
 800190e:	2b08      	cmp	r3, #8
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x46>
 8001912:	e02d      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	e02d      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001926:	4413      	add	r3, r2
 8001928:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800192c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_GetSysClockFreq+0xb8>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c5b      	lsrs	r3, r3, #17
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001946:	4413      	add	r3, r2
 8001948:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800194c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001952:	fb02 f203 	mul.w	r2, r2, r3
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e004      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	623b      	str	r3, [r7, #32]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001972:	623b      	str	r3, [r7, #32]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	6a3b      	ldr	r3, [r7, #32]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bc90      	pop	{r4, r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	08005920 	.word	0x08005920
 8001988:	08005930 	.word	0x08005930
 800198c:	40021000 	.word	0x40021000
 8001990:	007a1200 	.word	0x007a1200
 8001994:	003d0900 	.word	0x003d0900

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000000 	.word	0x20000000

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b0:	f7ff fff2 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b4:	4601      	mov	r1, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	080059d4 	.word	0x080059d4

080019d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d8:	f7ff ffde 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019dc:	4601      	mov	r1, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	0adb      	lsrs	r3, r3, #11
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	080059d4 	.word	0x080059d4

080019fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	220f      	movs	r2, #15
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_GetClockConfig+0x58>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_RCC_GetClockConfig+0x58>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_GetClockConfig+0x58>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_RCC_GetClockConfig+0x58>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0207 	and.w	r2, r3, #7
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40022000 	.word	0x40022000

08001a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <RCC_Delay+0x34>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <RCC_Delay+0x38>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0a5b      	lsrs	r3, r3, #9
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a78:	bf00      	nop
  }
  while (Delay --);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	60fa      	str	r2, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <RCC_Delay+0x1c>
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000
 8001a94:	10624dd3 	.word	0x10624dd3

08001a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e041      	b.n	8001b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f839 	bl	8001b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f000 f9b4 	bl	8001e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d001      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e03a      	b.n	8001bd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_TIM_Base_Start_IT+0x98>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00e      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x58>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8a:	d009      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x58>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x58>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d010      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc2:	e007      	b.n	8001bd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800

08001bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0202 	mvn.w	r2, #2
 8001c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8ed 	bl	8001e0e <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8e0 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8ef 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0204 	mvn.w	r2, #4
 8001c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8c3 	bl	8001e0e <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8b6 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8c5 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0208 	mvn.w	r2, #8
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f899 	bl	8001e0e <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f88c 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f89b 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0210 	mvn.w	r2, #16
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f86f 	bl	8001e0e <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f862 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f871 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0201 	mvn.w	r2, #1
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fba4 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	2b80      	cmp	r3, #128	; 0x80
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8bf 	bl	8001f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f835 	bl	8001e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0220 	mvn.w	r2, #32
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f88a 	bl	8001f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a29      	ldr	r2, [pc, #164]	; (8001efc <TIM_Base_SetConfig+0xb8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00b      	beq.n	8001e74 <TIM_Base_SetConfig+0x30>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d007      	beq.n	8001e74 <TIM_Base_SetConfig+0x30>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <TIM_Base_SetConfig+0xbc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <TIM_Base_SetConfig+0x30>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_Base_SetConfig+0xc0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d108      	bne.n	8001e86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <TIM_Base_SetConfig+0xb8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00b      	beq.n	8001ea6 <TIM_Base_SetConfig+0x62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d007      	beq.n	8001ea6 <TIM_Base_SetConfig+0x62>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <TIM_Base_SetConfig+0xbc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <TIM_Base_SetConfig+0x62>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <TIM_Base_SetConfig+0xc0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d108      	bne.n	8001eb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <TIM_Base_SetConfig+0xb8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	615a      	str	r2, [r3, #20]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800

08001f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e03f      	b.n	8001fbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fafa 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	; 0x24
 8001f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f905 	bl	8002180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b08a      	sub	sp, #40	; 0x28
 8001fca:	af02      	add	r7, sp, #8
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d17c      	bne.n	80020e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_UART_Transmit+0x2c>
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e075      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_UART_Transmit+0x3e>
 8002000:	2302      	movs	r3, #2
 8002002:	e06e      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2221      	movs	r2, #33	; 0x21
 8002016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800201a:	f7fe fe73 	bl	8000d04 <HAL_GetTick>
 800201e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002034:	d108      	bne.n	8002048 <HAL_UART_Transmit+0x82>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e003      	b.n	8002050 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002058:	e02a      	b.n	80020b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f840 	bl	80020ea <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e036      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10b      	bne.n	8002092 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3302      	adds	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	e007      	b.n	80020a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1cf      	bne.n	800205a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f810 	bl	80020ea <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e006      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020fa:	e02c      	b.n	8002156 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002102:	d028      	beq.n	8002156 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x30>
 800210a:	f7fe fdfb 	bl	8000d04 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	429a      	cmp	r2, r3
 8002118:	d21d      	bcs.n	8002156 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002128:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e00f      	b.n	8002176 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4013      	ands	r3, r2
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	429a      	cmp	r2, r3
 8002172:	d0c3      	beq.n	80020fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ba:	f023 030c 	bic.w	r3, r3, #12
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <UART_SetConfig+0x114>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d103      	bne.n	80021f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021e8:	f7ff fbf4 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	e002      	b.n	80021f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021f0:	f7ff fbdc 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 80021f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	009a      	lsls	r2, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <UART_SetConfig+0x118>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	0119      	lsls	r1, r3, #4
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	009a      	lsls	r2, r3, #2
 8002220:	441a      	add	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fbb2 f2f3 	udiv	r2, r2, r3
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <UART_SetConfig+0x118>)
 800222e:	fba3 0302 	umull	r0, r3, r3, r2
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2064      	movs	r0, #100	; 0x64
 8002236:	fb00 f303 	mul.w	r3, r0, r3
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	3332      	adds	r3, #50	; 0x32
 8002240:	4a15      	ldr	r2, [pc, #84]	; (8002298 <UART_SetConfig+0x118>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224c:	4419      	add	r1, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	009a      	lsls	r2, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fbb2 f2f3 	udiv	r2, r2, r3
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <UART_SetConfig+0x118>)
 8002266:	fba3 0302 	umull	r0, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2064      	movs	r0, #100	; 0x64
 800226e:	fb00 f303 	mul.w	r3, r0, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	3332      	adds	r3, #50	; 0x32
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <UART_SetConfig+0x118>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	f003 020f 	and.w	r2, r3, #15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	440a      	add	r2, r1
 800228a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40013800 	.word	0x40013800
 8002298:	51eb851f 	.word	0x51eb851f

0800229c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a2:	f3ef 8305 	mrs	r3, IPSR
 80022a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80022a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ae:	f3ef 8310 	mrs	r3, PRIMASK
 80022b2:	607b      	str	r3, [r7, #4]
  return(result);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <osKernelInitialize+0x32>
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <osKernelInitialize+0x60>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d109      	bne.n	80022d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022c2:	f3ef 8311 	mrs	r3, BASEPRI
 80022c6:	603b      	str	r3, [r7, #0]
  return(result);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80022ce:	f06f 0305 	mvn.w	r3, #5
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e00c      	b.n	80022f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <osKernelInitialize+0x60>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <osKernelInitialize+0x60>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e002      	b.n	80022f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000094 	.word	0x20000094

08002300 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002306:	f3ef 8305 	mrs	r3, IPSR
 800230a:	60bb      	str	r3, [r7, #8]
  return(result);
 800230c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002312:	f3ef 8310 	mrs	r3, PRIMASK
 8002316:	607b      	str	r3, [r7, #4]
  return(result);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <osKernelStart+0x32>
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <osKernelStart+0x64>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d109      	bne.n	800233a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002326:	f3ef 8311 	mrs	r3, BASEPRI
 800232a:	603b      	str	r3, [r7, #0]
  return(result);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002332:	f06f 0305 	mvn.w	r3, #5
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e00e      	b.n	8002358 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <osKernelStart+0x64>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <osKernelStart+0x64>)
 8002344:	2202      	movs	r2, #2
 8002346:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002348:	f001 fa8a 	bl	8003860 <vTaskStartScheduler>
      stat = osOK;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e002      	b.n	8002358 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002356:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002358:	68fb      	ldr	r3, [r7, #12]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000094 	.word	0x20000094

08002368 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b092      	sub	sp, #72	; 0x48
 800236c:	af04      	add	r7, sp, #16
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002378:	f3ef 8305 	mrs	r3, IPSR
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 8094 	bne.w	80024ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002386:	f3ef 8310 	mrs	r3, PRIMASK
 800238a:	623b      	str	r3, [r7, #32]
  return(result);
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 808d 	bne.w	80024ae <osThreadNew+0x146>
 8002394:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <osThreadNew+0x150>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d106      	bne.n	80023aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800239c:	f3ef 8311 	mrs	r3, BASEPRI
 80023a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 8082 	bne.w	80024ae <osThreadNew+0x146>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d07e      	beq.n	80024ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80023b4:	2318      	movs	r3, #24
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80023b8:	2300      	movs	r3, #0
 80023ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80023bc:	f107 031b 	add.w	r3, r7, #27
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d045      	beq.n	800245a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <osThreadNew+0x74>
        name = attr->name;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <osThreadNew+0x9a>
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	2b38      	cmp	r3, #56	; 0x38
 80023f4:	d805      	bhi.n	8002402 <osThreadNew+0x9a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <osThreadNew+0x9e>
        return (NULL);
 8002402:	2300      	movs	r3, #0
 8002404:	e054      	b.n	80024b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00e      	beq.n	800243c <osThreadNew+0xd4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b5b      	cmp	r3, #91	; 0x5b
 8002424:	d90a      	bls.n	800243c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <osThreadNew+0xd4>
        mem = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	e010      	b.n	800245e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10c      	bne.n	800245e <osThreadNew+0xf6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <osThreadNew+0xf6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <osThreadNew+0xf6>
          mem = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
 8002458:	e001      	b.n	800245e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	2b01      	cmp	r3, #1
 8002462:	d110      	bne.n	8002486 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800246c:	9202      	str	r2, [sp, #8]
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f001 f828 	bl	80034d0 <xTaskCreateStatic>
 8002480:	4603      	mov	r3, r0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e013      	b.n	80024ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d110      	bne.n	80024ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	b29a      	uxth	r2, r3
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f001 f86f 	bl	8003582 <xTaskCreate>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <osThreadNew+0x146>
          hTask = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024ae:	697b      	ldr	r3, [r7, #20]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3738      	adds	r7, #56	; 0x38
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000094 	.word	0x20000094

080024bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024c4:	f3ef 8305 	mrs	r3, IPSR
 80024c8:	613b      	str	r3, [r7, #16]
  return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10f      	bne.n	80024f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d0:	f3ef 8310 	mrs	r3, PRIMASK
 80024d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <osDelay+0x34>
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <osDelay+0x58>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d109      	bne.n	80024f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024e4:	f3ef 8311 	mrs	r3, BASEPRI
 80024e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <osDelay+0x3c>
    stat = osErrorISR;
 80024f0:	f06f 0305 	mvn.w	r3, #5
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e007      	b.n	8002508 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f001 f978 	bl	80037f8 <vTaskDelay>
    }
  }

  return (stat);
 8002508:	697b      	ldr	r3, [r7, #20]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000094 	.word	0x20000094

08002518 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002528:	f3ef 8305 	mrs	r3, IPSR
 800252c:	61bb      	str	r3, [r7, #24]
  return(result);
 800252e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002530:	2b00      	cmp	r3, #0
 8002532:	d170      	bne.n	8002616 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002534:	f3ef 8310 	mrs	r3, PRIMASK
 8002538:	617b      	str	r3, [r7, #20]
  return(result);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d16a      	bne.n	8002616 <osMessageQueueNew+0xfe>
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <osMessageQueueNew+0x108>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d105      	bne.n	8002554 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002548:	f3ef 8311 	mrs	r3, BASEPRI
 800254c:	613b      	str	r3, [r7, #16]
  return(result);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d160      	bne.n	8002616 <osMessageQueueNew+0xfe>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d05d      	beq.n	8002616 <osMessageQueueNew+0xfe>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05a      	beq.n	8002616 <osMessageQueueNew+0xfe>
    mem = -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002564:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d029      	beq.n	80025c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <osMessageQueueNew+0x82>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b4f      	cmp	r3, #79	; 0x4f
 800257a:	d90e      	bls.n	800259a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	429a      	cmp	r2, r3
 8002592:	d302      	bcc.n	800259a <osMessageQueueNew+0x82>
        mem = 1;
 8002594:	2301      	movs	r3, #1
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	e014      	b.n	80025c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d110      	bne.n	80025c4 <osMessageQueueNew+0xac>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d104      	bne.n	80025c4 <osMessageQueueNew+0xac>
          mem = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
 80025be:	e001      	b.n	80025c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10c      	bne.n	80025e4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	460b      	mov	r3, r1
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fa52 	bl	8002a84 <xQueueGenericCreateStatic>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24
 80025e2:	e008      	b.n	80025f6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80025ea:	2200      	movs	r2, #0
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 faba 	bl	8002b68 <xQueueGenericCreate>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <osMessageQueueNew+0xf2>
        name = attr->name;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e001      	b.n	800260e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800260e:	69f9      	ldr	r1, [r7, #28]
 8002610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002612:	f000 ff01 	bl	8003418 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000094 	.word	0x20000094

08002624 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800263c:	f3ef 8305 	mrs	r3, IPSR
 8002640:	61fb      	str	r3, [r7, #28]
  return(result);
 8002642:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002648:	f3ef 8310 	mrs	r3, PRIMASK
 800264c:	61bb      	str	r3, [r7, #24]
  return(result);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <osMessageQueuePut+0x44>
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <osMessageQueuePut+0xe0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d12e      	bne.n	80026ba <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800265c:	f3ef 8311 	mrs	r3, BASEPRI
 8002660:	617b      	str	r3, [r7, #20]
  return(result);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d028      	beq.n	80026ba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <osMessageQueuePut+0x56>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <osMessageQueuePut+0x56>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800267a:	f06f 0303 	mvn.w	r3, #3
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002680:	e039      	b.n	80026f6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002686:	f107 0210 	add.w	r2, r7, #16
 800268a:	2300      	movs	r3, #0
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6a38      	ldr	r0, [r7, #32]
 8002690:	f000 fbc4 	bl	8002e1c <xQueueGenericSendFromISR>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800269a:	f06f 0302 	mvn.w	r3, #2
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026a0:	e029      	b.n	80026f6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d026      	beq.n	80026f6 <osMessageQueuePut+0xd2>
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <osMessageQueuePut+0xe4>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026b8:	e01d      	b.n	80026f6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <osMessageQueuePut+0xa2>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80026c6:	f06f 0303 	mvn.w	r3, #3
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	e014      	b.n	80026f8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	6a38      	ldr	r0, [r7, #32]
 80026d6:	f000 faa7 	bl	8002c28 <xQueueGenericSend>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d00b      	beq.n	80026f8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80026e6:	f06f 0301 	mvn.w	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e004      	b.n	80026f8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80026ee:	f06f 0302 	mvn.w	r3, #2
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e000      	b.n	80026f8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000094 	.word	0x20000094
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002722:	f3ef 8305 	mrs	r3, IPSR
 8002726:	61fb      	str	r3, [r7, #28]
  return(result);
 8002728:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272e:	f3ef 8310 	mrs	r3, PRIMASK
 8002732:	61bb      	str	r3, [r7, #24]
  return(result);
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <osMessageQueueGet+0x42>
 800273a:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <osMessageQueueGet+0xdc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d12e      	bne.n	80027a0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002742:	f3ef 8311 	mrs	r3, BASEPRI
 8002746:	617b      	str	r3, [r7, #20]
  return(result);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <osMessageQueueGet+0x54>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <osMessageQueueGet+0x54>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002760:	f06f 0303 	mvn.w	r3, #3
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002766:	e038      	b.n	80027da <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	461a      	mov	r2, r3
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	6a38      	ldr	r0, [r7, #32]
 8002776:	f000 fcc1 	bl	80030fc <xQueueReceiveFromISR>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d003      	beq.n	8002788 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002780:	f06f 0302 	mvn.w	r3, #2
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002786:	e028      	b.n	80027da <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d025      	beq.n	80027da <osMessageQueueGet+0xce>
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <osMessageQueueGet+0xe0>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800279e:	e01c      	b.n	80027da <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <osMessageQueueGet+0xa0>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80027ac:	f06f 0303 	mvn.w	r3, #3
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	e013      	b.n	80027dc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	6a38      	ldr	r0, [r7, #32]
 80027ba:	f000 fbc3 	bl	8002f44 <xQueueReceive>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00b      	beq.n	80027dc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80027ca:	f06f 0301 	mvn.w	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	e004      	b.n	80027dc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80027d2:	f06f 0302 	mvn.w	r3, #2
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	e000      	b.n	80027dc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000094 	.word	0x20000094
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a06      	ldr	r2, [pc, #24]	; (8002818 <vApplicationGetIdleTaskMemory+0x28>)
 8002800:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4a05      	ldr	r2, [pc, #20]	; (800281c <vApplicationGetIdleTaskMemory+0x2c>)
 8002806:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	20000098 	.word	0x20000098
 800281c:	200000f4 	.word	0x200000f4

08002820 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <vApplicationGetTimerTaskMemory+0x2c>)
 8002830:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <vApplicationGetTimerTaskMemory+0x30>)
 8002836:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200002f4 	.word	0x200002f4
 8002850:	20000350 	.word	0x20000350

08002854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f103 0208 	add.w	r2, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800286c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 0208 	add.w	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0208 	add.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002906:	d103      	bne.n	8002910 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e00c      	b.n	800292a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3308      	adds	r3, #8
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e002      	b.n	800291e <vListInsert+0x2e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d2f6      	bcs.n	8002918 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d103      	bne.n	8002994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
	...

080029b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	e7fe      	b.n	80029da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80029dc:	f002 f854 	bl	8004a88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	441a      	add	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	441a      	add	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d114      	bne.n	8002a5c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01a      	beq.n	8002a70 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3310      	adds	r3, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f992 	bl	8003d68 <xTaskRemoveFromEventList>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <xQueueGenericReset+0xcc>)
 8002a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	e009      	b.n	8002a70 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3310      	adds	r3, #16
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fef7 	bl	8002854 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3324      	adds	r3, #36	; 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fef2 	bl	8002854 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a70:	f002 f838 	bl	8004ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <xQueueGenericCreateStatic+0x28>
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	e7fe      	b.n	8002aaa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <xQueueGenericCreateStatic+0x42>
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <xQueueGenericCreateStatic+0x4e>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <xQueueGenericCreateStatic+0x52>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueGenericCreateStatic+0x54>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <xQueueGenericCreateStatic+0x6c>
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	e7fe      	b.n	8002aee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <xQueueGenericCreateStatic+0x78>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <xQueueGenericCreateStatic+0x7c>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <xQueueGenericCreateStatic+0x7e>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <xQueueGenericCreateStatic+0x96>
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	e7fe      	b.n	8002b18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b1a:	2350      	movs	r3, #80	; 0x50
 8002b1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d009      	beq.n	8002b38 <xQueueGenericCreateStatic+0xb4>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e7fe      	b.n	8002b36 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f842 	bl	8002be2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3730      	adds	r7, #48	; 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <xQueueGenericCreate+0x28>
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e004      	b.n	8002ba6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3350      	adds	r3, #80	; 0x50
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 f862 	bl	8004c74 <pvPortMalloc>
 8002bb0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00f      	beq.n	8002bd8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	3350      	adds	r3, #80	; 0x50
 8002bbc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bc6:	79fa      	ldrb	r2, [r7, #7]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f805 	bl	8002be2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e002      	b.n	8002c04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c10:	2101      	movs	r1, #1
 8002c12:	69b8      	ldr	r0, [r7, #24]
 8002c14:	f7ff fece 	bl	80029b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	; 0x38
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <xQueueGenericSend+0x30>
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c56:	e7fe      	b.n	8002c56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSend+0x3e>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericSend+0x42>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericSend+0x44>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <xQueueGenericSend+0x5c>
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	e7fe      	b.n	8002c82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d103      	bne.n	8002c92 <xQueueGenericSend+0x6a>
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <xQueueGenericSend+0x6e>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <xQueueGenericSend+0x70>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <xQueueGenericSend+0x88>
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	e7fe      	b.n	8002cae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cb0:	f001 fa14 	bl	80040dc <xTaskGetSchedulerState>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <xQueueGenericSend+0x98>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <xQueueGenericSend+0x9c>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <xQueueGenericSend+0x9e>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <xQueueGenericSend+0xb6>
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cde:	f001 fed3 	bl	8004a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <xQueueGenericSend+0xcc>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d129      	bne.n	8002d48 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfa:	f000 fa7c 	bl	80031f6 <prvCopyDataToQueue>
 8002cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 f82b 	bl	8003d68 <xTaskRemoveFromEventList>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d18:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <xQueueGenericSend+0x1f0>)
 8002d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	e00a      	b.n	8002d40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <xQueueGenericSend+0x1f0>)
 8002d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d40:	f001 fed0 	bl	8004ae4 <vPortExitCritical>
				return pdPASS;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e063      	b.n	8002e10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d4e:	f001 fec9 	bl	8004ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e05c      	b.n	8002e10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f863 	bl	8003e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d6a:	f001 febb 	bl	8004ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d6e:	f000 fddb 	bl	8003928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d72:	f001 fe89 	bl	8004a88 <vPortEnterCritical>
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d82:	d103      	bne.n	8002d8c <xQueueGenericSend+0x164>
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d98:	d103      	bne.n	8002da2 <xQueueGenericSend+0x17a>
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da2:	f001 fe9f 	bl	8004ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da6:	1d3a      	adds	r2, r7, #4
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f852 	bl	8003e58 <xTaskCheckForTimeOut>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d124      	bne.n	8002e04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbc:	f000 fb13 	bl	80033e6 <prvIsQueueFull>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	3310      	adds	r3, #16
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 ff7c 	bl	8003ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd6:	f000 fa9e 	bl	8003316 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dda:	f000 fdb3 	bl	8003944 <xTaskResumeAll>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f af7c 	bne.w	8002cde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <xQueueGenericSend+0x1f0>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	e772      	b.n	8002cde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 fa8c 	bl	8003316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dfe:	f000 fda1 	bl	8003944 <xTaskResumeAll>
 8002e02:	e76c      	b.n	8002cde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e06:	f000 fa86 	bl	8003316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e0a:	f000 fd9b 	bl	8003944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e0e:	2300      	movs	r3, #0
		}
	}
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3738      	adds	r7, #56	; 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <xQueueGenericSendFromISR+0x2c>
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	e7fe      	b.n	8002e46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSendFromISR+0x3a>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <xQueueGenericSendFromISR+0x3e>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueGenericSendFromISR+0x40>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <xQueueGenericSendFromISR+0x58>
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	e7fe      	b.n	8002e72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d103      	bne.n	8002e82 <xQueueGenericSendFromISR+0x66>
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <xQueueGenericSendFromISR+0x6a>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <xQueueGenericSendFromISR+0x6c>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <xQueueGenericSendFromISR+0x84>
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e7fe      	b.n	8002e9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ea0:	f001 feac 	bl	8004bfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61ba      	str	r2, [r7, #24]
 8002eba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <xQueueGenericSendFromISR+0xb6>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d12c      	bne.n	8002f2c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee2:	f000 f988 	bl	80031f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ee6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eee:	d112      	bne.n	8002f16 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d016      	beq.n	8002f26 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	3324      	adds	r3, #36	; 0x24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ff33 	bl	8003d68 <xTaskRemoveFromEventList>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00e      	beq.n	8002f26 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e007      	b.n	8002f26 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	b25a      	sxtb	r2, r3
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f26:	2301      	movs	r3, #1
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f2a:	e001      	b.n	8002f30 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3738      	adds	r7, #56	; 0x38
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08c      	sub	sp, #48	; 0x30
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <xQueueReceive+0x2e>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	e7fe      	b.n	8002f70 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d103      	bne.n	8002f80 <xQueueReceive+0x3c>
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <xQueueReceive+0x40>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <xQueueReceive+0x42>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <xQueueReceive+0x5a>
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e7fe      	b.n	8002f9c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f9e:	f001 f89d 	bl	80040dc <xTaskGetSchedulerState>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <xQueueReceive+0x6a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueReceive+0x6e>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueReceive+0x70>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <xQueueReceive+0x88>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e7fe      	b.n	8002fca <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fcc:	f001 fd5c 	bl	8004a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01f      	beq.n	800301c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe0:	f000 f973 	bl	80032ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	1e5a      	subs	r2, r3, #1
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 feb5 	bl	8003d68 <xTaskRemoveFromEventList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003004:	4b3c      	ldr	r3, [pc, #240]	; (80030f8 <xQueueReceive+0x1b4>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003014:	f001 fd66 	bl	8004ae4 <vPortExitCritical>
				return pdPASS;
 8003018:	2301      	movs	r3, #1
 800301a:	e069      	b.n	80030f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003022:	f001 fd5f 	bl	8004ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003026:	2300      	movs	r3, #0
 8003028:	e062      	b.n	80030f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fef9 	bl	8003e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800303a:	2301      	movs	r3, #1
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800303e:	f001 fd51 	bl	8004ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003042:	f000 fc71 	bl	8003928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003046:	f001 fd1f 	bl	8004a88 <vPortEnterCritical>
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003050:	b25b      	sxtb	r3, r3
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003056:	d103      	bne.n	8003060 <xQueueReceive+0x11c>
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003066:	b25b      	sxtb	r3, r3
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306c:	d103      	bne.n	8003076 <xQueueReceive+0x132>
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003076:	f001 fd35 	bl	8004ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800307a:	1d3a      	adds	r2, r7, #4
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fee8 	bl	8003e58 <xTaskCheckForTimeOut>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d123      	bne.n	80030d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800308e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003090:	f000 f993 	bl	80033ba <prvIsQueueEmpty>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	3324      	adds	r3, #36	; 0x24
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fe12 	bl	8003ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030aa:	f000 f934 	bl	8003316 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030ae:	f000 fc49 	bl	8003944 <xTaskResumeAll>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d189      	bne.n	8002fcc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <xQueueReceive+0x1b4>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	e780      	b.n	8002fcc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030cc:	f000 f923 	bl	8003316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030d0:	f000 fc38 	bl	8003944 <xTaskResumeAll>
 80030d4:	e77a      	b.n	8002fcc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d8:	f000 f91d 	bl	8003316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030dc:	f000 fc32 	bl	8003944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e2:	f000 f96a 	bl	80033ba <prvIsQueueEmpty>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f43f af6f 	beq.w	8002fcc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3730      	adds	r7, #48	; 0x30
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08e      	sub	sp, #56	; 0x38
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <xQueueReceiveFromISR+0x2a>
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	e7fe      	b.n	8003124 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <xQueueReceiveFromISR+0x38>
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <xQueueReceiveFromISR+0x3c>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <xQueueReceiveFromISR+0x3e>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <xQueueReceiveFromISR+0x56>
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e7fe      	b.n	8003150 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003152:	f001 fd53 	bl	8004bfc <vPortValidateInterruptPriority>
	__asm volatile
 8003156:	f3ef 8211 	mrs	r2, BASEPRI
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	61ba      	str	r2, [r7, #24]
 800316c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800316e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02f      	beq.n	80031de <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800318c:	f000 f89d 	bl	80032ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a0:	d112      	bne.n	80031c8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	3310      	adds	r3, #16
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fdda 	bl	8003d68 <xTaskRemoveFromEventList>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e007      	b.n	80031d8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031cc:	3301      	adds	r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	b25a      	sxtb	r2, r3
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80031d8:	2301      	movs	r3, #1
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
 80031dc:	e001      	b.n	80031e2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80031de:	2300      	movs	r3, #0
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3738      	adds	r7, #56	; 0x38
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d14d      	bne.n	80032b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 ff79 	bl	8004118 <xTaskPriorityDisinherit>
 8003226:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	e043      	b.n	80032b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6898      	ldr	r0, [r3, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	461a      	mov	r2, r3
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	f001 ff15 	bl	8005070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	441a      	add	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d32b      	bcc.n	80032b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e026      	b.n	80032b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68d8      	ldr	r0, [r3, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	461a      	mov	r2, r3
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	f001 fefb 	bl	8005070 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	425b      	negs	r3, r3
 8003284:	441a      	add	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d207      	bcs.n	80032a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	425b      	negs	r3, r3
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d105      	bne.n	80032b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032c0:	697b      	ldr	r3, [r7, #20]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d303      	bcc.n	80032fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	461a      	mov	r2, r3
 8003308:	6838      	ldr	r0, [r7, #0]
 800330a:	f001 feb1 	bl	8005070 <memcpy>
	}
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800331e:	f001 fbb3 	bl	8004a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003328:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800332a:	e011      	b.n	8003350 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fd15 	bl	8003d68 <xTaskRemoveFromEventList>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003344:	f000 fde8 	bl	8003f18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	3b01      	subs	r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	dce9      	bgt.n	800332c <prvUnlockQueue+0x16>
 8003358:	e000      	b.n	800335c <prvUnlockQueue+0x46>
					break;
 800335a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003364:	f001 fbbe 	bl	8004ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003368:	f001 fb8e 	bl	8004a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003372:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003374:	e011      	b.n	800339a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3310      	adds	r3, #16
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fcf0 	bl	8003d68 <xTaskRemoveFromEventList>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800338e:	f000 fdc3 	bl	8003f18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	3b01      	subs	r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800339a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	dce9      	bgt.n	8003376 <prvUnlockQueue+0x60>
 80033a2:	e000      	b.n	80033a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	22ff      	movs	r2, #255	; 0xff
 80033aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033ae:	f001 fb99 	bl	8004ae4 <vPortExitCritical>
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c2:	f001 fb61 	bl	8004a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e001      	b.n	80033d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033d8:	f001 fb84 	bl	8004ae4 <vPortExitCritical>

	return xReturn;
 80033dc:	68fb      	ldr	r3, [r7, #12]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033ee:	f001 fb4b 	bl	8004a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d102      	bne.n	8003404 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e001      	b.n	8003408 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003408:	f001 fb6c 	bl	8004ae4 <vPortExitCritical>

	return xReturn;
 800340c:	68fb      	ldr	r3, [r7, #12]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e014      	b.n	8003452 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <vQueueAddToRegistry+0x4c>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003434:	490b      	ldr	r1, [pc, #44]	; (8003464 <vQueueAddToRegistry+0x4c>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <vQueueAddToRegistry+0x4c>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800344a:	e005      	b.n	8003458 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b07      	cmp	r3, #7
 8003456:	d9e7      	bls.n	8003428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20001a40 	.word	0x20001a40

08003468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003478:	f001 fb06 	bl	8004a88 <vPortEnterCritical>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003488:	d103      	bne.n	8003492 <vQueueWaitForMessageRestricted+0x2a>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003498:	b25b      	sxtb	r3, r3
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349e:	d103      	bne.n	80034a8 <vQueueWaitForMessageRestricted+0x40>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a8:	f001 fb1c 	bl	8004ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fc29 	bl	8003d14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff27 	bl	8003316 <prvUnlockQueue>
	}
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <xTaskCreateStatic+0x28>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	e7fe      	b.n	80034f6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80034f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <xTaskCreateStatic+0x42>
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	e7fe      	b.n	8003510 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003512:	235c      	movs	r3, #92	; 0x5c
 8003514:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b5c      	cmp	r3, #92	; 0x5c
 800351a:	d009      	beq.n	8003530 <xTaskCreateStatic+0x60>
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e7fe      	b.n	800352e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01e      	beq.n	8003574 <xTaskCreateStatic+0xa4>
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003544:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800354e:	2300      	movs	r3, #0
 8003550:	9303      	str	r3, [sp, #12]
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	9302      	str	r3, [sp, #8]
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f850 	bl	800360c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800356c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356e:	f000 f8d3 	bl	8003718 <prvAddNewTaskToReadyList>
 8003572:	e001      	b.n	8003578 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003578:	697b      	ldr	r3, [r7, #20]
	}
 800357a:	4618      	mov	r0, r3
 800357c:	3728      	adds	r7, #40	; 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003582:	b580      	push	{r7, lr}
 8003584:	b08c      	sub	sp, #48	; 0x30
 8003586:	af04      	add	r7, sp, #16
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fb6c 	bl	8004c74 <pvPortMalloc>
 800359c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035a4:	205c      	movs	r0, #92	; 0x5c
 80035a6:	f001 fb65 	bl	8004c74 <pvPortMalloc>
 80035aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
 80035b8:	e005      	b.n	80035c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f001 fc1c 	bl	8004df8 <vPortFree>
 80035c0:	e001      	b.n	80035c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d017      	beq.n	80035fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	2300      	movs	r3, #0
 80035d8:	9303      	str	r3, [sp, #12]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	9302      	str	r3, [sp, #8]
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f80e 	bl	800360c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035f0:	69f8      	ldr	r0, [r7, #28]
 80035f2:	f000 f891 	bl	8003718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e002      	b.n	8003602 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003600:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003602:	69bb      	ldr	r3, [r7, #24]
	}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	461a      	mov	r2, r3
 8003624:	21a5      	movs	r1, #165	; 0xa5
 8003626:	f001 fd2e 	bl	8005086 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003634:	3b01      	subs	r3, #1
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f023 0307 	bic.w	r3, r3, #7
 8003642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <prvInitialiseNewTask+0x56>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e7fe      	b.n	8003660 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e012      	b.n	800368e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	7819      	ldrb	r1, [r3, #0]
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	3334      	adds	r3, #52	; 0x34
 8003678:	460a      	mov	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d9e9      	bls.n	8003668 <prvInitialiseNewTask+0x5c>
 8003694:	e000      	b.n	8003698 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003696:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	2b37      	cmp	r3, #55	; 0x37
 80036a4:	d901      	bls.n	80036aa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036a6:	2337      	movs	r3, #55	; 0x37
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	3304      	adds	r3, #4
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f8e6 	bl	8002892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	3318      	adds	r3, #24
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f8e1 	bl	8002892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2200      	movs	r2, #0
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	69b8      	ldr	r0, [r7, #24]
 80036fa:	f001 f8d7 	bl	80048ac <pxPortInitialiseStack>
 80036fe:	4602      	mov	r2, r0
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003720:	f001 f9b2 	bl	8004a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003724:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <prvAddNewTaskToReadyList+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	4a2c      	ldr	r2, [pc, #176]	; (80037dc <prvAddNewTaskToReadyList+0xc4>)
 800372c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003736:	4a2a      	ldr	r2, [pc, #168]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <prvAddNewTaskToReadyList+0xc4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d110      	bne.n	8003766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003744:	f000 fc0c 	bl	8003f60 <prvInitialiseTaskLists>
 8003748:	e00d      	b.n	8003766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <prvAddNewTaskToReadyList+0xcc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d802      	bhi.n	8003766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 800376e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <prvAddNewTaskToReadyList+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d903      	bls.n	800378c <prvAddNewTaskToReadyList+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <prvAddNewTaskToReadyList+0xd4>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <prvAddNewTaskToReadyList+0xd8>)
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7ff f881 	bl	80028aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037a8:	f001 f99c 	bl	8004ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <prvAddNewTaskToReadyList+0xcc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d207      	bcs.n	80037d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <prvAddNewTaskToReadyList+0xdc>)
 80037c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000c24 	.word	0x20000c24
 80037e0:	20000750 	.word	0x20000750
 80037e4:	20000c30 	.word	0x20000c30
 80037e8:	20000c40 	.word	0x20000c40
 80037ec:	20000c2c 	.word	0x20000c2c
 80037f0:	20000754 	.word	0x20000754
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <vTaskDelay+0x60>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <vTaskDelay+0x2e>
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	e7fe      	b.n	8003824 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003826:	f000 f87f 	bl	8003928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800382a:	2100      	movs	r1, #0
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fcdf 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003832:	f000 f887 	bl	8003944 <xTaskResumeAll>
 8003836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <vTaskDelay+0x64>)
 8003840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000c4c 	.word	0x20000c4c
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800386e:	463a      	mov	r2, r7
 8003870:	1d39      	adds	r1, r7, #4
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe ffba 	bl	80027f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	9202      	str	r2, [sp, #8]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	460a      	mov	r2, r1
 800388e:	4920      	ldr	r1, [pc, #128]	; (8003910 <vTaskStartScheduler+0xb0>)
 8003890:	4820      	ldr	r0, [pc, #128]	; (8003914 <vTaskStartScheduler+0xb4>)
 8003892:	f7ff fe1d 	bl	80034d0 <xTaskCreateStatic>
 8003896:	4602      	mov	r2, r0
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <vTaskStartScheduler+0xb8>)
 800389a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <vTaskStartScheduler+0xb8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e001      	b.n	80038ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038b4:	f000 fcf0 	bl	8004298 <xTimerCreateTimerTask>
 80038b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d115      	bne.n	80038ec <vTaskStartScheduler+0x8c>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <vTaskStartScheduler+0xbc>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <vTaskStartScheduler+0xc0>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <vTaskStartScheduler+0xc4>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038e6:	f001 f85f 	bl	80049a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038ea:	e00d      	b.n	8003908 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f2:	d109      	bne.n	8003908 <vTaskStartScheduler+0xa8>
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e7fe      	b.n	8003906 <vTaskStartScheduler+0xa6>
}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	08005934 	.word	0x08005934
 8003914:	08003f31 	.word	0x08003f31
 8003918:	20000c48 	.word	0x20000c48
 800391c:	20000c44 	.word	0x20000c44
 8003920:	20000c30 	.word	0x20000c30
 8003924:	20000c28 	.word	0x20000c28

08003928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <vTaskSuspendAll+0x18>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	4a03      	ldr	r2, [pc, #12]	; (8003940 <vTaskSuspendAll+0x18>)
 8003934:	6013      	str	r3, [r2, #0]
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20000c4c 	.word	0x20000c4c

08003944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <xTaskResumeAll+0x114>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <xTaskResumeAll+0x2a>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	e7fe      	b.n	800396c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800396e:	f001 f88b 	bl	8004a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003972:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <xTaskResumeAll+0x114>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3b01      	subs	r3, #1
 8003978:	4a37      	ldr	r2, [pc, #220]	; (8003a58 <xTaskResumeAll+0x114>)
 800397a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <xTaskResumeAll+0x114>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d162      	bne.n	8003a4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003984:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <xTaskResumeAll+0x118>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05e      	beq.n	8003a4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800398c:	e02f      	b.n	80039ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800398e:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <xTaskResumeAll+0x11c>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3318      	adds	r3, #24
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe ffe0 	bl	8002960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe ffdb 	bl	8002960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <xTaskResumeAll+0x120>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d903      	bls.n	80039be <xTaskResumeAll+0x7a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <xTaskResumeAll+0x120>)
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <xTaskResumeAll+0x124>)
 80039cc:	441a      	add	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f7fe ff68 	bl	80028aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <xTaskResumeAll+0x128>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <xTaskResumeAll+0x12c>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ee:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <xTaskResumeAll+0x11c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1cb      	bne.n	800398e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039fc:	f000 fb4a 	bl	8004094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <xTaskResumeAll+0x130>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a0c:	f000 f844 	bl	8003a98 <xTaskIncrementTick>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <xTaskResumeAll+0x12c>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f1      	bne.n	8003a0c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <xTaskResumeAll+0x130>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <xTaskResumeAll+0x12c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <xTaskResumeAll+0x134>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a4a:	f001 f84b 	bl	8004ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000c4c 	.word	0x20000c4c
 8003a5c:	20000c24 	.word	0x20000c24
 8003a60:	20000be4 	.word	0x20000be4
 8003a64:	20000c2c 	.word	0x20000c2c
 8003a68:	20000754 	.word	0x20000754
 8003a6c:	20000750 	.word	0x20000750
 8003a70:	20000c38 	.word	0x20000c38
 8003a74:	20000c34 	.word	0x20000c34
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <xTaskGetTickCount+0x18>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a88:	687b      	ldr	r3, [r7, #4]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000c28 	.word	0x20000c28

08003a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <xTaskIncrementTick+0x150>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 808d 	bne.w	8003bc6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <xTaskIncrementTick+0x154>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ab4:	4a4d      	ldr	r2, [pc, #308]	; (8003bec <xTaskIncrementTick+0x154>)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11f      	bne.n	8003b00 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <xTaskIncrementTick+0x158>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <xTaskIncrementTick+0x46>
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	e7fe      	b.n	8003adc <xTaskIncrementTick+0x44>
 8003ade:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <xTaskIncrementTick+0x158>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <xTaskIncrementTick+0x15c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <xTaskIncrementTick+0x158>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4a41      	ldr	r2, [pc, #260]	; (8003bf4 <xTaskIncrementTick+0x15c>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <xTaskIncrementTick+0x160>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a3f      	ldr	r2, [pc, #252]	; (8003bf8 <xTaskIncrementTick+0x160>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	f000 faca 	bl	8004094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b00:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <xTaskIncrementTick+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d34e      	bcc.n	8003ba8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <xTaskIncrementTick+0x158>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <xTaskIncrementTick+0x80>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <xTaskIncrementTick+0x82>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1e:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <xTaskIncrementTick+0x164>)
 8003b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b24:	601a      	str	r2, [r3, #0]
					break;
 8003b26:	e03f      	b.n	8003ba8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b28:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <xTaskIncrementTick+0x158>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d203      	bcs.n	8003b48 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b40:	4a2e      	ldr	r2, [pc, #184]	; (8003bfc <xTaskIncrementTick+0x164>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6013      	str	r3, [r2, #0]
						break;
 8003b46:	e02f      	b.n	8003ba8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe ff07 	bl	8002960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fefe 	bl	8002960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <xTaskIncrementTick+0x168>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d903      	bls.n	8003b78 <xTaskIncrementTick+0xe0>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <xTaskIncrementTick+0x168>)
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <xTaskIncrementTick+0x16c>)
 8003b86:	441a      	add	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f7fe fe8b 	bl	80028aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <xTaskIncrementTick+0x170>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3b3      	bcc.n	8003b0a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba6:	e7b0      	b.n	8003b0a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <xTaskIncrementTick+0x170>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	4915      	ldr	r1, [pc, #84]	; (8003c04 <xTaskIncrementTick+0x16c>)
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d907      	bls.n	8003bd0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e004      	b.n	8003bd0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <xTaskIncrementTick+0x174>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a0f      	ldr	r2, [pc, #60]	; (8003c0c <xTaskIncrementTick+0x174>)
 8003bce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <xTaskIncrementTick+0x178>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bdc:	697b      	ldr	r3, [r7, #20]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000c4c 	.word	0x20000c4c
 8003bec:	20000c28 	.word	0x20000c28
 8003bf0:	20000bdc 	.word	0x20000bdc
 8003bf4:	20000be0 	.word	0x20000be0
 8003bf8:	20000c3c 	.word	0x20000c3c
 8003bfc:	20000c44 	.word	0x20000c44
 8003c00:	20000c2c 	.word	0x20000c2c
 8003c04:	20000754 	.word	0x20000754
 8003c08:	20000750 	.word	0x20000750
 8003c0c:	20000c34 	.word	0x20000c34
 8003c10:	20000c38 	.word	0x20000c38

08003c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <vTaskSwitchContext+0xa4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <vTaskSwitchContext+0xa8>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c28:	e040      	b.n	8003cac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <vTaskSwitchContext+0xa8>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <vTaskSwitchContext+0xac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e00f      	b.n	8003c58 <vTaskSwitchContext+0x44>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <vTaskSwitchContext+0x3e>
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e7fe      	b.n	8003c50 <vTaskSwitchContext+0x3c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	491a      	ldr	r1, [pc, #104]	; (8003cc4 <vTaskSwitchContext+0xb0>)
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0e5      	beq.n	8003c38 <vTaskSwitchContext+0x24>
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <vTaskSwitchContext+0xb0>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d104      	bne.n	8003c9c <vTaskSwitchContext+0x88>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <vTaskSwitchContext+0xb4>)
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <vTaskSwitchContext+0xac>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6013      	str	r3, [r2, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000c4c 	.word	0x20000c4c
 8003cbc:	20000c38 	.word	0x20000c38
 8003cc0:	20000c2c 	.word	0x20000c2c
 8003cc4:	20000754 	.word	0x20000754
 8003cc8:	20000750 	.word	0x20000750

08003ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <vTaskPlaceOnEventList+0x24>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e7fe      	b.n	8003cee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <vTaskPlaceOnEventList+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fe fdf9 	bl	80028f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cfe:	2101      	movs	r1, #1
 8003d00:	6838      	ldr	r0, [r7, #0]
 8003d02:	f000 fa75 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000750 	.word	0x20000750

08003d14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <vTaskPlaceOnEventListRestricted+0x26>
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e7fe      	b.n	8003d38 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <vTaskPlaceOnEventListRestricted+0x50>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3318      	adds	r3, #24
 8003d40:	4619      	mov	r1, r3
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fe fdb1 	bl	80028aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f000 fa4a 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
	}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000750 	.word	0x20000750

08003d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <xTaskRemoveFromEventList+0x2a>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e7fe      	b.n	8003d90 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3318      	adds	r3, #24
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fde2 	bl	8002960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <xTaskRemoveFromEventList+0xac>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11d      	bne.n	8003de0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fdd9 	bl	8002960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <xTaskRemoveFromEventList+0xb0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d903      	bls.n	8003dc2 <xTaskRemoveFromEventList+0x5a>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <xTaskRemoveFromEventList+0xb0>)
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <xTaskRemoveFromEventList+0xb4>)
 8003dd0:	441a      	add	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7fe fd66 	bl	80028aa <vListInsertEnd>
 8003dde:	e005      	b.n	8003dec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3318      	adds	r3, #24
 8003de4:	4619      	mov	r1, r3
 8003de6:	480e      	ldr	r0, [pc, #56]	; (8003e20 <xTaskRemoveFromEventList+0xb8>)
 8003de8:	f7fe fd5f 	bl	80028aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <xTaskRemoveFromEventList+0xbc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d905      	bls.n	8003e06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <xTaskRemoveFromEventList+0xc0>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e001      	b.n	8003e0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e0a:	697b      	ldr	r3, [r7, #20]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000c4c 	.word	0x20000c4c
 8003e18:	20000c2c 	.word	0x20000c2c
 8003e1c:	20000754 	.word	0x20000754
 8003e20:	20000be4 	.word	0x20000be4
 8003e24:	20000750 	.word	0x20000750
 8003e28:	20000c38 	.word	0x20000c38

08003e2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <vTaskInternalSetTimeOutState+0x24>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <vTaskInternalSetTimeOutState+0x28>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	605a      	str	r2, [r3, #4]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000c3c 	.word	0x20000c3c
 8003e54:	20000c28 	.word	0x20000c28

08003e58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <xTaskCheckForTimeOut+0x24>
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	e7fe      	b.n	8003e7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <xTaskCheckForTimeOut+0x3e>
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e7fe      	b.n	8003e94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003e96:	f000 fdf7 	bl	8004a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <xTaskCheckForTimeOut+0xb8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb2:	d102      	bne.n	8003eba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e023      	b.n	8003f02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <xTaskCheckForTimeOut+0xbc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d007      	beq.n	8003ed6 <xTaskCheckForTimeOut+0x7e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e015      	b.n	8003f02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d20b      	bcs.n	8003ef8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff9d 	bl	8003e2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e004      	b.n	8003f02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f000 fdef 	bl	8004ae4 <vPortExitCritical>

	return xReturn;
 8003f06:	69fb      	ldr	r3, [r7, #28]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000c28 	.word	0x20000c28
 8003f14:	20000c3c 	.word	0x20000c3c

08003f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <vTaskMissedYield+0x14>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000c38 	.word	0x20000c38

08003f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f38:	f000 f852 	bl	8003fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvIdleTask+0x28>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d9f9      	bls.n	8003f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <prvIdleTask+0x2c>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f54:	e7f0      	b.n	8003f38 <prvIdleTask+0x8>
 8003f56:	bf00      	nop
 8003f58:	20000754 	.word	0x20000754
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	e00c      	b.n	8003f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <prvInitialiseTaskLists+0x60>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fc6a 	bl	8002854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b37      	cmp	r3, #55	; 0x37
 8003f8a:	d9ef      	bls.n	8003f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f8c:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <prvInitialiseTaskLists+0x64>)
 8003f8e:	f7fe fc61 	bl	8002854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f92:	480d      	ldr	r0, [pc, #52]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003f94:	f7fe fc5e 	bl	8002854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f98:	480c      	ldr	r0, [pc, #48]	; (8003fcc <prvInitialiseTaskLists+0x6c>)
 8003f9a:	f7fe fc5b 	bl	8002854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <prvInitialiseTaskLists+0x70>)
 8003fa0:	f7fe fc58 	bl	8002854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fa4:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <prvInitialiseTaskLists+0x74>)
 8003fa6:	f7fe fc55 	bl	8002854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <prvInitialiseTaskLists+0x78>)
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <prvInitialiseTaskLists+0x64>)
 8003fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <prvInitialiseTaskLists+0x7c>)
 8003fb2:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <prvInitialiseTaskLists+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000754 	.word	0x20000754
 8003fc4:	20000bb4 	.word	0x20000bb4
 8003fc8:	20000bc8 	.word	0x20000bc8
 8003fcc:	20000be4 	.word	0x20000be4
 8003fd0:	20000bf8 	.word	0x20000bf8
 8003fd4:	20000c10 	.word	0x20000c10
 8003fd8:	20000bdc 	.word	0x20000bdc
 8003fdc:	20000be0 	.word	0x20000be0

08003fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe6:	e019      	b.n	800401c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fe8:	f000 fd4e 	bl	8004a88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <prvCheckTasksWaitingTermination+0x4c>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fcb1 	bl	8002960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <prvCheckTasksWaitingTermination+0x50>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3b01      	subs	r3, #1
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <prvCheckTasksWaitingTermination+0x50>)
 8004006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 8004010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004012:	f000 fd67 	bl	8004ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f80e 	bl	8004038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <prvCheckTasksWaitingTermination+0x54>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e1      	bne.n	8003fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000bf8 	.word	0x20000bf8
 8004030:	20000c24 	.word	0x20000c24
 8004034:	20000c0c 	.word	0x20000c0c

08004038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004046:	2b00      	cmp	r3, #0
 8004048:	d108      	bne.n	800405c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fed2 	bl	8004df8 <vPortFree>
				vPortFree( pxTCB );
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fecf 	bl	8004df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800405a:	e017      	b.n	800408c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004062:	2b01      	cmp	r3, #1
 8004064:	d103      	bne.n	800406e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fec6 	bl	8004df8 <vPortFree>
	}
 800406c:	e00e      	b.n	800408c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004074:	2b02      	cmp	r3, #2
 8004076:	d009      	beq.n	800408c <prvDeleteTCB+0x54>
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e7fe      	b.n	800408a <prvDeleteTCB+0x52>
	}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <prvResetNextTaskUnblockTime+0x40>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <prvResetNextTaskUnblockTime+0x14>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <prvResetNextTaskUnblockTime+0x16>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <prvResetNextTaskUnblockTime+0x44>)
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040b6:	e008      	b.n	80040ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <prvResetNextTaskUnblockTime+0x40>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <prvResetNextTaskUnblockTime+0x44>)
 80040c8:	6013      	str	r3, [r2, #0]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000bdc 	.word	0x20000bdc
 80040d8:	20000c44 	.word	0x20000c44

080040dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <xTaskGetSchedulerState+0x34>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ea:	2301      	movs	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	e008      	b.n	8004102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <xTaskGetSchedulerState+0x38>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040f8:	2302      	movs	r3, #2
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	e001      	b.n	8004102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004102:	687b      	ldr	r3, [r7, #4]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000c30 	.word	0x20000c30
 8004114:	20000c4c 	.word	0x20000c4c

08004118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d054      	beq.n	80041d8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800412e:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <xTaskPriorityDisinherit+0xcc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d009      	beq.n	800414c <xTaskPriorityDisinherit+0x34>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e7fe      	b.n	800414a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <xTaskPriorityDisinherit+0x50>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	e7fe      	b.n	8004166 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	429a      	cmp	r2, r3
 800417c:	d02c      	beq.n	80041d8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	2b00      	cmp	r3, #0
 8004184:	d128      	bne.n	80041d8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3304      	adds	r3, #4
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fbe8 	bl	8002960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <xTaskPriorityDisinherit+0xd0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d903      	bls.n	80041b8 <xTaskPriorityDisinherit+0xa0>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <xTaskPriorityDisinherit+0xd0>)
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <xTaskPriorityDisinherit+0xd4>)
 80041c6:	441a      	add	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f7fe fb6b 	bl	80028aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041d8:	697b      	ldr	r3, [r7, #20]
	}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000750 	.word	0x20000750
 80041e8:	20000c2c 	.word	0x20000c2c
 80041ec:	20000754 	.word	0x20000754

080041f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <prvAddCurrentTaskToDelayedList+0x90>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004200:	4b20      	ldr	r3, [pc, #128]	; (8004284 <prvAddCurrentTaskToDelayedList+0x94>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fbaa 	bl	8002960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004212:	d10a      	bne.n	800422a <prvAddCurrentTaskToDelayedList+0x3a>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <prvAddCurrentTaskToDelayedList+0x94>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4819      	ldr	r0, [pc, #100]	; (8004288 <prvAddCurrentTaskToDelayedList+0x98>)
 8004224:	f7fe fb41 	bl	80028aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004228:	e026      	b.n	8004278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <prvAddCurrentTaskToDelayedList+0x94>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	429a      	cmp	r2, r3
 8004240:	d209      	bcs.n	8004256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <prvAddCurrentTaskToDelayedList+0x94>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7fe fb4e 	bl	80028f0 <vListInsert>
}
 8004254:	e010      	b.n	8004278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004256:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <prvAddCurrentTaskToDelayedList+0x94>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe fb44 	bl	80028f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	d202      	bcs.n	8004278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004272:	4a08      	ldr	r2, [pc, #32]	; (8004294 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000c28 	.word	0x20000c28
 8004284:	20000750 	.word	0x20000750
 8004288:	20000c10 	.word	0x20000c10
 800428c:	20000be0 	.word	0x20000be0
 8004290:	20000bdc 	.word	0x20000bdc
 8004294:	20000c44 	.word	0x20000c44

08004298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042a2:	f000 fac3 	bl	800482c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042a6:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <xTimerCreateTimerTask+0x80>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d021      	beq.n	80042f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042b6:	1d3a      	adds	r2, r7, #4
 80042b8:	f107 0108 	add.w	r1, r7, #8
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe faad 	bl	8002820 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	9202      	str	r2, [sp, #8]
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2302      	movs	r3, #2
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	460a      	mov	r2, r1
 80042d8:	4910      	ldr	r1, [pc, #64]	; (800431c <xTimerCreateTimerTask+0x84>)
 80042da:	4811      	ldr	r0, [pc, #68]	; (8004320 <xTimerCreateTimerTask+0x88>)
 80042dc:	f7ff f8f8 	bl	80034d0 <xTaskCreateStatic>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <xTimerCreateTimerTask+0x8c>)
 80042e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <xTimerCreateTimerTask+0x8c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042ee:	2301      	movs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <xTimerCreateTimerTask+0x74>
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	e7fe      	b.n	800430a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000c80 	.word	0x20000c80
 800431c:	0800593c 	.word	0x0800593c
 8004320:	08004441 	.word	0x08004441
 8004324:	20000c84 	.word	0x20000c84

08004328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <xTimerGenericCommand+0x2c>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	e7fe      	b.n	8004352 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <xTimerGenericCommand+0x94>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02a      	beq.n	80043b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b05      	cmp	r3, #5
 800436c:	dc18      	bgt.n	80043a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800436e:	f7ff feb5 	bl	80040dc <xTaskGetSchedulerState>
 8004372:	4603      	mov	r3, r0
 8004374:	2b02      	cmp	r3, #2
 8004376:	d109      	bne.n	800438c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <xTimerGenericCommand+0x94>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	f107 0110 	add.w	r1, r7, #16
 8004380:	2300      	movs	r3, #0
 8004382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004384:	f7fe fc50 	bl	8002c28 <xQueueGenericSend>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24
 800438a:	e012      	b.n	80043b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <xTimerGenericCommand+0x94>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	f107 0110 	add.w	r1, r7, #16
 8004394:	2300      	movs	r3, #0
 8004396:	2200      	movs	r2, #0
 8004398:	f7fe fc46 	bl	8002c28 <xQueueGenericSend>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24
 800439e:	e008      	b.n	80043b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <xTimerGenericCommand+0x94>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	f107 0110 	add.w	r1, r7, #16
 80043a8:	2300      	movs	r3, #0
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	f7fe fd36 	bl	8002e1c <xQueueGenericSendFromISR>
 80043b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000c80 	.word	0x20000c80

080043c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <prvProcessExpiredTimer+0x7c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe fac1 	bl	8002960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d121      	bne.n	800442a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f000 f8c8 	bl	8004588 <prvInsertTimerInActiveList>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	2100      	movs	r1, #0
 8004408:	6978      	ldr	r0, [r7, #20]
 800440a:	f7ff ff8d 	bl	8004328 <xTimerGenericCommand>
 800440e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <prvProcessExpiredTimer+0x6a>
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e7fe      	b.n	8004428 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	6978      	ldr	r0, [r7, #20]
 8004430:	4798      	blx	r3
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000c78 	.word	0x20000c78

08004440 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	4618      	mov	r0, r3
 800444e:	f000 f857 	bl	8004500 <prvGetNextExpireTime>
 8004452:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4619      	mov	r1, r3
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f803 	bl	8004464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800445e:	f000 f8d5 	bl	800460c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004462:	e7f1      	b.n	8004448 <prvTimerTask+0x8>

08004464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800446e:	f7ff fa5b 	bl	8003928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f866 	bl	8004548 <prvSampleTimeNow>
 800447c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d130      	bne.n	80044e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <prvProcessTimerOrBlockTask+0x3c>
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	429a      	cmp	r2, r3
 8004490:	d806      	bhi.n	80044a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004492:	f7ff fa57 	bl	8003944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff91 	bl	80043c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800449e:	e024      	b.n	80044ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <prvProcessTimerOrBlockTask+0x90>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <prvProcessTimerOrBlockTask+0x94>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f7fe ffcf 	bl	8003468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044ca:	f7ff fa3b 	bl	8003944 <xTaskResumeAll>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <prvProcessTimerOrBlockTask+0x98>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
}
 80044e4:	e001      	b.n	80044ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044e6:	f7ff fa2d 	bl	8003944 <xTaskResumeAll>
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000c7c 	.word	0x20000c7c
 80044f8:	20000c80 	.word	0x20000c80
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <prvGetNextExpireTime+0x44>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004526:	4b07      	ldr	r3, [pc, #28]	; (8004544 <prvGetNextExpireTime+0x44>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e001      	b.n	8004536 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000c78 	.word	0x20000c78

08004548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004550:	f7ff fa94 	bl	8003a7c <xTaskGetTickCount>
 8004554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <prvSampleTimeNow+0x3c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d205      	bcs.n	800456c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004560:	f000 f904 	bl	800476c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e002      	b.n	8004572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <prvSampleTimeNow+0x3c>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000c88 	.word	0x20000c88

08004588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d812      	bhi.n	80045d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e01b      	b.n	80045fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <prvInsertTimerInActiveList+0x7c>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe f98f 	bl	80028f0 <vListInsert>
 80045d2:	e012      	b.n	80045fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d206      	bcs.n	80045ea <prvInsertTimerInActiveList+0x62>
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e007      	b.n	80045fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <prvInsertTimerInActiveList+0x80>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fe f97b 	bl	80028f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045fa:	697b      	ldr	r3, [r7, #20]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000c7c 	.word	0x20000c7c
 8004608:	20000c78 	.word	0x20000c78

0800460c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	; 0x38
 8004610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004612:	e099      	b.n	8004748 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da17      	bge.n	800464a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	3304      	adds	r3, #4
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <prvProcessReceivedCommands+0x2e>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e7fe      	b.n	8004638 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004640:	6850      	ldr	r0, [r2, #4]
 8004642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004644:	6892      	ldr	r2, [r2, #8]
 8004646:	4611      	mov	r1, r2
 8004648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db7a      	blt.n	8004746 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe f97d 	bl	8002960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004666:	463b      	mov	r3, r7
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff6d 	bl	8004548 <prvSampleTimeNow>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b09      	cmp	r3, #9
 8004674:	d868      	bhi.n	8004748 <prvProcessReceivedCommands+0x13c>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <prvProcessReceivedCommands+0x70>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046a5 	.word	0x080046a5
 8004688:	08004749 	.word	0x08004749
 800468c:	080046ff 	.word	0x080046ff
 8004690:	08004735 	.word	0x08004735
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046a5 	.word	0x080046a5
 800469c:	08004749 	.word	0x08004749
 80046a0:	080046ff 	.word	0x080046ff
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	18d1      	adds	r1, r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b2:	f7ff ff69 	bl	8004588 <prvInsertTimerInActiveList>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d045      	beq.n	8004748 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d13d      	bne.n	8004748 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	441a      	add	r2, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f7ff fe23 	bl	8004328 <xTimerGenericCommand>
 80046e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d12e      	bne.n	8004748 <prvProcessReceivedCommands+0x13c>
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e7fe      	b.n	80046fc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <prvProcessReceivedCommands+0x114>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e7fe      	b.n	800471e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	18d1      	adds	r1, r2, r3
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472e:	f7ff ff2b 	bl	8004588 <prvInsertTimerInActiveList>
					break;
 8004732:	e009      	b.n	8004748 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800473e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004740:	f000 fb5a 	bl	8004df8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004744:	e000      	b.n	8004748 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004746:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <prvProcessReceivedCommands+0x15c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1d39      	adds	r1, r7, #4
 800474e:	2200      	movs	r2, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fbf7 	bl	8002f44 <xQueueReceive>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f af5b 	bne.w	8004614 <prvProcessReceivedCommands+0x8>
	}
}
 800475e:	bf00      	nop
 8004760:	3730      	adds	r7, #48	; 0x30
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000c80 	.word	0x20000c80

0800476c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004772:	e044      	b.n	80047fe <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <prvSwitchTimerLists+0xb8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <prvSwitchTimerLists+0xb8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3304      	adds	r3, #4
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe f8e7 	bl	8002960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d12d      	bne.n	80047fe <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d90e      	bls.n	80047d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047c0:	4b18      	ldr	r3, [pc, #96]	; (8004824 <prvSwitchTimerLists+0xb8>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fe f890 	bl	80028f0 <vListInsert>
 80047d0:	e015      	b.n	80047fe <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047d2:	2300      	movs	r3, #0
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	2100      	movs	r1, #0
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fda3 	bl	8004328 <xTimerGenericCommand>
 80047e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <prvSwitchTimerLists+0x92>
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	e7fe      	b.n	80047fc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <prvSwitchTimerLists+0xb8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1b5      	bne.n	8004774 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <prvSwitchTimerLists+0xb8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <prvSwitchTimerLists+0xbc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a04      	ldr	r2, [pc, #16]	; (8004824 <prvSwitchTimerLists+0xb8>)
 8004814:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <prvSwitchTimerLists+0xbc>)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6013      	str	r3, [r2, #0]
}
 800481c:	bf00      	nop
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000c78 	.word	0x20000c78
 8004828:	20000c7c 	.word	0x20000c7c

0800482c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004832:	f000 f929 	bl	8004a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <prvCheckForValidListAndQueue+0x60>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d120      	bne.n	8004880 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800483e:	4814      	ldr	r0, [pc, #80]	; (8004890 <prvCheckForValidListAndQueue+0x64>)
 8004840:	f7fe f808 	bl	8002854 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004844:	4813      	ldr	r0, [pc, #76]	; (8004894 <prvCheckForValidListAndQueue+0x68>)
 8004846:	f7fe f805 	bl	8002854 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <prvCheckForValidListAndQueue+0x6c>)
 800484c:	4a10      	ldr	r2, [pc, #64]	; (8004890 <prvCheckForValidListAndQueue+0x64>)
 800484e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <prvCheckForValidListAndQueue+0x70>)
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <prvCheckForValidListAndQueue+0x68>)
 8004854:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004856:	2300      	movs	r3, #0
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <prvCheckForValidListAndQueue+0x74>)
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <prvCheckForValidListAndQueue+0x78>)
 800485e:	2110      	movs	r1, #16
 8004860:	200a      	movs	r0, #10
 8004862:	f7fe f90f 	bl	8002a84 <xQueueGenericCreateStatic>
 8004866:	4602      	mov	r2, r0
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <prvCheckForValidListAndQueue+0x60>)
 800486a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <prvCheckForValidListAndQueue+0x60>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <prvCheckForValidListAndQueue+0x60>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	490b      	ldr	r1, [pc, #44]	; (80048a8 <prvCheckForValidListAndQueue+0x7c>)
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fdcc 	bl	8003418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004880:	f000 f930 	bl	8004ae4 <vPortExitCritical>
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000c80 	.word	0x20000c80
 8004890:	20000c50 	.word	0x20000c50
 8004894:	20000c64 	.word	0x20000c64
 8004898:	20000c78 	.word	0x20000c78
 800489c:	20000c7c 	.word	0x20000c7c
 80048a0:	20000d2c 	.word	0x20000d2c
 80048a4:	20000c8c 	.word	0x20000c8c
 80048a8:	08005944 	.word	0x08005944

080048ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b04      	subs	r3, #4
 80048bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b04      	subs	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048dc:	4a08      	ldr	r2, [pc, #32]	; (8004900 <pxPortInitialiseStack+0x54>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b14      	subs	r3, #20
 80048e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b20      	subs	r3, #32
 80048f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	08004905 	.word	0x08004905

08004904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <prvTaskExitError+0x4c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004916:	d009      	beq.n	800492c <prvTaskExitError+0x28>
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e7fe      	b.n	800492a <prvTaskExitError+0x26>
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800493e:	bf00      	nop
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0fc      	beq.n	8004940 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	2000000c 	.word	0x2000000c
	...

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	f04e 0e0d 	orr.w	lr, lr, #13
 800497e:	4770      	bx	lr

08004980 <pxCurrentTCBConst2>:
 8004980:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004988:	4806      	ldr	r0, [pc, #24]	; (80049a4 <prvPortStartFirstTask+0x1c>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	b662      	cpsie	i
 8004994:	b661      	cpsie	f
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	df00      	svc	0
 80049a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049a2:	bf00      	nop
 80049a4:	e000ed08 	.word	0xe000ed08

080049a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <xPortStartScheduler+0xcc>)
 80049b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	22ff      	movs	r2, #255	; 0xff
 80049be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <xPortStartScheduler+0xd0>)
 80049d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <xPortStartScheduler+0xd4>)
 80049d8:	2207      	movs	r2, #7
 80049da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049dc:	e009      	b.n	80049f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <xPortStartScheduler+0xd4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <xPortStartScheduler+0xd4>)
 80049e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d0ef      	beq.n	80049de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <xPortStartScheduler+0xd4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f1c3 0307 	rsb	r3, r3, #7
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d009      	beq.n	8004a1e <xPortStartScheduler+0x76>
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	e7fe      	b.n	8004a1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <xPortStartScheduler+0xd4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <xPortStartScheduler+0xd4>)
 8004a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <xPortStartScheduler+0xd4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a30:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <xPortStartScheduler+0xd4>)
 8004a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <xPortStartScheduler+0xd8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <xPortStartScheduler+0xd8>)
 8004a42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <xPortStartScheduler+0xd8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <xPortStartScheduler+0xd8>)
 8004a4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a54:	f000 f8b0 	bl	8004bb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <xPortStartScheduler+0xdc>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a5e:	f7ff ff93 	bl	8004988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a62:	f7ff f8d7 	bl	8003c14 <vTaskSwitchContext>
	prvTaskExitError();
 8004a66:	f7ff ff4d 	bl	8004904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	e000e400 	.word	0xe000e400
 8004a78:	20000d7c 	.word	0x20000d7c
 8004a7c:	20000d80 	.word	0x20000d80
 8004a80:	e000ed20 	.word	0xe000ed20
 8004a84:	2000000c 	.word	0x2000000c

08004a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <vPortEnterCritical+0x54>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <vPortEnterCritical+0x54>)
 8004aa8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <vPortEnterCritical+0x54>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10e      	bne.n	8004ad0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <vPortEnterCritical+0x58>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <vPortEnterCritical+0x48>
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	e7fe      	b.n	8004ace <vPortEnterCritical+0x46>
	}
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000000c 	.word	0x2000000c
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <vPortExitCritical+0x48>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <vPortExitCritical+0x22>
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	e7fe      	b.n	8004b04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <vPortExitCritical+0x48>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <vPortExitCritical+0x48>)
 8004b0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <vPortExitCritical+0x48>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <vPortExitCritical+0x3e>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b30:	f3ef 8009 	mrs	r0, PSP
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <pxCurrentTCBConst>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b40:	6010      	str	r0, [r2, #0]
 8004b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b4a:	f380 8811 	msr	BASEPRI, r0
 8004b4e:	f7ff f861 	bl	8003c14 <vTaskSwitchContext>
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8811 	msr	BASEPRI, r0
 8004b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	6808      	ldr	r0, [r1, #0]
 8004b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b66:	f380 8809 	msr	PSP, r0
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	4770      	bx	lr

08004b70 <pxCurrentTCBConst>:
 8004b70:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop

08004b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b90:	f7fe ff82 	bl	8003a98 <xTaskIncrementTick>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <SysTick_Handler+0x3c>)
 8004b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <vPortSetupTimerInterrupt+0x30>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <vPortSetupTimerInterrupt+0x34>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <vPortSetupTimerInterrupt+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <vPortSetupTimerInterrupt+0x3c>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <vPortSetupTimerInterrupt+0x40>)
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bda:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <vPortSetupTimerInterrupt+0x30>)
 8004bdc:	2207      	movs	r2, #7
 8004bde:	601a      	str	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr
 8004be8:	e000e010 	.word	0xe000e010
 8004bec:	e000e018 	.word	0xe000e018
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	10624dd3 	.word	0x10624dd3
 8004bf8:	e000e014 	.word	0xe000e014

08004bfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c02:	f3ef 8305 	mrs	r3, IPSR
 8004c06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b0f      	cmp	r3, #15
 8004c0c:	d913      	bls.n	8004c36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <vPortValidateInterruptPriority+0x68>)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <vPortValidateInterruptPriority+0x6c>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	7afa      	ldrb	r2, [r7, #11]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d209      	bcs.n	8004c36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	e7fe      	b.n	8004c34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <vPortValidateInterruptPriority+0x70>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <vPortValidateInterruptPriority+0x74>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d909      	bls.n	8004c5a <vPortValidateInterruptPriority+0x5e>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	e7fe      	b.n	8004c58 <vPortValidateInterruptPriority+0x5c>
	}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	e000e3f0 	.word	0xe000e3f0
 8004c68:	20000d7c 	.word	0x20000d7c
 8004c6c:	e000ed0c 	.word	0xe000ed0c
 8004c70:	20000d80 	.word	0x20000d80

08004c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c80:	f7fe fe52 	bl	8003928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c84:	4b57      	ldr	r3, [pc, #348]	; (8004de4 <pvPortMalloc+0x170>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c8c:	f000 f90c 	bl	8004ea8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c90:	4b55      	ldr	r3, [pc, #340]	; (8004de8 <pvPortMalloc+0x174>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f040 808c 	bne.w	8004db6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d013      	beq.n	8004cde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f023 0307 	bic.w	r3, r3, #7
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <pvPortMalloc+0x6a>
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e7fe      	b.n	8004cdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d068      	beq.n	8004db6 <pvPortMalloc+0x142>
 8004ce4:	4b41      	ldr	r3, [pc, #260]	; (8004dec <pvPortMalloc+0x178>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d863      	bhi.n	8004db6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cee:	4b40      	ldr	r3, [pc, #256]	; (8004df0 <pvPortMalloc+0x17c>)
 8004cf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <pvPortMalloc+0x17c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cf8:	e004      	b.n	8004d04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d903      	bls.n	8004d16 <pvPortMalloc+0xa2>
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f1      	bne.n	8004cfa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d16:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <pvPortMalloc+0x170>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d04a      	beq.n	8004db6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2208      	movs	r2, #8
 8004d26:	4413      	add	r3, r2
 8004d28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad2      	subs	r2, r2, r3
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d91e      	bls.n	8004d80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4413      	add	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <pvPortMalloc+0xf4>
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e7fe      	b.n	8004d66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d7a:	69b8      	ldr	r0, [r7, #24]
 8004d7c:	f000 f8f6 	bl	8004f6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <pvPortMalloc+0x178>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <pvPortMalloc+0x178>)
 8004d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <pvPortMalloc+0x178>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <pvPortMalloc+0x180>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d203      	bcs.n	8004da2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d9a:	4b14      	ldr	r3, [pc, #80]	; (8004dec <pvPortMalloc+0x178>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a15      	ldr	r2, [pc, #84]	; (8004df4 <pvPortMalloc+0x180>)
 8004da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <pvPortMalloc+0x174>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004db6:	f7fe fdc5 	bl	8003944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <pvPortMalloc+0x164>
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e7fe      	b.n	8004dd6 <pvPortMalloc+0x162>
	return pvReturn;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3728      	adds	r7, #40	; 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000198c 	.word	0x2000198c
 8004de8:	20001998 	.word	0x20001998
 8004dec:	20001990 	.word	0x20001990
 8004df0:	20001984 	.word	0x20001984
 8004df4:	20001994 	.word	0x20001994

08004df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d046      	beq.n	8004e98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4413      	add	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <vPortFree+0xa8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <vPortFree+0x42>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e7fe      	b.n	8004e38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <vPortFree+0x5e>
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	e7fe      	b.n	8004e54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <vPortFree+0xa8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d019      	beq.n	8004e98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d115      	bne.n	8004e98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <vPortFree+0xa8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	401a      	ands	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e7c:	f7fe fd54 	bl	8003928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <vPortFree+0xac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	4a06      	ldr	r2, [pc, #24]	; (8004ea4 <vPortFree+0xac>)
 8004e8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e8e:	6938      	ldr	r0, [r7, #16]
 8004e90:	f000 f86c 	bl	8004f6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e94:	f7fe fd56 	bl	8003944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20001998 	.word	0x20001998
 8004ea4:	20001990 	.word	0x20001990

08004ea8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004eb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eb4:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <prvHeapInit+0xac>)
 8004eb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3307      	adds	r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <prvHeapInit+0xac>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <prvHeapInit+0xb0>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <prvHeapInit+0xb0>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <prvHeapInit+0xb4>)
 8004f08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <prvHeapInit+0xb4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <prvHeapInit+0xb4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <prvHeapInit+0xb4>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <prvHeapInit+0xb8>)
 8004f36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <prvHeapInit+0xbc>)
 8004f3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f40:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <prvHeapInit+0xc0>)
 8004f42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000d84 	.word	0x20000d84
 8004f58:	20001984 	.word	0x20001984
 8004f5c:	2000198c 	.word	0x2000198c
 8004f60:	20001994 	.word	0x20001994
 8004f64:	20001990 	.word	0x20001990
 8004f68:	20001998 	.word	0x20001998

08004f6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f74:	4b27      	ldr	r3, [pc, #156]	; (8005014 <prvInsertBlockIntoFreeList+0xa8>)
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e002      	b.n	8004f80 <prvInsertBlockIntoFreeList+0x14>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d8f7      	bhi.n	8004f7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d108      	bne.n	8004fae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	441a      	add	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d118      	bne.n	8004ff4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <prvInsertBlockIntoFreeList+0xac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d00d      	beq.n	8004fea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e008      	b.n	8004ffc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <prvInsertBlockIntoFreeList+0xac>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e003      	b.n	8004ffc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d002      	beq.n	800500a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	20001984 	.word	0x20001984
 8005018:	2000198c 	.word	0x2000198c

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000010 	.word	0x20000010

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	2500      	movs	r5, #0
 800502c:	4e0c      	ldr	r6, [pc, #48]	; (8005060 <__libc_init_array+0x38>)
 800502e:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 8005030:	1ba4      	subs	r4, r4, r6
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	42a5      	cmp	r5, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	f000 fc36 	bl	80058a8 <_init>
 800503c:	2500      	movs	r5, #0
 800503e:	4e0a      	ldr	r6, [pc, #40]	; (8005068 <__libc_init_array+0x40>)
 8005040:	4c0a      	ldr	r4, [pc, #40]	; (800506c <__libc_init_array+0x44>)
 8005042:	1ba4      	subs	r4, r4, r6
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	42a5      	cmp	r5, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005050:	4798      	blx	r3
 8005052:	3501      	adds	r5, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800505a:	4798      	blx	r3
 800505c:	3501      	adds	r5, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	08005a10 	.word	0x08005a10
 8005064:	08005a10 	.word	0x08005a10
 8005068:	08005a10 	.word	0x08005a10
 800506c:	08005a14 	.word	0x08005a14

08005070 <memcpy>:
 8005070:	b510      	push	{r4, lr}
 8005072:	1e43      	subs	r3, r0, #1
 8005074:	440a      	add	r2, r1
 8005076:	4291      	cmp	r1, r2
 8005078:	d100      	bne.n	800507c <memcpy+0xc>
 800507a:	bd10      	pop	{r4, pc}
 800507c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005084:	e7f7      	b.n	8005076 <memcpy+0x6>

08005086 <memset>:
 8005086:	4603      	mov	r3, r0
 8005088:	4402      	add	r2, r0
 800508a:	4293      	cmp	r3, r2
 800508c:	d100      	bne.n	8005090 <memset+0xa>
 800508e:	4770      	bx	lr
 8005090:	f803 1b01 	strb.w	r1, [r3], #1
 8005094:	e7f9      	b.n	800508a <memset+0x4>
	...

08005098 <siprintf>:
 8005098:	b40e      	push	{r1, r2, r3}
 800509a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800509e:	b500      	push	{lr}
 80050a0:	b09c      	sub	sp, #112	; 0x70
 80050a2:	ab1d      	add	r3, sp, #116	; 0x74
 80050a4:	9002      	str	r0, [sp, #8]
 80050a6:	9006      	str	r0, [sp, #24]
 80050a8:	9107      	str	r1, [sp, #28]
 80050aa:	9104      	str	r1, [sp, #16]
 80050ac:	4808      	ldr	r0, [pc, #32]	; (80050d0 <siprintf+0x38>)
 80050ae:	4909      	ldr	r1, [pc, #36]	; (80050d4 <siprintf+0x3c>)
 80050b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b4:	9105      	str	r1, [sp, #20]
 80050b6:	6800      	ldr	r0, [r0, #0]
 80050b8:	a902      	add	r1, sp, #8
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	f000 f866 	bl	800518c <_svfiprintf_r>
 80050c0:	2200      	movs	r2, #0
 80050c2:	9b02      	ldr	r3, [sp, #8]
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	b01c      	add	sp, #112	; 0x70
 80050c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050cc:	b003      	add	sp, #12
 80050ce:	4770      	bx	lr
 80050d0:	20000010 	.word	0x20000010
 80050d4:	ffff0208 	.word	0xffff0208

080050d8 <__ssputs_r>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	688e      	ldr	r6, [r1, #8]
 80050de:	4682      	mov	sl, r0
 80050e0:	429e      	cmp	r6, r3
 80050e2:	460c      	mov	r4, r1
 80050e4:	4690      	mov	r8, r2
 80050e6:	4699      	mov	r9, r3
 80050e8:	d837      	bhi.n	800515a <__ssputs_r+0x82>
 80050ea:	898a      	ldrh	r2, [r1, #12]
 80050ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050f0:	d031      	beq.n	8005156 <__ssputs_r+0x7e>
 80050f2:	2302      	movs	r3, #2
 80050f4:	6825      	ldr	r5, [r4, #0]
 80050f6:	6909      	ldr	r1, [r1, #16]
 80050f8:	1a6f      	subs	r7, r5, r1
 80050fa:	6965      	ldr	r5, [r4, #20]
 80050fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005100:	fb95 f5f3 	sdiv	r5, r5, r3
 8005104:	f109 0301 	add.w	r3, r9, #1
 8005108:	443b      	add	r3, r7
 800510a:	429d      	cmp	r5, r3
 800510c:	bf38      	it	cc
 800510e:	461d      	movcc	r5, r3
 8005110:	0553      	lsls	r3, r2, #21
 8005112:	d530      	bpl.n	8005176 <__ssputs_r+0x9e>
 8005114:	4629      	mov	r1, r5
 8005116:	f000 fb2d 	bl	8005774 <_malloc_r>
 800511a:	4606      	mov	r6, r0
 800511c:	b950      	cbnz	r0, 8005134 <__ssputs_r+0x5c>
 800511e:	230c      	movs	r3, #12
 8005120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005124:	f8ca 3000 	str.w	r3, [sl]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005134:	463a      	mov	r2, r7
 8005136:	6921      	ldr	r1, [r4, #16]
 8005138:	f7ff ff9a 	bl	8005070 <memcpy>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	6126      	str	r6, [r4, #16]
 800514a:	443e      	add	r6, r7
 800514c:	6026      	str	r6, [r4, #0]
 800514e:	464e      	mov	r6, r9
 8005150:	6165      	str	r5, [r4, #20]
 8005152:	1bed      	subs	r5, r5, r7
 8005154:	60a5      	str	r5, [r4, #8]
 8005156:	454e      	cmp	r6, r9
 8005158:	d900      	bls.n	800515c <__ssputs_r+0x84>
 800515a:	464e      	mov	r6, r9
 800515c:	4632      	mov	r2, r6
 800515e:	4641      	mov	r1, r8
 8005160:	6820      	ldr	r0, [r4, #0]
 8005162:	f000 faa1 	bl	80056a8 <memmove>
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	2000      	movs	r0, #0
 800516a:	1b9b      	subs	r3, r3, r6
 800516c:	60a3      	str	r3, [r4, #8]
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	441e      	add	r6, r3
 8005172:	6026      	str	r6, [r4, #0]
 8005174:	e7dc      	b.n	8005130 <__ssputs_r+0x58>
 8005176:	462a      	mov	r2, r5
 8005178:	f000 fb56 	bl	8005828 <_realloc_r>
 800517c:	4606      	mov	r6, r0
 800517e:	2800      	cmp	r0, #0
 8005180:	d1e2      	bne.n	8005148 <__ssputs_r+0x70>
 8005182:	6921      	ldr	r1, [r4, #16]
 8005184:	4650      	mov	r0, sl
 8005186:	f000 faa9 	bl	80056dc <_free_r>
 800518a:	e7c8      	b.n	800511e <__ssputs_r+0x46>

0800518c <_svfiprintf_r>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	461d      	mov	r5, r3
 8005192:	898b      	ldrh	r3, [r1, #12]
 8005194:	b09d      	sub	sp, #116	; 0x74
 8005196:	061f      	lsls	r7, r3, #24
 8005198:	4680      	mov	r8, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4616      	mov	r6, r2
 800519e:	d50f      	bpl.n	80051c0 <_svfiprintf_r+0x34>
 80051a0:	690b      	ldr	r3, [r1, #16]
 80051a2:	b96b      	cbnz	r3, 80051c0 <_svfiprintf_r+0x34>
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	f000 fae5 	bl	8005774 <_malloc_r>
 80051aa:	6020      	str	r0, [r4, #0]
 80051ac:	6120      	str	r0, [r4, #16]
 80051ae:	b928      	cbnz	r0, 80051bc <_svfiprintf_r+0x30>
 80051b0:	230c      	movs	r3, #12
 80051b2:	f8c8 3000 	str.w	r3, [r8]
 80051b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ba:	e0c8      	b.n	800534e <_svfiprintf_r+0x1c2>
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	6163      	str	r3, [r4, #20]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9309      	str	r3, [sp, #36]	; 0x24
 80051c4:	2320      	movs	r3, #32
 80051c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ca:	2330      	movs	r3, #48	; 0x30
 80051cc:	f04f 0b01 	mov.w	fp, #1
 80051d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051d4:	9503      	str	r5, [sp, #12]
 80051d6:	4637      	mov	r7, r6
 80051d8:	463d      	mov	r5, r7
 80051da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051de:	b10b      	cbz	r3, 80051e4 <_svfiprintf_r+0x58>
 80051e0:	2b25      	cmp	r3, #37	; 0x25
 80051e2:	d13e      	bne.n	8005262 <_svfiprintf_r+0xd6>
 80051e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80051e8:	d00b      	beq.n	8005202 <_svfiprintf_r+0x76>
 80051ea:	4653      	mov	r3, sl
 80051ec:	4632      	mov	r2, r6
 80051ee:	4621      	mov	r1, r4
 80051f0:	4640      	mov	r0, r8
 80051f2:	f7ff ff71 	bl	80050d8 <__ssputs_r>
 80051f6:	3001      	adds	r0, #1
 80051f8:	f000 80a4 	beq.w	8005344 <_svfiprintf_r+0x1b8>
 80051fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fe:	4453      	add	r3, sl
 8005200:	9309      	str	r3, [sp, #36]	; 0x24
 8005202:	783b      	ldrb	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 809d 	beq.w	8005344 <_svfiprintf_r+0x1b8>
 800520a:	2300      	movs	r3, #0
 800520c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	9307      	str	r3, [sp, #28]
 8005218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521c:	931a      	str	r3, [sp, #104]	; 0x68
 800521e:	462f      	mov	r7, r5
 8005220:	2205      	movs	r2, #5
 8005222:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005226:	4850      	ldr	r0, [pc, #320]	; (8005368 <_svfiprintf_r+0x1dc>)
 8005228:	f000 fa30 	bl	800568c <memchr>
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	b9d0      	cbnz	r0, 8005266 <_svfiprintf_r+0xda>
 8005230:	06d9      	lsls	r1, r3, #27
 8005232:	bf44      	itt	mi
 8005234:	2220      	movmi	r2, #32
 8005236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800523a:	071a      	lsls	r2, r3, #28
 800523c:	bf44      	itt	mi
 800523e:	222b      	movmi	r2, #43	; 0x2b
 8005240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005244:	782a      	ldrb	r2, [r5, #0]
 8005246:	2a2a      	cmp	r2, #42	; 0x2a
 8005248:	d015      	beq.n	8005276 <_svfiprintf_r+0xea>
 800524a:	462f      	mov	r7, r5
 800524c:	2000      	movs	r0, #0
 800524e:	250a      	movs	r5, #10
 8005250:	9a07      	ldr	r2, [sp, #28]
 8005252:	4639      	mov	r1, r7
 8005254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005258:	3b30      	subs	r3, #48	; 0x30
 800525a:	2b09      	cmp	r3, #9
 800525c:	d94d      	bls.n	80052fa <_svfiprintf_r+0x16e>
 800525e:	b1b8      	cbz	r0, 8005290 <_svfiprintf_r+0x104>
 8005260:	e00f      	b.n	8005282 <_svfiprintf_r+0xf6>
 8005262:	462f      	mov	r7, r5
 8005264:	e7b8      	b.n	80051d8 <_svfiprintf_r+0x4c>
 8005266:	4a40      	ldr	r2, [pc, #256]	; (8005368 <_svfiprintf_r+0x1dc>)
 8005268:	463d      	mov	r5, r7
 800526a:	1a80      	subs	r0, r0, r2
 800526c:	fa0b f000 	lsl.w	r0, fp, r0
 8005270:	4318      	orrs	r0, r3
 8005272:	9004      	str	r0, [sp, #16]
 8005274:	e7d3      	b.n	800521e <_svfiprintf_r+0x92>
 8005276:	9a03      	ldr	r2, [sp, #12]
 8005278:	1d11      	adds	r1, r2, #4
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	9103      	str	r1, [sp, #12]
 800527e:	2a00      	cmp	r2, #0
 8005280:	db01      	blt.n	8005286 <_svfiprintf_r+0xfa>
 8005282:	9207      	str	r2, [sp, #28]
 8005284:	e004      	b.n	8005290 <_svfiprintf_r+0x104>
 8005286:	4252      	negs	r2, r2
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	9207      	str	r2, [sp, #28]
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	783b      	ldrb	r3, [r7, #0]
 8005292:	2b2e      	cmp	r3, #46	; 0x2e
 8005294:	d10c      	bne.n	80052b0 <_svfiprintf_r+0x124>
 8005296:	787b      	ldrb	r3, [r7, #1]
 8005298:	2b2a      	cmp	r3, #42	; 0x2a
 800529a:	d133      	bne.n	8005304 <_svfiprintf_r+0x178>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	3702      	adds	r7, #2
 80052a0:	1d1a      	adds	r2, r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	9203      	str	r2, [sp, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	4d2e      	ldr	r5, [pc, #184]	; (800536c <_svfiprintf_r+0x1e0>)
 80052b2:	2203      	movs	r2, #3
 80052b4:	7839      	ldrb	r1, [r7, #0]
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f9e8 	bl	800568c <memchr>
 80052bc:	b138      	cbz	r0, 80052ce <_svfiprintf_r+0x142>
 80052be:	2340      	movs	r3, #64	; 0x40
 80052c0:	1b40      	subs	r0, r0, r5
 80052c2:	fa03 f000 	lsl.w	r0, r3, r0
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	3701      	adds	r7, #1
 80052ca:	4303      	orrs	r3, r0
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	7839      	ldrb	r1, [r7, #0]
 80052d0:	2206      	movs	r2, #6
 80052d2:	4827      	ldr	r0, [pc, #156]	; (8005370 <_svfiprintf_r+0x1e4>)
 80052d4:	1c7e      	adds	r6, r7, #1
 80052d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052da:	f000 f9d7 	bl	800568c <memchr>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d038      	beq.n	8005354 <_svfiprintf_r+0x1c8>
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <_svfiprintf_r+0x1e8>)
 80052e4:	bb13      	cbnz	r3, 800532c <_svfiprintf_r+0x1a0>
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	3307      	adds	r3, #7
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	3308      	adds	r3, #8
 80052f0:	9303      	str	r3, [sp, #12]
 80052f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f4:	444b      	add	r3, r9
 80052f6:	9309      	str	r3, [sp, #36]	; 0x24
 80052f8:	e76d      	b.n	80051d6 <_svfiprintf_r+0x4a>
 80052fa:	fb05 3202 	mla	r2, r5, r2, r3
 80052fe:	2001      	movs	r0, #1
 8005300:	460f      	mov	r7, r1
 8005302:	e7a6      	b.n	8005252 <_svfiprintf_r+0xc6>
 8005304:	2300      	movs	r3, #0
 8005306:	250a      	movs	r5, #10
 8005308:	4619      	mov	r1, r3
 800530a:	3701      	adds	r7, #1
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	4638      	mov	r0, r7
 8005310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005314:	3a30      	subs	r2, #48	; 0x30
 8005316:	2a09      	cmp	r2, #9
 8005318:	d903      	bls.n	8005322 <_svfiprintf_r+0x196>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0c8      	beq.n	80052b0 <_svfiprintf_r+0x124>
 800531e:	9105      	str	r1, [sp, #20]
 8005320:	e7c6      	b.n	80052b0 <_svfiprintf_r+0x124>
 8005322:	fb05 2101 	mla	r1, r5, r1, r2
 8005326:	2301      	movs	r3, #1
 8005328:	4607      	mov	r7, r0
 800532a:	e7f0      	b.n	800530e <_svfiprintf_r+0x182>
 800532c:	ab03      	add	r3, sp, #12
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	4622      	mov	r2, r4
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <_svfiprintf_r+0x1ec>)
 8005334:	a904      	add	r1, sp, #16
 8005336:	4640      	mov	r0, r8
 8005338:	f3af 8000 	nop.w
 800533c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005340:	4681      	mov	r9, r0
 8005342:	d1d6      	bne.n	80052f2 <_svfiprintf_r+0x166>
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	065b      	lsls	r3, r3, #25
 8005348:	f53f af35 	bmi.w	80051b6 <_svfiprintf_r+0x2a>
 800534c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800534e:	b01d      	add	sp, #116	; 0x74
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	ab03      	add	r3, sp, #12
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4622      	mov	r2, r4
 800535a:	4b07      	ldr	r3, [pc, #28]	; (8005378 <_svfiprintf_r+0x1ec>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	4640      	mov	r0, r8
 8005360:	f000 f882 	bl	8005468 <_printf_i>
 8005364:	e7ea      	b.n	800533c <_svfiprintf_r+0x1b0>
 8005366:	bf00      	nop
 8005368:	080059dc 	.word	0x080059dc
 800536c:	080059e2 	.word	0x080059e2
 8005370:	080059e6 	.word	0x080059e6
 8005374:	00000000 	.word	0x00000000
 8005378:	080050d9 	.word	0x080050d9

0800537c <_printf_common>:
 800537c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	4691      	mov	r9, r2
 8005382:	461f      	mov	r7, r3
 8005384:	688a      	ldr	r2, [r1, #8]
 8005386:	690b      	ldr	r3, [r1, #16]
 8005388:	4606      	mov	r6, r0
 800538a:	4293      	cmp	r3, r2
 800538c:	bfb8      	it	lt
 800538e:	4613      	movlt	r3, r2
 8005390:	f8c9 3000 	str.w	r3, [r9]
 8005394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005398:	460c      	mov	r4, r1
 800539a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800539e:	b112      	cbz	r2, 80053a6 <_printf_common+0x2a>
 80053a0:	3301      	adds	r3, #1
 80053a2:	f8c9 3000 	str.w	r3, [r9]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	0699      	lsls	r1, r3, #26
 80053aa:	bf42      	ittt	mi
 80053ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053b0:	3302      	addmi	r3, #2
 80053b2:	f8c9 3000 	strmi.w	r3, [r9]
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	f015 0506 	ands.w	r5, r5, #6
 80053bc:	d107      	bne.n	80053ce <_printf_common+0x52>
 80053be:	f104 0a19 	add.w	sl, r4, #25
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	f8d9 2000 	ldr.w	r2, [r9]
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	42ab      	cmp	r3, r5
 80053cc:	dc29      	bgt.n	8005422 <_printf_common+0xa6>
 80053ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	3300      	adds	r3, #0
 80053d6:	bf18      	it	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	0692      	lsls	r2, r2, #26
 80053dc:	d42e      	bmi.n	800543c <_printf_common+0xc0>
 80053de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e2:	4639      	mov	r1, r7
 80053e4:	4630      	mov	r0, r6
 80053e6:	47c0      	blx	r8
 80053e8:	3001      	adds	r0, #1
 80053ea:	d021      	beq.n	8005430 <_printf_common+0xb4>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	68e5      	ldr	r5, [r4, #12]
 80053f0:	f003 0306 	and.w	r3, r3, #6
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	bf18      	it	ne
 80053f8:	2500      	movne	r5, #0
 80053fa:	f8d9 2000 	ldr.w	r2, [r9]
 80053fe:	f04f 0900 	mov.w	r9, #0
 8005402:	bf08      	it	eq
 8005404:	1aad      	subeq	r5, r5, r2
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	6922      	ldr	r2, [r4, #16]
 800540a:	bf08      	it	eq
 800540c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005410:	4293      	cmp	r3, r2
 8005412:	bfc4      	itt	gt
 8005414:	1a9b      	subgt	r3, r3, r2
 8005416:	18ed      	addgt	r5, r5, r3
 8005418:	341a      	adds	r4, #26
 800541a:	454d      	cmp	r5, r9
 800541c:	d11a      	bne.n	8005454 <_printf_common+0xd8>
 800541e:	2000      	movs	r0, #0
 8005420:	e008      	b.n	8005434 <_printf_common+0xb8>
 8005422:	2301      	movs	r3, #1
 8005424:	4652      	mov	r2, sl
 8005426:	4639      	mov	r1, r7
 8005428:	4630      	mov	r0, r6
 800542a:	47c0      	blx	r8
 800542c:	3001      	adds	r0, #1
 800542e:	d103      	bne.n	8005438 <_printf_common+0xbc>
 8005430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005438:	3501      	adds	r5, #1
 800543a:	e7c2      	b.n	80053c2 <_printf_common+0x46>
 800543c:	2030      	movs	r0, #48	; 0x30
 800543e:	18e1      	adds	r1, r4, r3
 8005440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800544a:	4422      	add	r2, r4
 800544c:	3302      	adds	r3, #2
 800544e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005452:	e7c4      	b.n	80053de <_printf_common+0x62>
 8005454:	2301      	movs	r3, #1
 8005456:	4622      	mov	r2, r4
 8005458:	4639      	mov	r1, r7
 800545a:	4630      	mov	r0, r6
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d0e6      	beq.n	8005430 <_printf_common+0xb4>
 8005462:	f109 0901 	add.w	r9, r9, #1
 8005466:	e7d8      	b.n	800541a <_printf_common+0x9e>

08005468 <_printf_i>:
 8005468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800546c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005470:	460c      	mov	r4, r1
 8005472:	7e09      	ldrb	r1, [r1, #24]
 8005474:	b085      	sub	sp, #20
 8005476:	296e      	cmp	r1, #110	; 0x6e
 8005478:	4617      	mov	r7, r2
 800547a:	4606      	mov	r6, r0
 800547c:	4698      	mov	r8, r3
 800547e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005480:	f000 80b3 	beq.w	80055ea <_printf_i+0x182>
 8005484:	d822      	bhi.n	80054cc <_printf_i+0x64>
 8005486:	2963      	cmp	r1, #99	; 0x63
 8005488:	d036      	beq.n	80054f8 <_printf_i+0x90>
 800548a:	d80a      	bhi.n	80054a2 <_printf_i+0x3a>
 800548c:	2900      	cmp	r1, #0
 800548e:	f000 80b9 	beq.w	8005604 <_printf_i+0x19c>
 8005492:	2958      	cmp	r1, #88	; 0x58
 8005494:	f000 8083 	beq.w	800559e <_printf_i+0x136>
 8005498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800549c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054a0:	e032      	b.n	8005508 <_printf_i+0xa0>
 80054a2:	2964      	cmp	r1, #100	; 0x64
 80054a4:	d001      	beq.n	80054aa <_printf_i+0x42>
 80054a6:	2969      	cmp	r1, #105	; 0x69
 80054a8:	d1f6      	bne.n	8005498 <_printf_i+0x30>
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	6813      	ldr	r3, [r2, #0]
 80054ae:	0605      	lsls	r5, r0, #24
 80054b0:	f103 0104 	add.w	r1, r3, #4
 80054b4:	d52a      	bpl.n	800550c <_printf_i+0xa4>
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da03      	bge.n	80054c6 <_printf_i+0x5e>
 80054be:	222d      	movs	r2, #45	; 0x2d
 80054c0:	425b      	negs	r3, r3
 80054c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054c6:	486f      	ldr	r0, [pc, #444]	; (8005684 <_printf_i+0x21c>)
 80054c8:	220a      	movs	r2, #10
 80054ca:	e039      	b.n	8005540 <_printf_i+0xd8>
 80054cc:	2973      	cmp	r1, #115	; 0x73
 80054ce:	f000 809d 	beq.w	800560c <_printf_i+0x1a4>
 80054d2:	d808      	bhi.n	80054e6 <_printf_i+0x7e>
 80054d4:	296f      	cmp	r1, #111	; 0x6f
 80054d6:	d020      	beq.n	800551a <_printf_i+0xb2>
 80054d8:	2970      	cmp	r1, #112	; 0x70
 80054da:	d1dd      	bne.n	8005498 <_printf_i+0x30>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	f043 0320 	orr.w	r3, r3, #32
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	e003      	b.n	80054ee <_printf_i+0x86>
 80054e6:	2975      	cmp	r1, #117	; 0x75
 80054e8:	d017      	beq.n	800551a <_printf_i+0xb2>
 80054ea:	2978      	cmp	r1, #120	; 0x78
 80054ec:	d1d4      	bne.n	8005498 <_printf_i+0x30>
 80054ee:	2378      	movs	r3, #120	; 0x78
 80054f0:	4865      	ldr	r0, [pc, #404]	; (8005688 <_printf_i+0x220>)
 80054f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054f6:	e055      	b.n	80055a4 <_printf_i+0x13c>
 80054f8:	6813      	ldr	r3, [r2, #0]
 80054fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054fe:	1d19      	adds	r1, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6011      	str	r1, [r2, #0]
 8005504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005508:	2301      	movs	r3, #1
 800550a:	e08c      	b.n	8005626 <_printf_i+0x1be>
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005512:	6011      	str	r1, [r2, #0]
 8005514:	bf18      	it	ne
 8005516:	b21b      	sxthne	r3, r3
 8005518:	e7cf      	b.n	80054ba <_printf_i+0x52>
 800551a:	6813      	ldr	r3, [r2, #0]
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	1d18      	adds	r0, r3, #4
 8005520:	6010      	str	r0, [r2, #0]
 8005522:	0628      	lsls	r0, r5, #24
 8005524:	d501      	bpl.n	800552a <_printf_i+0xc2>
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	e002      	b.n	8005530 <_printf_i+0xc8>
 800552a:	0668      	lsls	r0, r5, #25
 800552c:	d5fb      	bpl.n	8005526 <_printf_i+0xbe>
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	296f      	cmp	r1, #111	; 0x6f
 8005532:	bf14      	ite	ne
 8005534:	220a      	movne	r2, #10
 8005536:	2208      	moveq	r2, #8
 8005538:	4852      	ldr	r0, [pc, #328]	; (8005684 <_printf_i+0x21c>)
 800553a:	2100      	movs	r1, #0
 800553c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005540:	6865      	ldr	r5, [r4, #4]
 8005542:	2d00      	cmp	r5, #0
 8005544:	60a5      	str	r5, [r4, #8]
 8005546:	f2c0 8095 	blt.w	8005674 <_printf_i+0x20c>
 800554a:	6821      	ldr	r1, [r4, #0]
 800554c:	f021 0104 	bic.w	r1, r1, #4
 8005550:	6021      	str	r1, [r4, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d13d      	bne.n	80055d2 <_printf_i+0x16a>
 8005556:	2d00      	cmp	r5, #0
 8005558:	f040 808e 	bne.w	8005678 <_printf_i+0x210>
 800555c:	4665      	mov	r5, ip
 800555e:	2a08      	cmp	r2, #8
 8005560:	d10b      	bne.n	800557a <_printf_i+0x112>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	07db      	lsls	r3, r3, #31
 8005566:	d508      	bpl.n	800557a <_printf_i+0x112>
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	bfde      	ittt	le
 8005570:	2330      	movle	r3, #48	; 0x30
 8005572:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005576:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800557a:	ebac 0305 	sub.w	r3, ip, r5
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	f8cd 8000 	str.w	r8, [sp]
 8005584:	463b      	mov	r3, r7
 8005586:	aa03      	add	r2, sp, #12
 8005588:	4621      	mov	r1, r4
 800558a:	4630      	mov	r0, r6
 800558c:	f7ff fef6 	bl	800537c <_printf_common>
 8005590:	3001      	adds	r0, #1
 8005592:	d14d      	bne.n	8005630 <_printf_i+0x1c8>
 8005594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005598:	b005      	add	sp, #20
 800559a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800559e:	4839      	ldr	r0, [pc, #228]	; (8005684 <_printf_i+0x21c>)
 80055a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055a4:	6813      	ldr	r3, [r2, #0]
 80055a6:	6821      	ldr	r1, [r4, #0]
 80055a8:	1d1d      	adds	r5, r3, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6015      	str	r5, [r2, #0]
 80055ae:	060a      	lsls	r2, r1, #24
 80055b0:	d50b      	bpl.n	80055ca <_printf_i+0x162>
 80055b2:	07ca      	lsls	r2, r1, #31
 80055b4:	bf44      	itt	mi
 80055b6:	f041 0120 	orrmi.w	r1, r1, #32
 80055ba:	6021      	strmi	r1, [r4, #0]
 80055bc:	b91b      	cbnz	r3, 80055c6 <_printf_i+0x15e>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	f022 0220 	bic.w	r2, r2, #32
 80055c4:	6022      	str	r2, [r4, #0]
 80055c6:	2210      	movs	r2, #16
 80055c8:	e7b7      	b.n	800553a <_printf_i+0xd2>
 80055ca:	064d      	lsls	r5, r1, #25
 80055cc:	bf48      	it	mi
 80055ce:	b29b      	uxthmi	r3, r3
 80055d0:	e7ef      	b.n	80055b2 <_printf_i+0x14a>
 80055d2:	4665      	mov	r5, ip
 80055d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80055d8:	fb02 3311 	mls	r3, r2, r1, r3
 80055dc:	5cc3      	ldrb	r3, [r0, r3]
 80055de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055e2:	460b      	mov	r3, r1
 80055e4:	2900      	cmp	r1, #0
 80055e6:	d1f5      	bne.n	80055d4 <_printf_i+0x16c>
 80055e8:	e7b9      	b.n	800555e <_printf_i+0xf6>
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	6825      	ldr	r5, [r4, #0]
 80055ee:	1d18      	adds	r0, r3, #4
 80055f0:	6961      	ldr	r1, [r4, #20]
 80055f2:	6010      	str	r0, [r2, #0]
 80055f4:	0628      	lsls	r0, r5, #24
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	d501      	bpl.n	80055fe <_printf_i+0x196>
 80055fa:	6019      	str	r1, [r3, #0]
 80055fc:	e002      	b.n	8005604 <_printf_i+0x19c>
 80055fe:	066a      	lsls	r2, r5, #25
 8005600:	d5fb      	bpl.n	80055fa <_printf_i+0x192>
 8005602:	8019      	strh	r1, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	4665      	mov	r5, ip
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	e7b9      	b.n	8005580 <_printf_i+0x118>
 800560c:	6813      	ldr	r3, [r2, #0]
 800560e:	1d19      	adds	r1, r3, #4
 8005610:	6011      	str	r1, [r2, #0]
 8005612:	681d      	ldr	r5, [r3, #0]
 8005614:	6862      	ldr	r2, [r4, #4]
 8005616:	2100      	movs	r1, #0
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f837 	bl	800568c <memchr>
 800561e:	b108      	cbz	r0, 8005624 <_printf_i+0x1bc>
 8005620:	1b40      	subs	r0, r0, r5
 8005622:	6060      	str	r0, [r4, #4]
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800562e:	e7a7      	b.n	8005580 <_printf_i+0x118>
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	462a      	mov	r2, r5
 8005634:	4639      	mov	r1, r7
 8005636:	4630      	mov	r0, r6
 8005638:	47c0      	blx	r8
 800563a:	3001      	adds	r0, #1
 800563c:	d0aa      	beq.n	8005594 <_printf_i+0x12c>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	079b      	lsls	r3, r3, #30
 8005642:	d413      	bmi.n	800566c <_printf_i+0x204>
 8005644:	68e0      	ldr	r0, [r4, #12]
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	4298      	cmp	r0, r3
 800564a:	bfb8      	it	lt
 800564c:	4618      	movlt	r0, r3
 800564e:	e7a3      	b.n	8005598 <_printf_i+0x130>
 8005650:	2301      	movs	r3, #1
 8005652:	464a      	mov	r2, r9
 8005654:	4639      	mov	r1, r7
 8005656:	4630      	mov	r0, r6
 8005658:	47c0      	blx	r8
 800565a:	3001      	adds	r0, #1
 800565c:	d09a      	beq.n	8005594 <_printf_i+0x12c>
 800565e:	3501      	adds	r5, #1
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	9a03      	ldr	r2, [sp, #12]
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	42ab      	cmp	r3, r5
 8005668:	dcf2      	bgt.n	8005650 <_printf_i+0x1e8>
 800566a:	e7eb      	b.n	8005644 <_printf_i+0x1dc>
 800566c:	2500      	movs	r5, #0
 800566e:	f104 0919 	add.w	r9, r4, #25
 8005672:	e7f5      	b.n	8005660 <_printf_i+0x1f8>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ac      	bne.n	80055d2 <_printf_i+0x16a>
 8005678:	7803      	ldrb	r3, [r0, #0]
 800567a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800567e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005682:	e76c      	b.n	800555e <_printf_i+0xf6>
 8005684:	080059ed 	.word	0x080059ed
 8005688:	080059fe 	.word	0x080059fe

0800568c <memchr>:
 800568c:	b510      	push	{r4, lr}
 800568e:	b2c9      	uxtb	r1, r1
 8005690:	4402      	add	r2, r0
 8005692:	4290      	cmp	r0, r2
 8005694:	4603      	mov	r3, r0
 8005696:	d101      	bne.n	800569c <memchr+0x10>
 8005698:	2300      	movs	r3, #0
 800569a:	e003      	b.n	80056a4 <memchr+0x18>
 800569c:	781c      	ldrb	r4, [r3, #0]
 800569e:	3001      	adds	r0, #1
 80056a0:	428c      	cmp	r4, r1
 80056a2:	d1f6      	bne.n	8005692 <memchr+0x6>
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <memmove>:
 80056a8:	4288      	cmp	r0, r1
 80056aa:	b510      	push	{r4, lr}
 80056ac:	eb01 0302 	add.w	r3, r1, r2
 80056b0:	d807      	bhi.n	80056c2 <memmove+0x1a>
 80056b2:	1e42      	subs	r2, r0, #1
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d00a      	beq.n	80056ce <memmove+0x26>
 80056b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056c0:	e7f8      	b.n	80056b4 <memmove+0xc>
 80056c2:	4283      	cmp	r3, r0
 80056c4:	d9f5      	bls.n	80056b2 <memmove+0xa>
 80056c6:	1881      	adds	r1, r0, r2
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	42d3      	cmn	r3, r2
 80056cc:	d100      	bne.n	80056d0 <memmove+0x28>
 80056ce:	bd10      	pop	{r4, pc}
 80056d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80056d8:	e7f7      	b.n	80056ca <memmove+0x22>
	...

080056dc <_free_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d043      	beq.n	800576c <_free_r+0x90>
 80056e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e8:	1f0c      	subs	r4, r1, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bfb8      	it	lt
 80056ee:	18e4      	addlt	r4, r4, r3
 80056f0:	f000 f8d0 	bl	8005894 <__malloc_lock>
 80056f4:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <_free_r+0x94>)
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	4610      	mov	r0, r2
 80056fa:	b933      	cbnz	r3, 800570a <_free_r+0x2e>
 80056fc:	6063      	str	r3, [r4, #4]
 80056fe:	6014      	str	r4, [r2, #0]
 8005700:	4628      	mov	r0, r5
 8005702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005706:	f000 b8c6 	b.w	8005896 <__malloc_unlock>
 800570a:	42a3      	cmp	r3, r4
 800570c:	d90b      	bls.n	8005726 <_free_r+0x4a>
 800570e:	6821      	ldr	r1, [r4, #0]
 8005710:	1862      	adds	r2, r4, r1
 8005712:	4293      	cmp	r3, r2
 8005714:	bf01      	itttt	eq
 8005716:	681a      	ldreq	r2, [r3, #0]
 8005718:	685b      	ldreq	r3, [r3, #4]
 800571a:	1852      	addeq	r2, r2, r1
 800571c:	6022      	streq	r2, [r4, #0]
 800571e:	6063      	str	r3, [r4, #4]
 8005720:	6004      	str	r4, [r0, #0]
 8005722:	e7ed      	b.n	8005700 <_free_r+0x24>
 8005724:	4613      	mov	r3, r2
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	b10a      	cbz	r2, 800572e <_free_r+0x52>
 800572a:	42a2      	cmp	r2, r4
 800572c:	d9fa      	bls.n	8005724 <_free_r+0x48>
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	1858      	adds	r0, r3, r1
 8005732:	42a0      	cmp	r0, r4
 8005734:	d10b      	bne.n	800574e <_free_r+0x72>
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	4401      	add	r1, r0
 800573a:	1858      	adds	r0, r3, r1
 800573c:	4282      	cmp	r2, r0
 800573e:	6019      	str	r1, [r3, #0]
 8005740:	d1de      	bne.n	8005700 <_free_r+0x24>
 8005742:	6810      	ldr	r0, [r2, #0]
 8005744:	6852      	ldr	r2, [r2, #4]
 8005746:	4401      	add	r1, r0
 8005748:	6019      	str	r1, [r3, #0]
 800574a:	605a      	str	r2, [r3, #4]
 800574c:	e7d8      	b.n	8005700 <_free_r+0x24>
 800574e:	d902      	bls.n	8005756 <_free_r+0x7a>
 8005750:	230c      	movs	r3, #12
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	e7d4      	b.n	8005700 <_free_r+0x24>
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1821      	adds	r1, r4, r0
 800575a:	428a      	cmp	r2, r1
 800575c:	bf01      	itttt	eq
 800575e:	6811      	ldreq	r1, [r2, #0]
 8005760:	6852      	ldreq	r2, [r2, #4]
 8005762:	1809      	addeq	r1, r1, r0
 8005764:	6021      	streq	r1, [r4, #0]
 8005766:	6062      	str	r2, [r4, #4]
 8005768:	605c      	str	r4, [r3, #4]
 800576a:	e7c9      	b.n	8005700 <_free_r+0x24>
 800576c:	bd38      	pop	{r3, r4, r5, pc}
 800576e:	bf00      	nop
 8005770:	2000199c 	.word	0x2000199c

08005774 <_malloc_r>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	1ccd      	adds	r5, r1, #3
 8005778:	f025 0503 	bic.w	r5, r5, #3
 800577c:	3508      	adds	r5, #8
 800577e:	2d0c      	cmp	r5, #12
 8005780:	bf38      	it	cc
 8005782:	250c      	movcc	r5, #12
 8005784:	2d00      	cmp	r5, #0
 8005786:	4606      	mov	r6, r0
 8005788:	db01      	blt.n	800578e <_malloc_r+0x1a>
 800578a:	42a9      	cmp	r1, r5
 800578c:	d903      	bls.n	8005796 <_malloc_r+0x22>
 800578e:	230c      	movs	r3, #12
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	2000      	movs	r0, #0
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	f000 f87d 	bl	8005894 <__malloc_lock>
 800579a:	4a21      	ldr	r2, [pc, #132]	; (8005820 <_malloc_r+0xac>)
 800579c:	6814      	ldr	r4, [r2, #0]
 800579e:	4621      	mov	r1, r4
 80057a0:	b991      	cbnz	r1, 80057c8 <_malloc_r+0x54>
 80057a2:	4c20      	ldr	r4, [pc, #128]	; (8005824 <_malloc_r+0xb0>)
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	b91b      	cbnz	r3, 80057b0 <_malloc_r+0x3c>
 80057a8:	4630      	mov	r0, r6
 80057aa:	f000 f863 	bl	8005874 <_sbrk_r>
 80057ae:	6020      	str	r0, [r4, #0]
 80057b0:	4629      	mov	r1, r5
 80057b2:	4630      	mov	r0, r6
 80057b4:	f000 f85e 	bl	8005874 <_sbrk_r>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d124      	bne.n	8005806 <_malloc_r+0x92>
 80057bc:	230c      	movs	r3, #12
 80057be:	4630      	mov	r0, r6
 80057c0:	6033      	str	r3, [r6, #0]
 80057c2:	f000 f868 	bl	8005896 <__malloc_unlock>
 80057c6:	e7e4      	b.n	8005792 <_malloc_r+0x1e>
 80057c8:	680b      	ldr	r3, [r1, #0]
 80057ca:	1b5b      	subs	r3, r3, r5
 80057cc:	d418      	bmi.n	8005800 <_malloc_r+0x8c>
 80057ce:	2b0b      	cmp	r3, #11
 80057d0:	d90f      	bls.n	80057f2 <_malloc_r+0x7e>
 80057d2:	600b      	str	r3, [r1, #0]
 80057d4:	18cc      	adds	r4, r1, r3
 80057d6:	50cd      	str	r5, [r1, r3]
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 f85c 	bl	8005896 <__malloc_unlock>
 80057de:	f104 000b 	add.w	r0, r4, #11
 80057e2:	1d23      	adds	r3, r4, #4
 80057e4:	f020 0007 	bic.w	r0, r0, #7
 80057e8:	1ac3      	subs	r3, r0, r3
 80057ea:	d0d3      	beq.n	8005794 <_malloc_r+0x20>
 80057ec:	425a      	negs	r2, r3
 80057ee:	50e2      	str	r2, [r4, r3]
 80057f0:	e7d0      	b.n	8005794 <_malloc_r+0x20>
 80057f2:	684b      	ldr	r3, [r1, #4]
 80057f4:	428c      	cmp	r4, r1
 80057f6:	bf16      	itet	ne
 80057f8:	6063      	strne	r3, [r4, #4]
 80057fa:	6013      	streq	r3, [r2, #0]
 80057fc:	460c      	movne	r4, r1
 80057fe:	e7eb      	b.n	80057d8 <_malloc_r+0x64>
 8005800:	460c      	mov	r4, r1
 8005802:	6849      	ldr	r1, [r1, #4]
 8005804:	e7cc      	b.n	80057a0 <_malloc_r+0x2c>
 8005806:	1cc4      	adds	r4, r0, #3
 8005808:	f024 0403 	bic.w	r4, r4, #3
 800580c:	42a0      	cmp	r0, r4
 800580e:	d005      	beq.n	800581c <_malloc_r+0xa8>
 8005810:	1a21      	subs	r1, r4, r0
 8005812:	4630      	mov	r0, r6
 8005814:	f000 f82e 	bl	8005874 <_sbrk_r>
 8005818:	3001      	adds	r0, #1
 800581a:	d0cf      	beq.n	80057bc <_malloc_r+0x48>
 800581c:	6025      	str	r5, [r4, #0]
 800581e:	e7db      	b.n	80057d8 <_malloc_r+0x64>
 8005820:	2000199c 	.word	0x2000199c
 8005824:	200019a0 	.word	0x200019a0

08005828 <_realloc_r>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	4607      	mov	r7, r0
 800582c:	4614      	mov	r4, r2
 800582e:	460e      	mov	r6, r1
 8005830:	b921      	cbnz	r1, 800583c <_realloc_r+0x14>
 8005832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005836:	4611      	mov	r1, r2
 8005838:	f7ff bf9c 	b.w	8005774 <_malloc_r>
 800583c:	b922      	cbnz	r2, 8005848 <_realloc_r+0x20>
 800583e:	f7ff ff4d 	bl	80056dc <_free_r>
 8005842:	4625      	mov	r5, r4
 8005844:	4628      	mov	r0, r5
 8005846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005848:	f000 f826 	bl	8005898 <_malloc_usable_size_r>
 800584c:	42a0      	cmp	r0, r4
 800584e:	d20f      	bcs.n	8005870 <_realloc_r+0x48>
 8005850:	4621      	mov	r1, r4
 8005852:	4638      	mov	r0, r7
 8005854:	f7ff ff8e 	bl	8005774 <_malloc_r>
 8005858:	4605      	mov	r5, r0
 800585a:	2800      	cmp	r0, #0
 800585c:	d0f2      	beq.n	8005844 <_realloc_r+0x1c>
 800585e:	4631      	mov	r1, r6
 8005860:	4622      	mov	r2, r4
 8005862:	f7ff fc05 	bl	8005070 <memcpy>
 8005866:	4631      	mov	r1, r6
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff ff37 	bl	80056dc <_free_r>
 800586e:	e7e9      	b.n	8005844 <_realloc_r+0x1c>
 8005870:	4635      	mov	r5, r6
 8005872:	e7e7      	b.n	8005844 <_realloc_r+0x1c>

08005874 <_sbrk_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	2300      	movs	r3, #0
 8005878:	4c05      	ldr	r4, [pc, #20]	; (8005890 <_sbrk_r+0x1c>)
 800587a:	4605      	mov	r5, r0
 800587c:	4608      	mov	r0, r1
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	f7fa ff26 	bl	80006d0 <_sbrk>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_sbrk_r+0x1a>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	b103      	cbz	r3, 800588e <_sbrk_r+0x1a>
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	20001a80 	.word	0x20001a80

08005894 <__malloc_lock>:
 8005894:	4770      	bx	lr

08005896 <__malloc_unlock>:
 8005896:	4770      	bx	lr

08005898 <_malloc_usable_size_r>:
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f18      	subs	r0, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfbc      	itt	lt
 80058a2:	580b      	ldrlt	r3, [r1, r0]
 80058a4:	18c0      	addlt	r0, r0, r3
 80058a6:	4770      	bx	lr

080058a8 <_init>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr

080058b4 <_fini>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr
