
OccupancyDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e0  080054e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054e0  080054e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e0  080054e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  20000074  0800555c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a84  0800555c  00021a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c6a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed5  00000000  00000000  00037d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0003bea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b03  00000000  00000000  0003d018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000feb6  00000000  00000000  00040b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093f29  00000000  00000000  000509d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e48fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005174  00000000  00000000  000e4978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005388 	.word	0x08005388

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005388 	.word	0x08005388

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb44 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f848 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8ac 	bl	80002b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART2_UART_Init>
  //
  //	 print2LCD(0x3033363733303032);
  //
  //	 print2LCD(0x33);

  printString("\x1b[2J");
 8000164:	4815      	ldr	r0, [pc, #84]	; (80001bc <main+0x6c>)
 8000166:	f000 fadb 	bl	8000720 <printString>

  printString("\x1b[0;0H");
 800016a:	4815      	ldr	r0, [pc, #84]	; (80001c0 <main+0x70>)
 800016c:	f000 fad8 	bl	8000720 <printString>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f001 fe08 	bl	8001d84 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &dataQueue_attributes);
 8000174:	4a13      	ldr	r2, [pc, #76]	; (80001c4 <main+0x74>)
 8000176:	2102      	movs	r1, #2
 8000178:	2001      	movs	r0, #1
 800017a:	f001 ff41 	bl	8002000 <osMessageQueueNew>
 800017e:	4602      	mov	r2, r0
 8000180:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <main+0x78>)
 8000182:	601a      	str	r2, [r3, #0]

  /* creation of structQueue */
  structQueueHandle = osMessageQueueNew (1, sizeof(struct DataStruct), &structQueue_attributes);
 8000184:	4a11      	ldr	r2, [pc, #68]	; (80001cc <main+0x7c>)
 8000186:	2106      	movs	r1, #6
 8000188:	2001      	movs	r0, #1
 800018a:	f001 ff39 	bl	8002000 <osMessageQueueNew>
 800018e:	4602      	mov	r2, r0
 8000190:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <main+0x80>)
 8000192:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of calcTask */
  calcTaskHandle = osThreadNew(StartCalcTask, NULL, &calcTask_attributes);
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <main+0x84>)
 8000196:	2100      	movs	r1, #0
 8000198:	480f      	ldr	r0, [pc, #60]	; (80001d8 <main+0x88>)
 800019a:	f001 fe59 	bl	8001e50 <osThreadNew>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <main+0x8c>)
 80001a2:	601a      	str	r2, [r3, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 80001a4:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <main+0x90>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	480e      	ldr	r0, [pc, #56]	; (80001e4 <main+0x94>)
 80001aa:	f001 fe51 	bl	8001e50 <osThreadNew>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <main+0x98>)
 80001b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b4:	f001 fe18 	bl	8001de8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	e7fe      	b.n	80001b8 <main+0x68>
 80001ba:	bf00      	nop
 80001bc:	080053d0 	.word	0x080053d0
 80001c0:	080053d8 	.word	0x080053d8
 80001c4:	08005464 	.word	0x08005464
 80001c8:	200019f0 	.word	0x200019f0
 80001cc:	0800547c 	.word	0x0800547c
 80001d0:	200019a4 	.word	0x200019a4
 80001d4:	0800541c 	.word	0x0800541c
 80001d8:	080003a1 	.word	0x080003a1
 80001dc:	200019ac 	.word	0x200019ac
 80001e0:	08005440 	.word	0x08005440
 80001e4:	080003f9 	.word	0x080003f9
 80001e8:	200019a8 	.word	0x200019a8

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f004 fcb3 	bl	8004b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000216:	2310      	movs	r3, #16
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021a:	2300      	movs	r3, #0
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fd60 	bl	8000ce8 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022e:	f000 f941 	bl	80004b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f000 ffcc 	bl	80011e8 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000256:	f000 f92d 	bl	80004b4 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART2_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART2_UART_Init+0x4c>)
 800029c:	f001 fbba 	bl	8001a14 <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f905 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200019b0 	.word	0x200019b0
 80002b4:	40004400 	.word	0x40004400

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a29      	ldr	r2, [pc, #164]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a23      	ldr	r2, [pc, #140]	; (8000390 <MX_GPIO_Init+0xd8>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b21      	ldr	r3, [pc, #132]	; (8000390 <MX_GPIO_Init+0xd8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000314:	2200      	movs	r2, #0
 8000316:	21ff      	movs	r1, #255	; 0xff
 8000318:	481e      	ldr	r0, [pc, #120]	; (8000394 <MX_GPIO_Init+0xdc>)
 800031a:	f000 fccd 	bl	8000cb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2120      	movs	r1, #32
 8000322:	481d      	ldr	r0, [pc, #116]	; (8000398 <MX_GPIO_Init+0xe0>)
 8000324:	f000 fcc8 	bl	8000cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2123      	movs	r1, #35	; 0x23
 800032c:	481b      	ldr	r0, [pc, #108]	; (800039c <MX_GPIO_Init+0xe4>)
 800032e:	f000 fcc3 	bl	8000cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000332:	23ff      	movs	r3, #255	; 0xff
 8000334:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4812      	ldr	r0, [pc, #72]	; (8000394 <MX_GPIO_Init+0xdc>)
 800034a:	f000 fb5b 	bl	8000a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800034e:	2320      	movs	r3, #32
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_GPIO_Init+0xe0>)
 8000366:	f000 fb4d 	bl	8000a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800036a:	2323      	movs	r3, #35	; 0x23
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036e:	2301      	movs	r3, #1
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000376:	2302      	movs	r3, #2
 8000378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4806      	ldr	r0, [pc, #24]	; (800039c <MX_GPIO_Init+0xe4>)
 8000382:	f000 fb3f 	bl	8000a04 <HAL_GPIO_Init>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00

080003a0 <StartCalcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalcTask */
void StartCalcTask(void *argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t data = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	81fb      	strh	r3, [r7, #14]
	struct DataStruct dc;
	dc.temp = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	813b      	strh	r3, [r7, #8]
	dc.CO2 = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	817b      	strh	r3, [r7, #10]
	dc.dB = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	81bb      	strh	r3, [r7, #12]
	{
//		if(osMessageQueuePut(dataQueueHandle, &dc.temp, 1U, 0U)!= osOK)
//		{
//			Error_Handler();
//		}
		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U)!= osOK)
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <StartCalcTask+0x54>)
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	f107 0108 	add.w	r1, r7, #8
 80003c0:	2300      	movs	r3, #0
 80003c2:	2201      	movs	r2, #1
 80003c4:	f001 fea2 	bl	800210c <osMessageQueuePut>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <StartCalcTask+0x32>
		{
			Error_Handler();
 80003ce:	f000 f871 	bl	80004b4 <Error_Handler>
		}
		dc.temp += 2;
 80003d2:	893b      	ldrh	r3, [r7, #8]
 80003d4:	3302      	adds	r3, #2
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	813b      	strh	r3, [r7, #8]
		dc.CO2 += 5;
 80003da:	897b      	ldrh	r3, [r7, #10]
 80003dc:	3305      	adds	r3, #5
 80003de:	b29b      	uxth	r3, r3
 80003e0:	817b      	strh	r3, [r7, #10]
		dc.dB += 10;
 80003e2:	89bb      	ldrh	r3, [r7, #12]
 80003e4:	330a      	adds	r3, #10
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	81bb      	strh	r3, [r7, #12]
		osDelay(500);
 80003ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ee:	f001 fdd9 	bl	8001fa4 <osDelay>
		if(osMessageQueuePut(structQueueHandle, &dc, 1U, 0U)!= osOK)
 80003f2:	e7e1      	b.n	80003b8 <StartCalcTask+0x18>
 80003f4:	200019a4 	.word	0x200019a4

080003f8 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08e      	sub	sp, #56	; 0x38
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
//		if(osMessageQueueGet(dataQueueHandle, &data, NULL, 0U) == osOK)
//		{
//			sprintf((char *)data_str, "%d", data);
//			printString((char *)data_str);
//		}
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <StartSendTask+0x88>)
 8000402:	6818      	ldr	r0, [r3, #0]
 8000404:	f107 0108 	add.w	r1, r7, #8
 8000408:	2300      	movs	r3, #0
 800040a:	2200      	movs	r2, #0
 800040c:	f001 fef2 	bl	80021f4 <osMessageQueueGet>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d12f      	bne.n	8000476 <StartSendTask+0x7e>
		{
			sprintf((char *)data_str, "%d", dc.temp);
 8000416:	893b      	ldrh	r3, [r7, #8]
 8000418:	461a      	mov	r2, r3
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4919      	ldr	r1, [pc, #100]	; (8000484 <StartSendTask+0x8c>)
 8000420:	4618      	mov	r0, r3
 8000422:	f004 fba9 	bl	8004b78 <siprintf>
			printString((char *)data_str);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f978 	bl	8000720 <printString>
			printString("     ");
 8000430:	4815      	ldr	r0, [pc, #84]	; (8000488 <StartSendTask+0x90>)
 8000432:	f000 f975 	bl	8000720 <printString>
			sprintf((char *)data_str, "%d", dc.CO2);
 8000436:	897b      	ldrh	r3, [r7, #10]
 8000438:	461a      	mov	r2, r3
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4911      	ldr	r1, [pc, #68]	; (8000484 <StartSendTask+0x8c>)
 8000440:	4618      	mov	r0, r3
 8000442:	f004 fb99 	bl	8004b78 <siprintf>
			printString((char *)data_str);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f968 	bl	8000720 <printString>
			printString("     ");
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <StartSendTask+0x90>)
 8000452:	f000 f965 	bl	8000720 <printString>
			sprintf((char *)data_str, "%d", dc.dB);
 8000456:	89bb      	ldrh	r3, [r7, #12]
 8000458:	461a      	mov	r2, r3
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4909      	ldr	r1, [pc, #36]	; (8000484 <StartSendTask+0x8c>)
 8000460:	4618      	mov	r0, r3
 8000462:	f004 fb89 	bl	8004b78 <siprintf>
			printString((char *)data_str);
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f958 	bl	8000720 <printString>
			printString("\r\n");
 8000470:	4806      	ldr	r0, [pc, #24]	; (800048c <StartSendTask+0x94>)
 8000472:	f000 f955 	bl	8000720 <printString>
		}
		osDelay(1000);
 8000476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047a:	f001 fd93 	bl	8001fa4 <osDelay>
		if(osMessageQueueGet(structQueueHandle, &dc, NULL, 0U) == osOK)
 800047e:	e7bf      	b.n	8000400 <StartSendTask+0x8>
 8000480:	200019a4 	.word	0x200019a4
 8000484:	080053e0 	.word	0x080053e0
 8000488:	080053e4 	.word	0x080053e4
 800048c:	080053ec 	.word	0x080053ec

08000490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d101      	bne.n	80004a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004a2:	f000 f9b3 	bl	800080c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40000800 	.word	0x40000800

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <HAL_MspInit+0x5c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_MspInit+0x5c>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_MspInit+0x60>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_MspInit+0x60>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <HAL_UART_MspInit+0x88>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d12f      	bne.n	80005a4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <HAL_UART_MspInit+0x8c>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <HAL_UART_MspInit+0x8c>)
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	61d3      	str	r3, [r2, #28]
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_UART_MspInit+0x8c>)
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_UART_MspInit+0x8c>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <HAL_UART_MspInit+0x8c>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <HAL_UART_MspInit+0x8c>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000574:	2304      	movs	r3, #4
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057c:	2303      	movs	r3, #3
 800057e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <HAL_UART_MspInit+0x90>)
 8000588:	f000 fa3c 	bl	8000a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800058c:	2308      	movs	r3, #8
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <HAL_UART_MspInit+0x90>)
 80005a0:	f000 fa30 	bl	8000a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40004400 	.word	0x40004400
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010800 	.word	0x40010800

080005b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	201e      	movs	r0, #30
 80005ce:	f000 f9ee 	bl	80009ae <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005d2:	201e      	movs	r0, #30
 80005d4:	f000 fa07 	bl	80009e6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <HAL_InitTick+0x9c>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <HAL_InitTick+0x9c>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	61d3      	str	r3, [r2, #28]
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_InitTick+0x9c>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005f0:	f107 0210 	add.w	r2, r7, #16
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff72 	bl	80014e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000600:	f000 ff48 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8000604:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_InitTick+0xa0>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	0c9b      	lsrs	r3, r3, #18
 8000610:	3b01      	subs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_InitTick+0xa4>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <HAL_InitTick+0xa8>)
 8000618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_InitTick+0xa4>)
 800061c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000620:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_InitTick+0xa4>)
 8000624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000626:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_InitTick+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_InitTick+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <HAL_InitTick+0xa4>)
 8000636:	f000 ffa3 	bl	8001580 <HAL_TIM_Base_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d104      	bne.n	800064a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <HAL_InitTick+0xa4>)
 8000642:	f000 fff5 	bl	8001630 <HAL_TIM_Base_Start_IT>
 8000646:	4603      	mov	r3, r0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3730      	adds	r7, #48	; 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	200019f4 	.word	0x200019f4
 8000660:	40000800 	.word	0x40000800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <HardFault_Handler+0x4>

08000676 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <MemManage_Handler+0x4>

0800067c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <BusFault_Handler+0x4>

08000682 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <UsageFault_Handler+0x4>

08000688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM4_IRQHandler+0x10>)
 800069a:	f001 f81b 	bl	80016d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200019f4 	.word	0x200019f4

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f004 fa10 	bl	8004afc <__errno>
 80006dc:	4602      	mov	r2, r0
 80006de:	230c      	movs	r3, #12
 80006e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20005000 	.word	0x20005000
 8000708:	00000400 	.word	0x00000400
 800070c:	20000090 	.word	0x20000090
 8000710:	20001a88 	.word	0x20001a88

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <printString>:
 */

#include "CommMod.h"

void printString(const char* mess)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09e      	sub	sp, #120	; 0x78
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_StatusTypeDef st;
	uint8_t cliBufferTX[100];

	while(huart2.gState == HAL_UART_STATE_BUSY_TX){}
 800072c:	bf00      	nop
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <printString+0x70>)
 8000730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b21      	cmp	r3, #33	; 0x21
 8000738:	d0f9      	beq.n	800072e <printString+0xe>

	for(const char* p = mess; *p; ++p)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	673b      	str	r3, [r7, #112]	; 0x70
 800073e:	e00d      	b.n	800075c <printString+0x3c>
	{
		cliBufferTX[i] = *p;
 8000740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800074a:	4413      	add	r3, r2
 800074c:	460a      	mov	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
		i++;
 8000750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000752:	3301      	adds	r3, #1
 8000754:	677b      	str	r3, [r7, #116]	; 0x74
	for(const char* p = mess; *p; ++p)
 8000756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000758:	3301      	adds	r3, #1
 800075a:	673b      	str	r3, [r7, #112]	; 0x70
 800075c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1ed      	bne.n	8000740 <printString+0x20>
	}

	st = HAL_UART_Transmit(&huart2, cliBufferTX, i, 1000);
 8000764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000766:	b29a      	uxth	r2, r3
 8000768:	f107 0108 	add.w	r1, r7, #8
 800076c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <printString+0x70>)
 8000772:	f001 f99c 	bl	8001aae <HAL_UART_Transmit>
 8000776:	4603      	mov	r3, r0
 8000778:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(st != HAL_OK)
 800077c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <printString+0x68>
	{
		Error_Handler();
 8000784:	f7ff fe96 	bl	80004b4 <Error_Handler>
	}

}
 8000788:	bf00      	nop
 800078a:	3778      	adds	r7, #120	; 0x78
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200019b0 	.word	0x200019b0

08000794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000794:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000796:	e003      	b.n	80007a0 <LoopCopyDataInit>

08000798 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800079a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800079c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800079e:	3104      	adds	r1, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a8:	d3f6      	bcc.n	8000798 <CopyDataInit>
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007ac:	e002      	b.n	80007b4 <LoopFillZerobss>

080007ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007b0:	f842 3b04 	str.w	r3, [r2], #4

080007b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b8:	d3f9      	bcc.n	80007ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ba:	f7ff ffab 	bl	8000714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f004 f9a3 	bl	8004b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fcc5 	bl	8000150 <main>
  bx lr
 80007c6:	4770      	bx	lr
  ldr r3, =_sidata
 80007c8:	080054e8 	.word	0x080054e8
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007d0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80007d4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80007d8:	20001a84 	.word	0x20001a84

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f8d1 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fede 	bl	80005b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff fe60 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000008 	.word	0x20000008
 800082c:	20001a3c 	.word	0x20001a3c

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20001a3c 	.word	0x20001a3c

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <__NVIC_EnableIRQ+0x34>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff4f 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff64 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ffb2 	bl	8000934 <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff81 	bl	80008e0 <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff57 	bl	80008a8 <__NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b08b      	sub	sp, #44	; 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	e127      	b.n	8000c68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	f040 8116 	bne.w	8000c62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d034      	beq.n	8000aa8 <HAL_GPIO_Init+0xa4>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d80d      	bhi.n	8000a5e <HAL_GPIO_Init+0x5a>
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d02b      	beq.n	8000a9e <HAL_GPIO_Init+0x9a>
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d804      	bhi.n	8000a54 <HAL_GPIO_Init+0x50>
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d031      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d01c      	beq.n	8000a8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a52:	e048      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d043      	beq.n	8000ae0 <HAL_GPIO_Init+0xdc>
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d01b      	beq.n	8000a94 <HAL_GPIO_Init+0x90>
          break;
 8000a5c:	e043      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a5e:	4a89      	ldr	r2, [pc, #548]	; (8000c84 <HAL_GPIO_Init+0x280>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d026      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
 8000a64:	4a87      	ldr	r2, [pc, #540]	; (8000c84 <HAL_GPIO_Init+0x280>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d806      	bhi.n	8000a78 <HAL_GPIO_Init+0x74>
 8000a6a:	4a87      	ldr	r2, [pc, #540]	; (8000c88 <HAL_GPIO_Init+0x284>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d020      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
 8000a70:	4a86      	ldr	r2, [pc, #536]	; (8000c8c <HAL_GPIO_Init+0x288>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d01d      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
          break;
 8000a76:	e036      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a78:	4a85      	ldr	r2, [pc, #532]	; (8000c90 <HAL_GPIO_Init+0x28c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d019      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
 8000a7e:	4a85      	ldr	r2, [pc, #532]	; (8000c94 <HAL_GPIO_Init+0x290>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d016      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
 8000a84:	4a84      	ldr	r2, [pc, #528]	; (8000c98 <HAL_GPIO_Init+0x294>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0xae>
          break;
 8000a8a:	e02c      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e028      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e023      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e01e      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	330c      	adds	r3, #12
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e019      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aba:	2304      	movs	r3, #4
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e012      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	611a      	str	r2, [r3, #16]
          break;
 8000ad2:	e008      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	615a      	str	r2, [r3, #20]
          break;
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	2bff      	cmp	r3, #255	; 0xff
 8000aea:	d801      	bhi.n	8000af0 <HAL_GPIO_Init+0xec>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	e001      	b.n	8000af4 <HAL_GPIO_Init+0xf0>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3304      	adds	r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d802      	bhi.n	8000b02 <HAL_GPIO_Init+0xfe>
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	e002      	b.n	8000b08 <HAL_GPIO_Init+0x104>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3b08      	subs	r3, #8
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	210f      	movs	r1, #15
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	401a      	ands	r2, r3
 8000b1a:	6a39      	ldr	r1, [r7, #32]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	431a      	orrs	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 8096 	beq.w	8000c62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4b59      	ldr	r3, [pc, #356]	; (8000c9c <HAL_GPIO_Init+0x298>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a58      	ldr	r2, [pc, #352]	; (8000c9c <HAL_GPIO_Init+0x298>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b56      	ldr	r3, [pc, #344]	; (8000c9c <HAL_GPIO_Init+0x298>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b4e:	4a54      	ldr	r2, [pc, #336]	; (8000ca0 <HAL_GPIO_Init+0x29c>)
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	220f      	movs	r2, #15
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a4b      	ldr	r2, [pc, #300]	; (8000ca4 <HAL_GPIO_Init+0x2a0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <HAL_GPIO_Init+0x19e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ca8 <HAL_GPIO_Init+0x2a4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d00d      	beq.n	8000b9e <HAL_GPIO_Init+0x19a>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a49      	ldr	r2, [pc, #292]	; (8000cac <HAL_GPIO_Init+0x2a8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d007      	beq.n	8000b9a <HAL_GPIO_Init+0x196>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a48      	ldr	r2, [pc, #288]	; (8000cb0 <HAL_GPIO_Init+0x2ac>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_GPIO_Init+0x192>
 8000b92:	2303      	movs	r3, #3
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x1a0>
 8000b96:	2304      	movs	r3, #4
 8000b98:	e004      	b.n	8000ba4 <HAL_GPIO_Init+0x1a0>
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	e002      	b.n	8000ba4 <HAL_GPIO_Init+0x1a0>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <HAL_GPIO_Init+0x1a0>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba6:	f002 0203 	and.w	r2, r2, #3
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	4093      	lsls	r3, r2
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb4:	493a      	ldr	r1, [pc, #232]	; (8000ca0 <HAL_GPIO_Init+0x29c>)
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	3302      	adds	r3, #2
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bce:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4938      	ldr	r1, [pc, #224]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	600b      	str	r3, [r1, #0]
 8000bda:	e006      	b.n	8000bea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4933      	ldr	r1, [pc, #204]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	492e      	ldr	r1, [pc, #184]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	604b      	str	r3, [r1, #4]
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	4929      	ldr	r1, [pc, #164]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4924      	ldr	r1, [pc, #144]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	608b      	str	r3, [r1, #8]
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	491f      	ldr	r1, [pc, #124]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	491a      	ldr	r1, [pc, #104]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60cb      	str	r3, [r1, #12]
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4915      	ldr	r1, [pc, #84]	; (8000cb4 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f aed0 	bne.w	8000a18 <HAL_GPIO_Init+0x14>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	372c      	adds	r7, #44	; 0x2c
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	10210000 	.word	0x10210000
 8000c88:	10110000 	.word	0x10110000
 8000c8c:	10120000 	.word	0x10120000
 8000c90:	10310000 	.word	0x10310000
 8000c94:	10320000 	.word	0x10320000
 8000c98:	10220000 	.word	0x10220000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40010c00 	.word	0x40010c00
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40011400 	.word	0x40011400
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc8:	787b      	ldrb	r3, [r7, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cd4:	e003      	b.n	8000cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	041a      	lsls	r2, r3, #16
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	611a      	str	r2, [r3, #16]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e26c      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8087 	beq.w	8000e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d08:	4b92      	ldr	r3, [pc, #584]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00c      	beq.n	8000d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d14:	4b8f      	ldr	r3, [pc, #572]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d112      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
 8000d20:	4b8c      	ldr	r3, [pc, #560]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d10b      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d06c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x12c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d168      	bne.n	8000e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e246      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4e:	d106      	bne.n	8000d5e <HAL_RCC_OscConfig+0x76>
 8000d50:	4b80      	ldr	r3, [pc, #512]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a7f      	ldr	r2, [pc, #508]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e02e      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x98>
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a7a      	ldr	r2, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a77      	ldr	r2, [pc, #476]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01d      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0xbc>
 8000d8a:	4b72      	ldr	r3, [pc, #456]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a71      	ldr	r2, [pc, #452]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6e      	ldr	r2, [pc, #440]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000da4:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a67      	ldr	r2, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fd34 	bl	8000830 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fd30 	bl	8000830 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1fa      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe4>
 8000dea:	e014      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fd20 	bl	8000830 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fd1c 	bl	8000830 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1e6      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x10c>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d063      	beq.n	8000eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2e:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d11c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d001      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e1ba      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4939      	ldr	r1, [pc, #228]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	e03a      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d020      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fcd5 	bl	8000830 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fcd1 	bl	8000830 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e19b      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4927      	ldr	r1, [pc, #156]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fcb4 	bl	8000830 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fcb0 	bl	8000830 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e17a      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d03a      	beq.n	8000f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc94 	bl	8000830 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc90 	bl	8000830 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e15a      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fb0a 	bl	8001544 <RCC_Delay>
 8000f30:	e01c      	b.n	8000f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc7a 	bl	8000830 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	e00f      	b.n	8000f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc76 	bl	8000830 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d908      	bls.n	8000f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e140      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420000 	.word	0x42420000
 8000f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f60:	4b9e      	ldr	r3, [pc, #632]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e9      	bne.n	8000f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a6 	beq.w	80010c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4b97      	ldr	r3, [pc, #604]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10d      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b94      	ldr	r3, [pc, #592]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a93      	ldr	r2, [pc, #588]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b91      	ldr	r3, [pc, #580]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b8e      	ldr	r3, [pc, #568]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fc37 	bl	8000830 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fc33 	bl	8000830 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0fd      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_RCC_OscConfig+0x4f8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x312>
 8000fec:	4b7b      	ldr	r3, [pc, #492]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a7a      	ldr	r2, [pc, #488]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	e02d      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x334>
 8001002:	4b76      	ldr	r3, [pc, #472]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a75      	ldr	r2, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a72      	ldr	r2, [pc, #456]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e01c      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d10c      	bne.n	800103e <HAL_RCC_OscConfig+0x356>
 8001024:	4b6d      	ldr	r3, [pc, #436]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a6c      	ldr	r2, [pc, #432]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	e00b      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b64      	ldr	r3, [pc, #400]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a63      	ldr	r2, [pc, #396]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fbe7 	bl	8000830 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001066:	f7ff fbe3 	bl	8000830 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0ab      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b57      	ldr	r3, [pc, #348]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ee      	beq.n	8001066 <HAL_RCC_OscConfig+0x37e>
 8001088:	e014      	b.n	80010b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fbd1 	bl	8000830 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fbcd 	bl	8000830 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e095      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ee      	bne.n	8001092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8081 	beq.w	80011d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d0:	4b42      	ldr	r3, [pc, #264]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d061      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d146      	bne.n	8001172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_RCC_OscConfig+0x4fc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fba1 	bl	8000830 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fb9d 	bl	8000830 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e067      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	492d      	ldr	r1, [pc, #180]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a19      	ldr	r1, [r3, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	430b      	orrs	r3, r1
 800113e:	4927      	ldr	r1, [pc, #156]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x4fc>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb71 	bl	8000830 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fb6d 	bl	8000830 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e037      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x46a>
 8001170:	e02f      	b.n	80011d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_RCC_OscConfig+0x4fc>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb5a 	bl	8000830 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fb56 	bl	8000830 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e020      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x498>
 800119e:	e018      	b.n	80011d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40007000 	.word	0x40007000
 80011e4:	42420060 	.word	0x42420060

080011e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0d0      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011fc:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d910      	bls.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b67      	ldr	r3, [pc, #412]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0207 	bic.w	r2, r3, #7
 8001212:	4965      	ldr	r1, [pc, #404]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800124e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d040      	beq.n	8001308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d115      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e073      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06b      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f023 0203 	bic.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4936      	ldr	r1, [pc, #216]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff faaa 	bl	8000830 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff faa6 	bl	8000830 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e053      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 020c 	and.w	r2, r3, #12
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d1eb      	bne.n	80012e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d210      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4922      	ldr	r1, [pc, #136]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f821 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 800137a:	4601      	mov	r1, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	fa21 f303 	lsr.w	r3, r1, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f90e 	bl	80005b8 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	08005494 	.word	0x08005494
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013bc:	b490      	push	{r4, r7}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013c4:	1d3c      	adds	r4, r7, #4
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d002      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x40>
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d003      	beq.n	8001402 <HAL_RCC_GetSysClockFreq+0x46>
 80013fa:	e02d      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013fe:	623b      	str	r3, [r7, #32]
      break;
 8001400:	e02d      	b.n	800145e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	0c9b      	lsrs	r3, r3, #18
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800140e:	4413      	add	r3, r2
 8001410:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001414:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	0c5b      	lsrs	r3, r3, #17
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800142e:	4413      	add	r3, r2
 8001430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001434:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800143a:	fb02 f203 	mul.w	r2, r2, r3
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e004      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_RCC_GetSysClockFreq+0xc0>)
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	623b      	str	r3, [r7, #32]
      break;
 8001456:	e002      	b.n	800145e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800145a:	623b      	str	r3, [r7, #32]
      break;
 800145c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145e:	6a3b      	ldr	r3, [r7, #32]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bc90      	pop	{r4, r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	080053f0 	.word	0x080053f0
 8001470:	08005400 	.word	0x08005400
 8001474:	40021000 	.word	0x40021000
 8001478:	007a1200 	.word	0x007a1200
 800147c:	003d0900 	.word	0x003d0900

08001480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_RCC_GetHCLKFreq+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff2 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 800149c:	4601      	mov	r1, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	080054a4 	.word	0x080054a4

080014bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c0:	f7ff ffde 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0adb      	lsrs	r3, r3, #11
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	080054a4 	.word	0x080054a4

080014e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220f      	movs	r2, #15
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0207 	and.w	r2, r3, #7
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40022000 	.word	0x40022000

08001544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <RCC_Delay+0x34>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <RCC_Delay+0x38>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0a5b      	lsrs	r3, r3, #9
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001560:	bf00      	nop
  }
  while (Delay --);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	60fa      	str	r2, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f9      	bne.n	8001560 <RCC_Delay+0x1c>
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000000 	.word	0x20000000
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e041      	b.n	8001616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f839 	bl	800161e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3304      	adds	r3, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f000 f9b4 	bl	800192c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d001      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e03a      	b.n	80016be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_TIM_Base_Start_IT+0x98>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00e      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x58>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001672:	d009      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x58>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_TIM_Base_Start_IT+0x9c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d004      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x58>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d010      	beq.n	80016bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016aa:	e007      	b.n	80016bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	40000400 	.word	0x40000400
 80016d0:	40000800 	.word	0x40000800

080016d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d122      	bne.n	8001730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d11b      	bne.n	8001730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0202 	mvn.w	r2, #2
 8001700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8ed 	bl	80018f6 <HAL_TIM_IC_CaptureCallback>
 800171c:	e005      	b.n	800172a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8e0 	bl	80018e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f8ef 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b04      	cmp	r3, #4
 800173c:	d122      	bne.n	8001784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b04      	cmp	r3, #4
 800174a:	d11b      	bne.n	8001784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0204 	mvn.w	r2, #4
 8001754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f8c3 	bl	80018f6 <HAL_TIM_IC_CaptureCallback>
 8001770:	e005      	b.n	800177e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f8b6 	bl	80018e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f8c5 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b08      	cmp	r3, #8
 8001790:	d122      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b08      	cmp	r3, #8
 800179e:	d11b      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 0208 	mvn.w	r2, #8
 80017a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f899 	bl	80018f6 <HAL_TIM_IC_CaptureCallback>
 80017c4:	e005      	b.n	80017d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f88c 	bl	80018e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f89b 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d122      	bne.n	800182c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d11b      	bne.n	800182c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0210 	mvn.w	r2, #16
 80017fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2208      	movs	r2, #8
 8001802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f86f 	bl	80018f6 <HAL_TIM_IC_CaptureCallback>
 8001818:	e005      	b.n	8001826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f862 	bl	80018e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f871 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10e      	bne.n	8001858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0201 	mvn.w	r2, #1
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe1c 	bl	8000490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b80      	cmp	r3, #128	; 0x80
 8001864:	d10e      	bne.n	8001884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	d107      	bne.n	8001884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800187c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8bf 	bl	8001a02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b40      	cmp	r3, #64	; 0x40
 8001890:	d10e      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189c:	2b40      	cmp	r3, #64	; 0x40
 800189e:	d107      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f835 	bl	800191a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d10e      	bne.n	80018dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d107      	bne.n	80018dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0220 	mvn.w	r2, #32
 80018d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f88a 	bl	80019f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <TIM_Base_SetConfig+0xb8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00b      	beq.n	800195c <TIM_Base_SetConfig+0x30>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d007      	beq.n	800195c <TIM_Base_SetConfig+0x30>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <TIM_Base_SetConfig+0xbc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d003      	beq.n	800195c <TIM_Base_SetConfig+0x30>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a25      	ldr	r2, [pc, #148]	; (80019ec <TIM_Base_SetConfig+0xc0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d108      	bne.n	800196e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <TIM_Base_SetConfig+0xb8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00b      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d007      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <TIM_Base_SetConfig+0xbc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d003      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a18      	ldr	r2, [pc, #96]	; (80019ec <TIM_Base_SetConfig+0xc0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d108      	bne.n	80019a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <TIM_Base_SetConfig+0xb8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d103      	bne.n	80019d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	615a      	str	r2, [r3, #20]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40012c00 	.word	0x40012c00
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40000800 	.word	0x40000800

080019f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fd72 	bl	8000524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f905 	bl	8001c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b08a      	sub	sp, #40	; 0x28
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d17c      	bne.n	8001bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_UART_Transmit+0x2c>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e075      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Transmit+0x3e>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e06e      	b.n	8001bca <HAL_UART_Transmit+0x11c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2221      	movs	r2, #33	; 0x21
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b02:	f7fe fe95 	bl	8000830 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1c:	d108      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e003      	b.n	8001b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b40:	e02a      	b.n	8001b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f840 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e036      	b.n	8001bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3302      	adds	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e007      	b.n	8001b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1cf      	bne.n	8001b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f810 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e006      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be2:	e02c      	b.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bea:	d028      	beq.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bf2:	f7fe fe1d 	bl	8000830 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d21d      	bcs.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e00f      	b.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4013      	ands	r3, r2
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d0c3      	beq.n	8001be4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ca2:	f023 030c 	bic.w	r3, r3, #12
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <UART_SetConfig+0x114>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d103      	bne.n	8001cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cd0:	f7ff fbf4 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cd8:	f7ff fbdc 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <UART_SetConfig+0x118>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	0119      	lsls	r1, r3, #4
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009a      	lsls	r2, r3, #2
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <UART_SetConfig+0x118>)
 8001d16:	fba3 0302 	umull	r0, r3, r3, r2
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	fb00 f303 	mul.w	r3, r0, r3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	3332      	adds	r3, #50	; 0x32
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <UART_SetConfig+0x118>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d34:	4419      	add	r1, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <UART_SetConfig+0x118>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	3332      	adds	r3, #50	; 0x32
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <UART_SetConfig+0x118>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	440a      	add	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	51eb851f 	.word	0x51eb851f

08001d84 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d8a:	f3ef 8305 	mrs	r3, IPSR
 8001d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d96:	f3ef 8310 	mrs	r3, PRIMASK
 8001d9a:	607b      	str	r3, [r7, #4]
  return(result);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <osKernelInitialize+0x32>
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <osKernelInitialize+0x60>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d109      	bne.n	8001dbe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001daa:	f3ef 8311 	mrs	r3, BASEPRI
 8001dae:	603b      	str	r3, [r7, #0]
  return(result);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001db6:	f06f 0305 	mvn.w	r3, #5
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e00c      	b.n	8001dd8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <osKernelInitialize+0x60>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <osKernelInitialize+0x60>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e002      	b.n	8001dd8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000094 	.word	0x20000094

08001de8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dee:	f3ef 8305 	mrs	r3, IPSR
 8001df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001df4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8001dfe:	607b      	str	r3, [r7, #4]
  return(result);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <osKernelStart+0x32>
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <osKernelStart+0x64>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d109      	bne.n	8001e22 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e12:	603b      	str	r3, [r7, #0]
  return(result);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e1a:	f06f 0305 	mvn.w	r3, #5
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e00e      	b.n	8001e40 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <osKernelStart+0x64>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <osKernelStart+0x64>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001e30:	f001 fa8a 	bl	8003348 <vTaskStartScheduler>
      stat = osOK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e002      	b.n	8001e40 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e40:	68fb      	ldr	r3, [r7, #12]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000094 	.word	0x20000094

08001e50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b092      	sub	sp, #72	; 0x48
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e60:	f3ef 8305 	mrs	r3, IPSR
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 8094 	bne.w	8001f96 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e72:	623b      	str	r3, [r7, #32]
  return(result);
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 808d 	bne.w	8001f96 <osThreadNew+0x146>
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <osThreadNew+0x150>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d106      	bne.n	8001e92 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e84:	f3ef 8311 	mrs	r3, BASEPRI
 8001e88:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8082 	bne.w	8001f96 <osThreadNew+0x146>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d07e      	beq.n	8001f96 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001e9c:	2318      	movs	r3, #24
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001ea4:	f107 031b 	add.w	r3, r7, #27
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d045      	beq.n	8001f42 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <osThreadNew+0x74>
        name = attr->name;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <osThreadNew+0x9a>
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eda:	2b38      	cmp	r3, #56	; 0x38
 8001edc:	d805      	bhi.n	8001eea <osThreadNew+0x9a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <osThreadNew+0x9e>
        return (NULL);
 8001eea:	2300      	movs	r3, #0
 8001eec:	e054      	b.n	8001f98 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00e      	beq.n	8001f24 <osThreadNew+0xd4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b5b      	cmp	r3, #91	; 0x5b
 8001f0c:	d90a      	bls.n	8001f24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <osThreadNew+0xd4>
        mem = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f22:	e010      	b.n	8001f46 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10c      	bne.n	8001f46 <osThreadNew+0xf6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <osThreadNew+0xf6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <osThreadNew+0xf6>
          mem = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f40:	e001      	b.n	8001f46 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d110      	bne.n	8001f6e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f54:	9202      	str	r2, [sp, #8]
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f001 f828 	bl	8002fb8 <xTaskCreateStatic>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e013      	b.n	8001f96 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d110      	bne.n	8001f96 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f001 f86f 	bl	800306a <xTaskCreate>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <osThreadNew+0x146>
          hTask = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f96:	697b      	ldr	r3, [r7, #20]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3738      	adds	r7, #56	; 0x38
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000094 	.word	0x20000094

08001fa4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fac:	f3ef 8305 	mrs	r3, IPSR
 8001fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8001fb2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <osDelay+0x34>
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <osDelay+0x58>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d109      	bne.n	8001fe0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8001fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <osDelay+0x3c>
    stat = osErrorISR;
 8001fd8:	f06f 0305 	mvn.w	r3, #5
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e007      	b.n	8001ff0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 f978 	bl	80032e0 <vTaskDelay>
    }
  }

  return (stat);
 8001ff0:	697b      	ldr	r3, [r7, #20]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000094 	.word	0x20000094

08002000 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002010:	f3ef 8305 	mrs	r3, IPSR
 8002014:	61bb      	str	r3, [r7, #24]
  return(result);
 8002016:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002018:	2b00      	cmp	r3, #0
 800201a:	d170      	bne.n	80020fe <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800201c:	f3ef 8310 	mrs	r3, PRIMASK
 8002020:	617b      	str	r3, [r7, #20]
  return(result);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d16a      	bne.n	80020fe <osMessageQueueNew+0xfe>
 8002028:	4b37      	ldr	r3, [pc, #220]	; (8002108 <osMessageQueueNew+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d105      	bne.n	800203c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002030:	f3ef 8311 	mrs	r3, BASEPRI
 8002034:	613b      	str	r3, [r7, #16]
  return(result);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d160      	bne.n	80020fe <osMessageQueueNew+0xfe>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d05d      	beq.n	80020fe <osMessageQueueNew+0xfe>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05a      	beq.n	80020fe <osMessageQueueNew+0xfe>
    mem = -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d029      	beq.n	80020a8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <osMessageQueueNew+0x82>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b4f      	cmp	r3, #79	; 0x4f
 8002062:	d90e      	bls.n	8002082 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	429a      	cmp	r2, r3
 800207a:	d302      	bcc.n	8002082 <osMessageQueueNew+0x82>
        mem = 1;
 800207c:	2301      	movs	r3, #1
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	e014      	b.n	80020ac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d110      	bne.n	80020ac <osMessageQueueNew+0xac>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d104      	bne.n	80020ac <osMessageQueueNew+0xac>
          mem = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	e001      	b.n	80020ac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10c      	bne.n	80020cc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6899      	ldr	r1, [r3, #8]
 80020ba:	2300      	movs	r3, #0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	460b      	mov	r3, r1
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fa52 	bl	800256c <xQueueGenericCreateStatic>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24
 80020ca:	e008      	b.n	80020de <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80020d2:	2200      	movs	r2, #0
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 faba 	bl	8002650 <xQueueGenericCreate>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00c      	beq.n	80020fe <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	e001      	b.n	80020f6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80020f6:	69f9      	ldr	r1, [r7, #28]
 80020f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020fa:	f000 ff01 	bl	8002f00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000094 	.word	0x20000094

0800210c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002124:	f3ef 8305 	mrs	r3, IPSR
 8002128:	61fb      	str	r3, [r7, #28]
  return(result);
 800212a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10f      	bne.n	8002150 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002130:	f3ef 8310 	mrs	r3, PRIMASK
 8002134:	61bb      	str	r3, [r7, #24]
  return(result);
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <osMessageQueuePut+0x44>
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <osMessageQueuePut+0xe0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d12e      	bne.n	80021a2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002144:	f3ef 8311 	mrs	r3, BASEPRI
 8002148:	617b      	str	r3, [r7, #20]
  return(result);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d028      	beq.n	80021a2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <osMessageQueuePut+0x56>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <osMessageQueuePut+0x56>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002162:	f06f 0303 	mvn.w	r3, #3
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002168:	e039      	b.n	80021de <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800216e:	f107 0210 	add.w	r2, r7, #16
 8002172:	2300      	movs	r3, #0
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6a38      	ldr	r0, [r7, #32]
 8002178:	f000 fbc4 	bl	8002904 <xQueueGenericSendFromISR>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d003      	beq.n	800218a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002182:	f06f 0302 	mvn.w	r3, #2
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002188:	e029      	b.n	80021de <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d026      	beq.n	80021de <osMessageQueuePut+0xd2>
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <osMessageQueuePut+0xe4>)
 8002192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80021a0:	e01d      	b.n	80021de <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <osMessageQueuePut+0xa2>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80021ae:	f06f 0303 	mvn.w	r3, #3
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
 80021b4:	e014      	b.n	80021e0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	6a38      	ldr	r0, [r7, #32]
 80021be:	f000 faa7 	bl	8002710 <xQueueGenericSend>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d00b      	beq.n	80021e0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80021ce:	f06f 0301 	mvn.w	r3, #1
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	e004      	b.n	80021e0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80021d6:	f06f 0302 	mvn.w	r3, #2
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	e000      	b.n	80021e0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80021de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000094 	.word	0x20000094
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800220a:	f3ef 8305 	mrs	r3, IPSR
 800220e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002210:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10f      	bne.n	8002236 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002216:	f3ef 8310 	mrs	r3, PRIMASK
 800221a:	61bb      	str	r3, [r7, #24]
  return(result);
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <osMessageQueueGet+0x42>
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <osMessageQueueGet+0xdc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d12e      	bne.n	8002288 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800222a:	f3ef 8311 	mrs	r3, BASEPRI
 800222e:	617b      	str	r3, [r7, #20]
  return(result);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <osMessageQueueGet+0x54>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <osMessageQueueGet+0x54>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002248:	f06f 0303 	mvn.w	r3, #3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800224e:	e038      	b.n	80022c2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	461a      	mov	r2, r3
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	6a38      	ldr	r0, [r7, #32]
 800225e:	f000 fcc1 	bl	8002be4 <xQueueReceiveFromISR>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d003      	beq.n	8002270 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002268:	f06f 0302 	mvn.w	r3, #2
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800226e:	e028      	b.n	80022c2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d025      	beq.n	80022c2 <osMessageQueueGet+0xce>
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <osMessageQueueGet+0xe0>)
 8002278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002286:	e01c      	b.n	80022c2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <osMessageQueueGet+0xa0>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002294:	f06f 0303 	mvn.w	r3, #3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e013      	b.n	80022c4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	6a38      	ldr	r0, [r7, #32]
 80022a2:	f000 fbc3 	bl	8002a2c <xQueueReceive>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d00b      	beq.n	80022c4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80022b2:	f06f 0301 	mvn.w	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	e004      	b.n	80022c4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80022ba:	f06f 0302 	mvn.w	r3, #2
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
 80022c0:	e000      	b.n	80022c4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80022c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000094 	.word	0x20000094
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <vApplicationGetIdleTaskMemory+0x28>)
 80022e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <vApplicationGetIdleTaskMemory+0x2c>)
 80022ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000098 	.word	0x20000098
 8002304:	200000f4 	.word	0x200000f4

08002308 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <vApplicationGetTimerTaskMemory+0x2c>)
 8002318:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <vApplicationGetTimerTaskMemory+0x30>)
 800231e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200002f4 	.word	0x200002f4
 8002338:	20000350 	.word	0x20000350

0800233c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f103 0208 	add.w	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f103 0208 	add.w	r2, r3, #8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f103 0208 	add.w	r2, r3, #8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ee:	d103      	bne.n	80023f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e00c      	b.n	8002412 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3308      	adds	r3, #8
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e002      	b.n	8002406 <vListInsert+0x2e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	429a      	cmp	r2, r3
 8002410:	d2f6      	bcs.n	8002400 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6892      	ldr	r2, [r2, #8]
 800245e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6852      	ldr	r2, [r2, #4]
 8002468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d103      	bne.n	800247c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
	...

0800249c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	e7fe      	b.n	80024c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80024c4:	f002 f850 	bl	8004568 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	441a      	add	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	3b01      	subs	r3, #1
 80024f6:	68f9      	ldr	r1, [r7, #12]
 80024f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	441a      	add	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d114      	bne.n	8002544 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01a      	beq.n	8002558 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3310      	adds	r3, #16
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f992 	bl	8003850 <xTaskRemoveFromEventList>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <xQueueGenericReset+0xcc>)
 8002534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	e009      	b.n	8002558 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3310      	adds	r3, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fef7 	bl	800233c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3324      	adds	r3, #36	; 0x24
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fef2 	bl	800233c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002558:	f002 f834 	bl	80045c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <xQueueGenericCreateStatic+0x28>
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
 8002592:	e7fe      	b.n	8002592 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <xQueueGenericCreateStatic+0x42>
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	e7fe      	b.n	80025ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <xQueueGenericCreateStatic+0x4e>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <xQueueGenericCreateStatic+0x52>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xQueueGenericCreateStatic+0x54>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <xQueueGenericCreateStatic+0x6c>
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	e7fe      	b.n	80025d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <xQueueGenericCreateStatic+0x78>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <xQueueGenericCreateStatic+0x7c>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <xQueueGenericCreateStatic+0x7e>
 80025e8:	2300      	movs	r3, #0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <xQueueGenericCreateStatic+0x96>
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	e7fe      	b.n	8002600 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002602:	2350      	movs	r3, #80	; 0x50
 8002604:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b50      	cmp	r3, #80	; 0x50
 800260a:	d009      	beq.n	8002620 <xQueueGenericCreateStatic+0xb4>
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e7fe      	b.n	800261e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002632:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f842 	bl	80026ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002648:	4618      	mov	r0, r3
 800264a:	3730      	adds	r7, #48	; 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <xQueueGenericCreate+0x28>
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e7fe      	b.n	8002676 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e004      	b.n	800268e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3350      	adds	r3, #80	; 0x50
 8002692:	4618      	mov	r0, r3
 8002694:	f002 f85e 	bl	8004754 <pvPortMalloc>
 8002698:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00f      	beq.n	80026c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f805 	bl	80026ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026c0:	69bb      	ldr	r3, [r7, #24]
	}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e002      	b.n	80026ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026f8:	2101      	movs	r1, #1
 80026fa:	69b8      	ldr	r0, [r7, #24]
 80026fc:	f7ff fece 	bl	800249c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08e      	sub	sp, #56	; 0x38
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800271e:	2300      	movs	r3, #0
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <xQueueGenericSend+0x30>
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
 800273e:	e7fe      	b.n	800273e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <xQueueGenericSend+0x3e>
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueGenericSend+0x42>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueGenericSend+0x44>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <xQueueGenericSend+0x5c>
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e7fe      	b.n	800276a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d103      	bne.n	800277a <xQueueGenericSend+0x6a>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <xQueueGenericSend+0x6e>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <xQueueGenericSend+0x70>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <xQueueGenericSend+0x88>
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	e7fe      	b.n	8002796 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002798:	f001 fa14 	bl	8003bc4 <xTaskGetSchedulerState>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <xQueueGenericSend+0x98>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <xQueueGenericSend+0x9c>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <xQueueGenericSend+0x9e>
 80027ac:	2300      	movs	r3, #0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <xQueueGenericSend+0xb6>
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	e7fe      	b.n	80027c4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027c6:	f001 fecf 	bl	8004568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d302      	bcc.n	80027dc <xQueueGenericSend+0xcc>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d129      	bne.n	8002830 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e2:	f000 fa7c 	bl	8002cde <prvCopyDataToQueue>
 80027e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	3324      	adds	r3, #36	; 0x24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 f82b 	bl	8003850 <xTaskRemoveFromEventList>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002800:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <xQueueGenericSend+0x1f0>)
 8002802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	e00a      	b.n	8002828 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <xQueueGenericSend+0x1f0>)
 800281a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002828:	f001 fecc 	bl	80045c4 <vPortExitCritical>
				return pdPASS;
 800282c:	2301      	movs	r3, #1
 800282e:	e063      	b.n	80028f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002836:	f001 fec5 	bl	80045c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800283a:	2300      	movs	r3, #0
 800283c:	e05c      	b.n	80028f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4618      	mov	r0, r3
 800284a:	f001 f863 	bl	8003914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002852:	f001 feb7 	bl	80045c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002856:	f000 fddb 	bl	8003410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800285a:	f001 fe85 	bl	8004568 <vPortEnterCritical>
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002864:	b25b      	sxtb	r3, r3
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286a:	d103      	bne.n	8002874 <xQueueGenericSend+0x164>
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002880:	d103      	bne.n	800288a <xQueueGenericSend+0x17a>
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800288a:	f001 fe9b 	bl	80045c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800288e:	1d3a      	adds	r2, r7, #4
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f001 f852 	bl	8003940 <xTaskCheckForTimeOut>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d124      	bne.n	80028ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a4:	f000 fb13 	bl	8002ece <prvIsQueueFull>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	3310      	adds	r3, #16
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff7c 	bl	80037b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028be:	f000 fa9e 	bl	8002dfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028c2:	f000 fdb3 	bl	800342c <xTaskResumeAll>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f af7c 	bne.w	80027c6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <xQueueGenericSend+0x1f0>)
 80028d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	e772      	b.n	80027c6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e2:	f000 fa8c 	bl	8002dfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028e6:	f000 fda1 	bl	800342c <xTaskResumeAll>
 80028ea:	e76c      	b.n	80027c6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ee:	f000 fa86 	bl	8002dfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028f2:	f000 fd9b 	bl	800342c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028f6:	2300      	movs	r3, #0
		}
	}
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3738      	adds	r7, #56	; 0x38
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08e      	sub	sp, #56	; 0x38
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <xQueueGenericSendFromISR+0x2c>
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	e7fe      	b.n	800292e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <xQueueGenericSendFromISR+0x3a>
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <xQueueGenericSendFromISR+0x3e>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <xQueueGenericSendFromISR+0x40>
 8002942:	2300      	movs	r3, #0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <xQueueGenericSendFromISR+0x58>
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	e7fe      	b.n	800295a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d103      	bne.n	800296a <xQueueGenericSendFromISR+0x66>
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <xQueueGenericSendFromISR+0x6a>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <xQueueGenericSendFromISR+0x6c>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <xQueueGenericSendFromISR+0x84>
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	e7fe      	b.n	8002986 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002988:	f001 fea8 	bl	80046dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800298c:	f3ef 8211 	mrs	r2, BASEPRI
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	61ba      	str	r2, [r7, #24]
 80029a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d302      	bcc.n	80029ba <xQueueGenericSendFromISR+0xb6>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d12c      	bne.n	8002a14 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ca:	f000 f988 	bl	8002cde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80029ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d6:	d112      	bne.n	80029fe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 ff33 	bl	8003850 <xTaskRemoveFromEventList>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e007      	b.n	8002a0e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a12:	e001      	b.n	8002a18 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3738      	adds	r7, #56	; 0x38
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <xQueueReceive+0x2e>
	__asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	e7fe      	b.n	8002a58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <xQueueReceive+0x3c>
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <xQueueReceive+0x40>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <xQueueReceive+0x42>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <xQueueReceive+0x5a>
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	e7fe      	b.n	8002a84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a86:	f001 f89d 	bl	8003bc4 <xTaskGetSchedulerState>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <xQueueReceive+0x6a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <xQueueReceive+0x6e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <xQueueReceive+0x70>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <xQueueReceive+0x88>
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e7fe      	b.n	8002ab2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ab4:	f001 fd58 	bl	8004568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01f      	beq.n	8002b04 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac8:	f000 f973 	bl	8002db2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	1e5a      	subs	r2, r3, #1
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00f      	beq.n	8002afc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	3310      	adds	r3, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 feb5 	bl	8003850 <xTaskRemoveFromEventList>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <xQueueReceive+0x1b4>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002afc:	f001 fd62 	bl	80045c4 <vPortExitCritical>
				return pdPASS;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e069      	b.n	8002bd8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b0a:	f001 fd5b 	bl	80045c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e062      	b.n	8002bd8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fef9 	bl	8003914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b26:	f001 fd4d 	bl	80045c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b2a:	f000 fc71 	bl	8003410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b2e:	f001 fd1b 	bl	8004568 <vPortEnterCritical>
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3e:	d103      	bne.n	8002b48 <xQueueReceive+0x11c>
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b54:	d103      	bne.n	8002b5e <xQueueReceive+0x132>
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b5e:	f001 fd31 	bl	80045c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b62:	1d3a      	adds	r2, r7, #4
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fee8 	bl	8003940 <xTaskCheckForTimeOut>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d123      	bne.n	8002bbe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b78:	f000 f993 	bl	8002ea2 <prvIsQueueEmpty>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d017      	beq.n	8002bb2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	3324      	adds	r3, #36	; 0x24
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fe12 	bl	80037b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b92:	f000 f934 	bl	8002dfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b96:	f000 fc49 	bl	800342c <xTaskResumeAll>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d189      	bne.n	8002ab4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <xQueueReceive+0x1b4>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	e780      	b.n	8002ab4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb4:	f000 f923 	bl	8002dfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bb8:	f000 fc38 	bl	800342c <xTaskResumeAll>
 8002bbc:	e77a      	b.n	8002ab4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc0:	f000 f91d 	bl	8002dfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bc4:	f000 fc32 	bl	800342c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bca:	f000 f96a 	bl	8002ea2 <prvIsQueueEmpty>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f43f af6f 	beq.w	8002ab4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002bd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3730      	adds	r7, #48	; 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	; 0x38
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <xQueueReceiveFromISR+0x2a>
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	e7fe      	b.n	8002c0c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <xQueueReceiveFromISR+0x38>
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <xQueueReceiveFromISR+0x3c>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <xQueueReceiveFromISR+0x3e>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <xQueueReceiveFromISR+0x56>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	e7fe      	b.n	8002c38 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c3a:	f001 fd4f 	bl	80046dc <vPortValidateInterruptPriority>
	__asm volatile
 8002c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	61ba      	str	r2, [r7, #24]
 8002c54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02f      	beq.n	8002cc6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c74:	f000 f89d 	bl	8002db2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d112      	bne.n	8002cb0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	3310      	adds	r3, #16
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fdda 	bl	8003850 <xTaskRemoveFromEventList>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00e      	beq.n	8002cc0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e007      	b.n	8002cc0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc4:	e001      	b.n	8002cca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3738      	adds	r7, #56	; 0x38
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d14d      	bne.n	8002da0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 ff79 	bl	8003c00 <xTaskPriorityDisinherit>
 8002d0e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	e043      	b.n	8002da0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6898      	ldr	r0, [r3, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	461a      	mov	r2, r3
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	f001 ff11 	bl	8004b50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	441a      	add	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d32b      	bcc.n	8002da0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e026      	b.n	8002da0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68d8      	ldr	r0, [r3, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	f001 fef7 	bl	8004b50 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d207      	bcs.n	8002d8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	425b      	negs	r3, r3
 8002d88:	441a      	add	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d105      	bne.n	8002da0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002da8:	697b      	ldr	r3, [r7, #20]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d018      	beq.n	8002df6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d303      	bcc.n	8002de6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68d9      	ldr	r1, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	461a      	mov	r2, r3
 8002df0:	6838      	ldr	r0, [r7, #0]
 8002df2:	f001 fead 	bl	8004b50 <memcpy>
	}
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e06:	f001 fbaf 	bl	8004568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e12:	e011      	b.n	8002e38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3324      	adds	r3, #36	; 0x24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fd15 	bl	8003850 <xTaskRemoveFromEventList>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e2c:	f000 fde8 	bl	8003a00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	dce9      	bgt.n	8002e14 <prvUnlockQueue+0x16>
 8002e40:	e000      	b.n	8002e44 <prvUnlockQueue+0x46>
					break;
 8002e42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e4c:	f001 fbba 	bl	80045c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e50:	f001 fb8a 	bl	8004568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e5c:	e011      	b.n	8002e82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3310      	adds	r3, #16
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fcf0 	bl	8003850 <xTaskRemoveFromEventList>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e76:	f000 fdc3 	bl	8003a00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e7a:	7bbb      	ldrb	r3, [r7, #14]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dce9      	bgt.n	8002e5e <prvUnlockQueue+0x60>
 8002e8a:	e000      	b.n	8002e8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	22ff      	movs	r2, #255	; 0xff
 8002e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e96:	f001 fb95 	bl	80045c4 <vPortExitCritical>
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eaa:	f001 fb5d 	bl	8004568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e001      	b.n	8002ec0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ec0:	f001 fb80 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ed6:	f001 fb47 	bl	8004568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d102      	bne.n	8002eec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e001      	b.n	8002ef0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ef0:	f001 fb68 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e014      	b.n	8002f3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <vQueueAddToRegistry+0x4c>)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <vQueueAddToRegistry+0x4c>)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <vQueueAddToRegistry+0x4c>)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f32:	e005      	b.n	8002f40 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b07      	cmp	r3, #7
 8002f3e:	d9e7      	bls.n	8002f10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20001a40 	.word	0x20001a40

08002f50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f60:	f001 fb02 	bl	8004568 <vPortEnterCritical>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f70:	d103      	bne.n	8002f7a <vQueueWaitForMessageRestricted+0x2a>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f80:	b25b      	sxtb	r3, r3
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f86:	d103      	bne.n	8002f90 <vQueueWaitForMessageRestricted+0x40>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f90:	f001 fb18 	bl	80045c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3324      	adds	r3, #36	; 0x24
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fc29 	bl	80037fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff27 	bl	8002dfe <prvUnlockQueue>
	}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	; 0x38
 8002fbc:	af04      	add	r7, sp, #16
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <xTaskCreateStatic+0x28>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	623b      	str	r3, [r7, #32]
 8002fde:	e7fe      	b.n	8002fde <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <xTaskCreateStatic+0x42>
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	e7fe      	b.n	8002ff8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ffa:	235c      	movs	r3, #92	; 0x5c
 8002ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b5c      	cmp	r3, #92	; 0x5c
 8003002:	d009      	beq.n	8003018 <xTaskCreateStatic+0x60>
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	e7fe      	b.n	8003016 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01e      	beq.n	800305c <xTaskCreateStatic+0xa4>
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800302c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2202      	movs	r2, #2
 8003032:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003036:	2300      	movs	r3, #0
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f850 	bl	80030f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003056:	f000 f8d3 	bl	8003200 <prvAddNewTaskToReadyList>
 800305a:	e001      	b.n	8003060 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003060:	697b      	ldr	r3, [r7, #20]
	}
 8003062:	4618      	mov	r0, r3
 8003064:	3728      	adds	r7, #40	; 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800306a:	b580      	push	{r7, lr}
 800306c:	b08c      	sub	sp, #48	; 0x30
 800306e:	af04      	add	r7, sp, #16
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fb68 	bl	8004754 <pvPortMalloc>
 8003084:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800308c:	205c      	movs	r0, #92	; 0x5c
 800308e:	f001 fb61 	bl	8004754 <pvPortMalloc>
 8003092:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e005      	b.n	80030ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f001 fc18 	bl	80048d8 <vPortFree>
 80030a8:	e001      	b.n	80030ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d017      	beq.n	80030e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	2300      	movs	r3, #0
 80030c0:	9303      	str	r3, [sp, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f80e 	bl	80030f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030d8:	69f8      	ldr	r0, [r7, #28]
 80030da:	f000 f891 	bl	8003200 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e002      	b.n	80030ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030ea:	69bb      	ldr	r3, [r7, #24]
	}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	21a5      	movs	r1, #165	; 0xa5
 800310e:	f001 fd2a 	bl	8004b66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800311c:	3b01      	subs	r3, #1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <prvInitialiseNewTask+0x56>
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e7fe      	b.n	8003148 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e012      	b.n	8003176 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	7819      	ldrb	r1, [r3, #0]
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	3334      	adds	r3, #52	; 0x34
 8003160:	460a      	mov	r2, r1
 8003162:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d9e9      	bls.n	8003150 <prvInitialiseNewTask+0x5c>
 800317c:	e000      	b.n	8003180 <prvInitialiseNewTask+0x8c>
		{
			break;
 800317e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	2b37      	cmp	r3, #55	; 0x37
 800318c:	d901      	bls.n	8003192 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800318e:	2337      	movs	r3, #55	; 0x37
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	2200      	movs	r2, #0
 80031a2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	3304      	adds	r3, #4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f8e6 	bl	800237a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	3318      	adds	r3, #24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f8e1 	bl	800237a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	69b8      	ldr	r0, [r7, #24]
 80031e2:	f001 f8d7 	bl	8004394 <pxPortInitialiseStack>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031f8:	bf00      	nop
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003208:	f001 f9ae 	bl	8004568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800320c:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <prvAddNewTaskToReadyList+0xc4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <prvAddNewTaskToReadyList+0xc4>)
 8003214:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003216:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <prvAddNewTaskToReadyList+0xc8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <prvAddNewTaskToReadyList+0xc8>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <prvAddNewTaskToReadyList+0xc4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d110      	bne.n	800324e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800322c:	f000 fc0c 	bl	8003a48 <prvInitialiseTaskLists>
 8003230:	e00d      	b.n	800324e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <prvAddNewTaskToReadyList+0xcc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <prvAddNewTaskToReadyList+0xc8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d802      	bhi.n	800324e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <prvAddNewTaskToReadyList+0xc8>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <prvAddNewTaskToReadyList+0xd0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <prvAddNewTaskToReadyList+0xd0>)
 8003256:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <prvAddNewTaskToReadyList+0xd0>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <prvAddNewTaskToReadyList+0xd4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d903      	bls.n	8003274 <prvAddNewTaskToReadyList+0x74>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <prvAddNewTaskToReadyList+0xd4>)
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <prvAddNewTaskToReadyList+0xd8>)
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7ff f881 	bl	8002392 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003290:	f001 f998 	bl	80045c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <prvAddNewTaskToReadyList+0xcc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <prvAddNewTaskToReadyList+0xc8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d207      	bcs.n	80032ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <prvAddNewTaskToReadyList+0xdc>)
 80032ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000c24 	.word	0x20000c24
 80032c8:	20000750 	.word	0x20000750
 80032cc:	20000c30 	.word	0x20000c30
 80032d0:	20000c40 	.word	0x20000c40
 80032d4:	20000c2c 	.word	0x20000c2c
 80032d8:	20000754 	.word	0x20000754
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <vTaskDelay+0x60>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <vTaskDelay+0x2e>
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e7fe      	b.n	800330c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800330e:	f000 f87f 	bl	8003410 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003312:	2100      	movs	r1, #0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fcdf 	bl	8003cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800331a:	f000 f887 	bl	800342c <xTaskResumeAll>
 800331e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <vTaskDelay+0x64>)
 8003328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000c4c 	.word	0x20000c4c
 8003344:	e000ed04 	.word	0xe000ed04

08003348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003356:	463a      	mov	r2, r7
 8003358:	1d39      	adds	r1, r7, #4
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe ffba 	bl	80022d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	9202      	str	r2, [sp, #8]
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	2300      	movs	r3, #0
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2300      	movs	r3, #0
 8003374:	460a      	mov	r2, r1
 8003376:	4920      	ldr	r1, [pc, #128]	; (80033f8 <vTaskStartScheduler+0xb0>)
 8003378:	4820      	ldr	r0, [pc, #128]	; (80033fc <vTaskStartScheduler+0xb4>)
 800337a:	f7ff fe1d 	bl	8002fb8 <xTaskCreateStatic>
 800337e:	4602      	mov	r2, r0
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <vTaskStartScheduler+0xb8>)
 8003382:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <vTaskStartScheduler+0xb8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e001      	b.n	8003396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d102      	bne.n	80033a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800339c:	f000 fcf0 	bl	8003d80 <xTimerCreateTimerTask>
 80033a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d115      	bne.n	80033d4 <vTaskStartScheduler+0x8c>
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <vTaskStartScheduler+0xbc>)
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <vTaskStartScheduler+0xc0>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <vTaskStartScheduler+0xc4>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033ce:	f001 f85b 	bl	8004488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033d2:	e00d      	b.n	80033f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033da:	d109      	bne.n	80033f0 <vTaskStartScheduler+0xa8>
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e7fe      	b.n	80033ee <vTaskStartScheduler+0xa6>
}
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	08005404 	.word	0x08005404
 80033fc:	08003a19 	.word	0x08003a19
 8003400:	20000c48 	.word	0x20000c48
 8003404:	20000c44 	.word	0x20000c44
 8003408:	20000c30 	.word	0x20000c30
 800340c:	20000c28 	.word	0x20000c28

08003410 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <vTaskSuspendAll+0x18>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a03      	ldr	r2, [pc, #12]	; (8003428 <vTaskSuspendAll+0x18>)
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000c4c 	.word	0x20000c4c

0800342c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <xTaskResumeAll+0x114>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <xTaskResumeAll+0x2a>
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	e7fe      	b.n	8003454 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003456:	f001 f887 	bl	8004568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <xTaskResumeAll+0x114>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	4a37      	ldr	r2, [pc, #220]	; (8003540 <xTaskResumeAll+0x114>)
 8003462:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <xTaskResumeAll+0x114>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d162      	bne.n	8003532 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <xTaskResumeAll+0x118>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05e      	beq.n	8003532 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003474:	e02f      	b.n	80034d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <xTaskResumeAll+0x11c>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3318      	adds	r3, #24
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe ffe0 	bl	8002448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3304      	adds	r3, #4
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe ffdb 	bl	8002448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <xTaskResumeAll+0x120>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d903      	bls.n	80034a6 <xTaskResumeAll+0x7a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <xTaskResumeAll+0x120>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4a27      	ldr	r2, [pc, #156]	; (8003550 <xTaskResumeAll+0x124>)
 80034b4:	441a      	add	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f7fe ff68 	bl	8002392 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <xTaskResumeAll+0x128>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d302      	bcc.n	80034d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <xTaskResumeAll+0x12c>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <xTaskResumeAll+0x11c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1cb      	bne.n	8003476 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034e4:	f000 fb4a 	bl	8003b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034e8:	4b1c      	ldr	r3, [pc, #112]	; (800355c <xTaskResumeAll+0x130>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034f4:	f000 f844 	bl	8003580 <xTaskIncrementTick>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <xTaskResumeAll+0x12c>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f1      	bne.n	80034f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <xTaskResumeAll+0x130>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <xTaskResumeAll+0x12c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800351e:	2301      	movs	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <xTaskResumeAll+0x134>)
 8003524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003532:	f001 f847 	bl	80045c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003536:	68bb      	ldr	r3, [r7, #8]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000c4c 	.word	0x20000c4c
 8003544:	20000c24 	.word	0x20000c24
 8003548:	20000be4 	.word	0x20000be4
 800354c:	20000c2c 	.word	0x20000c2c
 8003550:	20000754 	.word	0x20000754
 8003554:	20000750 	.word	0x20000750
 8003558:	20000c38 	.word	0x20000c38
 800355c:	20000c34 	.word	0x20000c34
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <xTaskGetTickCount+0x18>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20000c28 	.word	0x20000c28

08003580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <xTaskIncrementTick+0x150>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 808d 	bne.w	80036ae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003594:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <xTaskIncrementTick+0x154>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <xTaskIncrementTick+0x154>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11f      	bne.n	80035e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <xTaskIncrementTick+0x158>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <xTaskIncrementTick+0x46>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	e7fe      	b.n	80035c4 <xTaskIncrementTick+0x44>
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <xTaskIncrementTick+0x158>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <xTaskIncrementTick+0x15c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a41      	ldr	r2, [pc, #260]	; (80036d8 <xTaskIncrementTick+0x158>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4a41      	ldr	r2, [pc, #260]	; (80036dc <xTaskIncrementTick+0x15c>)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <xTaskIncrementTick+0x160>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a3f      	ldr	r2, [pc, #252]	; (80036e0 <xTaskIncrementTick+0x160>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	f000 faca 	bl	8003b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <xTaskIncrementTick+0x164>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d34e      	bcc.n	8003690 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <xTaskIncrementTick+0x158>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <xTaskIncrementTick+0x80>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <xTaskIncrementTick+0x82>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <xTaskIncrementTick+0x164>)
 8003608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800360c:	601a      	str	r2, [r3, #0]
					break;
 800360e:	e03f      	b.n	8003690 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003610:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <xTaskIncrementTick+0x158>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d203      	bcs.n	8003630 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003628:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <xTaskIncrementTick+0x164>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
						break;
 800362e:	e02f      	b.n	8003690 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3304      	adds	r3, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe ff07 	bl	8002448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3318      	adds	r3, #24
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fefe 	bl	8002448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <xTaskIncrementTick+0x168>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d903      	bls.n	8003660 <xTaskIncrementTick+0xe0>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <xTaskIncrementTick+0x168>)
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <xTaskIncrementTick+0x16c>)
 800366e:	441a      	add	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f7fe fe8b 	bl	8002392 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <xTaskIncrementTick+0x170>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	429a      	cmp	r2, r3
 8003688:	d3b3      	bcc.n	80035f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800368e:	e7b0      	b.n	80035f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <xTaskIncrementTick+0x170>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4915      	ldr	r1, [pc, #84]	; (80036ec <xTaskIncrementTick+0x16c>)
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d907      	bls.n	80036b8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e004      	b.n	80036b8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <xTaskIncrementTick+0x174>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <xTaskIncrementTick+0x174>)
 80036b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <xTaskIncrementTick+0x178>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036c4:	697b      	ldr	r3, [r7, #20]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000c4c 	.word	0x20000c4c
 80036d4:	20000c28 	.word	0x20000c28
 80036d8:	20000bdc 	.word	0x20000bdc
 80036dc:	20000be0 	.word	0x20000be0
 80036e0:	20000c3c 	.word	0x20000c3c
 80036e4:	20000c44 	.word	0x20000c44
 80036e8:	20000c2c 	.word	0x20000c2c
 80036ec:	20000754 	.word	0x20000754
 80036f0:	20000750 	.word	0x20000750
 80036f4:	20000c34 	.word	0x20000c34
 80036f8:	20000c38 	.word	0x20000c38

080036fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003702:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <vTaskSwitchContext+0xa4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <vTaskSwitchContext+0xa8>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003710:	e040      	b.n	8003794 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <vTaskSwitchContext+0xa8>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <vTaskSwitchContext+0xac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e00f      	b.n	8003740 <vTaskSwitchContext+0x44>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <vTaskSwitchContext+0x3e>
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	e7fe      	b.n	8003738 <vTaskSwitchContext+0x3c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b01      	subs	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	491a      	ldr	r1, [pc, #104]	; (80037ac <vTaskSwitchContext+0xb0>)
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0e5      	beq.n	8003720 <vTaskSwitchContext+0x24>
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4a13      	ldr	r2, [pc, #76]	; (80037ac <vTaskSwitchContext+0xb0>)
 8003760:	4413      	add	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3308      	adds	r3, #8
 8003776:	429a      	cmp	r2, r3
 8003778:	d104      	bne.n	8003784 <vTaskSwitchContext+0x88>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <vTaskSwitchContext+0xb4>)
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <vTaskSwitchContext+0xac>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000c4c 	.word	0x20000c4c
 80037a4:	20000c38 	.word	0x20000c38
 80037a8:	20000c2c 	.word	0x20000c2c
 80037ac:	20000754 	.word	0x20000754
 80037b0:	20000750 	.word	0x20000750

080037b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <vTaskPlaceOnEventList+0x24>
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e7fe      	b.n	80037d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <vTaskPlaceOnEventList+0x44>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3318      	adds	r3, #24
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fe fdf9 	bl	80023d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037e6:	2101      	movs	r1, #1
 80037e8:	6838      	ldr	r0, [r7, #0]
 80037ea:	f000 fa75 	bl	8003cd8 <prvAddCurrentTaskToDelayedList>
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000750 	.word	0x20000750

080037fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <vTaskPlaceOnEventListRestricted+0x26>
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e7fe      	b.n	8003820 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <vTaskPlaceOnEventListRestricted+0x50>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3318      	adds	r3, #24
 8003828:	4619      	mov	r1, r3
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7fe fdb1 	bl	8002392 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800383a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	68b8      	ldr	r0, [r7, #8]
 8003840:	f000 fa4a 	bl	8003cd8 <prvAddCurrentTaskToDelayedList>
	}
 8003844:	bf00      	nop
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000750 	.word	0x20000750

08003850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <xTaskRemoveFromEventList+0x2a>
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e7fe      	b.n	8003878 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3318      	adds	r3, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fde2 	bl	8002448 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <xTaskRemoveFromEventList+0xac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11d      	bne.n	80038c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3304      	adds	r3, #4
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe fdd9 	bl	8002448 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <xTaskRemoveFromEventList+0xb0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d903      	bls.n	80038aa <xTaskRemoveFromEventList+0x5a>
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <xTaskRemoveFromEventList+0xb0>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <xTaskRemoveFromEventList+0xb4>)
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe fd66 	bl	8002392 <vListInsertEnd>
 80038c6:	e005      	b.n	80038d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4619      	mov	r1, r3
 80038ce:	480e      	ldr	r0, [pc, #56]	; (8003908 <xTaskRemoveFromEventList+0xb8>)
 80038d0:	f7fe fd5f 	bl	8002392 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <xTaskRemoveFromEventList+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d905      	bls.n	80038ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <xTaskRemoveFromEventList+0xc0>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e001      	b.n	80038f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000c4c 	.word	0x20000c4c
 8003900:	20000c2c 	.word	0x20000c2c
 8003904:	20000754 	.word	0x20000754
 8003908:	20000be4 	.word	0x20000be4
 800390c:	20000750 	.word	0x20000750
 8003910:	20000c38 	.word	0x20000c38

08003914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <vTaskInternalSetTimeOutState+0x24>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <vTaskInternalSetTimeOutState+0x28>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000c3c 	.word	0x20000c3c
 800393c:	20000c28 	.word	0x20000c28

08003940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <xTaskCheckForTimeOut+0x24>
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e7fe      	b.n	8003962 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <xTaskCheckForTimeOut+0x3e>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e7fe      	b.n	800397c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800397e:	f000 fdf3 	bl	8004568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <xTaskCheckForTimeOut+0xb8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399a:	d102      	bne.n	80039a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e023      	b.n	80039ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <xTaskCheckForTimeOut+0xbc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d007      	beq.n	80039be <xTaskCheckForTimeOut+0x7e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	e015      	b.n	80039ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d20b      	bcs.n	80039e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad2      	subs	r2, r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff9d 	bl	8003914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e004      	b.n	80039ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ea:	f000 fdeb 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 80039ee:	69fb      	ldr	r3, [r7, #28]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000c28 	.word	0x20000c28
 80039fc:	20000c3c 	.word	0x20000c3c

08003a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <vTaskMissedYield+0x14>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000c38 	.word	0x20000c38

08003a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a20:	f000 f852 	bl	8003ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <prvIdleTask+0x28>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d9f9      	bls.n	8003a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <prvIdleTask+0x2c>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a3c:	e7f0      	b.n	8003a20 <prvIdleTask+0x8>
 8003a3e:	bf00      	nop
 8003a40:	20000754 	.word	0x20000754
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	e00c      	b.n	8003a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <prvInitialiseTaskLists+0x60>)
 8003a60:	4413      	add	r3, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fc6a 	bl	800233c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b37      	cmp	r3, #55	; 0x37
 8003a72:	d9ef      	bls.n	8003a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <prvInitialiseTaskLists+0x64>)
 8003a76:	f7fe fc61 	bl	800233c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a7a:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <prvInitialiseTaskLists+0x68>)
 8003a7c:	f7fe fc5e 	bl	800233c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a80:	480c      	ldr	r0, [pc, #48]	; (8003ab4 <prvInitialiseTaskLists+0x6c>)
 8003a82:	f7fe fc5b 	bl	800233c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a86:	480c      	ldr	r0, [pc, #48]	; (8003ab8 <prvInitialiseTaskLists+0x70>)
 8003a88:	f7fe fc58 	bl	800233c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a8c:	480b      	ldr	r0, [pc, #44]	; (8003abc <prvInitialiseTaskLists+0x74>)
 8003a8e:	f7fe fc55 	bl	800233c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <prvInitialiseTaskLists+0x78>)
 8003a94:	4a05      	ldr	r2, [pc, #20]	; (8003aac <prvInitialiseTaskLists+0x64>)
 8003a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <prvInitialiseTaskLists+0x7c>)
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <prvInitialiseTaskLists+0x68>)
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000754 	.word	0x20000754
 8003aac:	20000bb4 	.word	0x20000bb4
 8003ab0:	20000bc8 	.word	0x20000bc8
 8003ab4:	20000be4 	.word	0x20000be4
 8003ab8:	20000bf8 	.word	0x20000bf8
 8003abc:	20000c10 	.word	0x20000c10
 8003ac0:	20000bdc 	.word	0x20000bdc
 8003ac4:	20000be0 	.word	0x20000be0

08003ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ace:	e019      	b.n	8003b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ad0:	f000 fd4a 	bl	8004568 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <prvCheckTasksWaitingTermination+0x4c>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe fcb1 	bl	8002448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <prvCheckTasksWaitingTermination+0x50>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <prvCheckTasksWaitingTermination+0x50>)
 8003aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <prvCheckTasksWaitingTermination+0x54>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <prvCheckTasksWaitingTermination+0x54>)
 8003af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003afa:	f000 fd63 	bl	80045c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f80e 	bl	8003b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <prvCheckTasksWaitingTermination+0x54>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e1      	bne.n	8003ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000bf8 	.word	0x20000bf8
 8003b18:	20000c24 	.word	0x20000c24
 8003b1c:	20000c0c 	.word	0x20000c0c

08003b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fece 	bl	80048d8 <vPortFree>
				vPortFree( pxTCB );
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fecb 	bl	80048d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b42:	e017      	b.n	8003b74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d103      	bne.n	8003b56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fec2 	bl	80048d8 <vPortFree>
	}
 8003b54:	e00e      	b.n	8003b74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d009      	beq.n	8003b74 <prvDeleteTCB+0x54>
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e7fe      	b.n	8003b72 <prvDeleteTCB+0x52>
	}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <prvResetNextTaskUnblockTime+0x40>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <prvResetNextTaskUnblockTime+0x14>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <prvResetNextTaskUnblockTime+0x16>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <prvResetNextTaskUnblockTime+0x44>)
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b9e:	e008      	b.n	8003bb2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <prvResetNextTaskUnblockTime+0x40>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <prvResetNextTaskUnblockTime+0x44>)
 8003bb0:	6013      	str	r3, [r2, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20000bdc 	.word	0x20000bdc
 8003bc0:	20000c44 	.word	0x20000c44

08003bc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <xTaskGetSchedulerState+0x34>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	e008      	b.n	8003bea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <xTaskGetSchedulerState+0x38>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003be0:	2302      	movs	r3, #2
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	e001      	b.n	8003bea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bea:	687b      	ldr	r3, [r7, #4]
	}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000c30 	.word	0x20000c30
 8003bfc:	20000c4c 	.word	0x20000c4c

08003c00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d054      	beq.n	8003cc0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <xTaskPriorityDisinherit+0xcc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d009      	beq.n	8003c34 <xTaskPriorityDisinherit+0x34>
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e7fe      	b.n	8003c32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <xTaskPriorityDisinherit+0x50>
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	e7fe      	b.n	8003c4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d02c      	beq.n	8003cc0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d128      	bne.n	8003cc0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fbe8 	bl	8002448 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <xTaskPriorityDisinherit+0xd0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d903      	bls.n	8003ca0 <xTaskPriorityDisinherit+0xa0>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <xTaskPriorityDisinherit+0xd0>)
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <xTaskPriorityDisinherit+0xd4>)
 8003cae:	441a      	add	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7fe fb6b 	bl	8002392 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cc0:	697b      	ldr	r3, [r7, #20]
	}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000750 	.word	0x20000750
 8003cd0:	20000c2c 	.word	0x20000c2c
 8003cd4:	20000754 	.word	0x20000754

08003cd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fbaa 	bl	8002448 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfa:	d10a      	bne.n	8003d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4819      	ldr	r0, [pc, #100]	; (8003d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d0c:	f7fe fb41 	bl	8002392 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d10:	e026      	b.n	8003d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d209      	bcs.n	8003d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe fb4e 	bl	80023d8 <vListInsert>
}
 8003d3c:	e010      	b.n	8003d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7fe fb44 	bl	80023d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d202      	bcs.n	8003d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000c28 	.word	0x20000c28
 8003d6c:	20000750 	.word	0x20000750
 8003d70:	20000c10 	.word	0x20000c10
 8003d74:	20000be0 	.word	0x20000be0
 8003d78:	20000bdc 	.word	0x20000bdc
 8003d7c:	20000c44 	.word	0x20000c44

08003d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d8a:	f000 fac3 	bl	8004314 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <xTimerCreateTimerTask+0x80>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d021      	beq.n	8003dda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d9e:	1d3a      	adds	r2, r7, #4
 8003da0:	f107 0108 	add.w	r1, r7, #8
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe faad 	bl	8002308 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	9202      	str	r2, [sp, #8]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	2302      	movs	r3, #2
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	4910      	ldr	r1, [pc, #64]	; (8003e04 <xTimerCreateTimerTask+0x84>)
 8003dc2:	4811      	ldr	r0, [pc, #68]	; (8003e08 <xTimerCreateTimerTask+0x88>)
 8003dc4:	f7ff f8f8 	bl	8002fb8 <xTaskCreateStatic>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <xTimerCreateTimerTask+0x8c>)
 8003dcc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <xTimerCreateTimerTask+0x8c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <xTimerCreateTimerTask+0x74>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e7fe      	b.n	8003df2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003df4:	697b      	ldr	r3, [r7, #20]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000c80 	.word	0x20000c80
 8003e04:	0800540c 	.word	0x0800540c
 8003e08:	08003f29 	.word	0x08003f29
 8003e0c:	20000c84 	.word	0x20000c84

08003e10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <xTimerGenericCommand+0x2c>
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	e7fe      	b.n	8003e3a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <xTimerGenericCommand+0x94>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02a      	beq.n	8003e9a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	dc18      	bgt.n	8003e88 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e56:	f7ff feb5 	bl	8003bc4 <xTaskGetSchedulerState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d109      	bne.n	8003e74 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <xTimerGenericCommand+0x94>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	f107 0110 	add.w	r1, r7, #16
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	f7fe fc50 	bl	8002710 <xQueueGenericSend>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24
 8003e72:	e012      	b.n	8003e9a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <xTimerGenericCommand+0x94>)
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	f107 0110 	add.w	r1, r7, #16
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f7fe fc46 	bl	8002710 <xQueueGenericSend>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24
 8003e86:	e008      	b.n	8003e9a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <xTimerGenericCommand+0x94>)
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	f107 0110 	add.w	r1, r7, #16
 8003e90:	2300      	movs	r3, #0
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	f7fe fd36 	bl	8002904 <xQueueGenericSendFromISR>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000c80 	.word	0x20000c80

08003ea8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <prvProcessExpiredTimer+0x7c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe fac1 	bl	8002448 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d121      	bne.n	8003f12 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	18d1      	adds	r1, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f000 f8c8 	bl	8004070 <prvInsertTimerInActiveList>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d015      	beq.n	8003f12 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	2100      	movs	r1, #0
 8003ef0:	6978      	ldr	r0, [r7, #20]
 8003ef2:	f7ff ff8d 	bl	8003e10 <xTimerGenericCommand>
 8003ef6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <prvProcessExpiredTimer+0x6a>
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e7fe      	b.n	8003f10 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	4798      	blx	r3
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000c78 	.word	0x20000c78

08003f28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f857 	bl	8003fe8 <prvGetNextExpireTime>
 8003f3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f803 	bl	8003f4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f46:	f000 f8d5 	bl	80040f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f4a:	e7f1      	b.n	8003f30 <prvTimerTask+0x8>

08003f4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f56:	f7ff fa5b 	bl	8003410 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f866 	bl	8004030 <prvSampleTimeNow>
 8003f64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d130      	bne.n	8003fce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <prvProcessTimerOrBlockTask+0x3c>
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d806      	bhi.n	8003f88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f7a:	f7ff fa57 	bl	800342c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff91 	bl	8003ea8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f86:	e024      	b.n	8003fd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <prvProcessTimerOrBlockTask+0x90>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <prvProcessTimerOrBlockTask+0x94>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	f7fe ffcf 	bl	8002f50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003fb2:	f7ff fa3b 	bl	800342c <xTaskResumeAll>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <prvProcessTimerOrBlockTask+0x98>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
}
 8003fcc:	e001      	b.n	8003fd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003fce:	f7ff fa2d 	bl	800342c <xTaskResumeAll>
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000c7c 	.word	0x20000c7c
 8003fe0:	20000c80 	.word	0x20000c80
 8003fe4:	e000ed04 	.word	0xe000ed04

08003fe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	; (800402c <prvGetNextExpireTime+0x44>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <prvGetNextExpireTime+0x44>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e001      	b.n	800401e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000c78 	.word	0x20000c78

08004030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004038:	f7ff fa94 	bl	8003564 <xTaskGetTickCount>
 800403c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <prvSampleTimeNow+0x3c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	429a      	cmp	r2, r3
 8004046:	d205      	bcs.n	8004054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004048:	f000 f904 	bl	8004254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e002      	b.n	800405a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800405a:	4a04      	ldr	r2, [pc, #16]	; (800406c <prvSampleTimeNow+0x3c>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000c88 	.word	0x20000c88

08004070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d812      	bhi.n	80040bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e01b      	b.n	80040e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <prvInsertTimerInActiveList+0x7c>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fe f98f 	bl	80023d8 <vListInsert>
 80040ba:	e012      	b.n	80040e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d206      	bcs.n	80040d2 <prvInsertTimerInActiveList+0x62>
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e007      	b.n	80040e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <prvInsertTimerInActiveList+0x80>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7fe f97b 	bl	80023d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040e2:	697b      	ldr	r3, [r7, #20]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000c7c 	.word	0x20000c7c
 80040f0:	20000c78 	.word	0x20000c78

080040f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08e      	sub	sp, #56	; 0x38
 80040f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040fa:	e099      	b.n	8004230 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da17      	bge.n	8004132 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004102:	1d3b      	adds	r3, r7, #4
 8004104:	3304      	adds	r3, #4
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <prvProcessReceivedCommands+0x2e>
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e7fe      	b.n	8004120 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004128:	6850      	ldr	r0, [r2, #4]
 800412a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800412c:	6892      	ldr	r2, [r2, #8]
 800412e:	4611      	mov	r1, r2
 8004130:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	db7a      	blt.n	800422e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe f97d 	bl	8002448 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800414e:	463b      	mov	r3, r7
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff6d 	bl	8004030 <prvSampleTimeNow>
 8004156:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b09      	cmp	r3, #9
 800415c:	d868      	bhi.n	8004230 <prvProcessReceivedCommands+0x13c>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <prvProcessReceivedCommands+0x70>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	0800418d 	.word	0x0800418d
 8004168:	0800418d 	.word	0x0800418d
 800416c:	0800418d 	.word	0x0800418d
 8004170:	08004231 	.word	0x08004231
 8004174:	080041e7 	.word	0x080041e7
 8004178:	0800421d 	.word	0x0800421d
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800418d 	.word	0x0800418d
 8004184:	08004231 	.word	0x08004231
 8004188:	080041e7 	.word	0x080041e7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	18d1      	adds	r1, r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419a:	f7ff ff69 	bl	8004070 <prvInsertTimerInActiveList>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d045      	beq.n	8004230 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d13d      	bne.n	8004230 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	441a      	add	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c6:	f7ff fe23 	bl	8003e10 <xTimerGenericCommand>
 80041ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d12e      	bne.n	8004230 <prvProcessReceivedCommands+0x13c>
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e7fe      	b.n	80041e4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <prvProcessReceivedCommands+0x114>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e7fe      	b.n	8004206 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	18d1      	adds	r1, r2, r3
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004216:	f7ff ff2b 	bl	8004070 <prvInsertTimerInActiveList>
					break;
 800421a:	e009      	b.n	8004230 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004228:	f000 fb56 	bl	80048d8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800422c:	e000      	b.n	8004230 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800422e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <prvProcessReceivedCommands+0x15c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	1d39      	adds	r1, r7, #4
 8004236:	2200      	movs	r2, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fbf7 	bl	8002a2c <xQueueReceive>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af5b 	bne.w	80040fc <prvProcessReceivedCommands+0x8>
	}
}
 8004246:	bf00      	nop
 8004248:	3730      	adds	r7, #48	; 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000c80 	.word	0x20000c80

08004254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800425a:	e044      	b.n	80042e6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <prvSwitchTimerLists+0xb8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004266:	4b29      	ldr	r3, [pc, #164]	; (800430c <prvSwitchTimerLists+0xb8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe f8e7 	bl	8002448 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d12d      	bne.n	80042e6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4413      	add	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d90e      	bls.n	80042ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042a8:	4b18      	ldr	r3, [pc, #96]	; (800430c <prvSwitchTimerLists+0xb8>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f7fe f890 	bl	80023d8 <vListInsert>
 80042b8:	e015      	b.n	80042e6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042ba:	2300      	movs	r3, #0
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	2100      	movs	r1, #0
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fda3 	bl	8003e10 <xTimerGenericCommand>
 80042ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <prvSwitchTimerLists+0x92>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	e7fe      	b.n	80042e4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <prvSwitchTimerLists+0xb8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1b5      	bne.n	800425c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <prvSwitchTimerLists+0xb8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <prvSwitchTimerLists+0xbc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <prvSwitchTimerLists+0xb8>)
 80042fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042fe:	4a04      	ldr	r2, [pc, #16]	; (8004310 <prvSwitchTimerLists+0xbc>)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	6013      	str	r3, [r2, #0]
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000c78 	.word	0x20000c78
 8004310:	20000c7c 	.word	0x20000c7c

08004314 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800431a:	f000 f925 	bl	8004568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <prvCheckForValidListAndQueue+0x60>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d120      	bne.n	8004368 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004326:	4814      	ldr	r0, [pc, #80]	; (8004378 <prvCheckForValidListAndQueue+0x64>)
 8004328:	f7fe f808 	bl	800233c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800432c:	4813      	ldr	r0, [pc, #76]	; (800437c <prvCheckForValidListAndQueue+0x68>)
 800432e:	f7fe f805 	bl	800233c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <prvCheckForValidListAndQueue+0x6c>)
 8004334:	4a10      	ldr	r2, [pc, #64]	; (8004378 <prvCheckForValidListAndQueue+0x64>)
 8004336:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <prvCheckForValidListAndQueue+0x70>)
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <prvCheckForValidListAndQueue+0x68>)
 800433c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <prvCheckForValidListAndQueue+0x74>)
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <prvCheckForValidListAndQueue+0x78>)
 8004346:	2110      	movs	r1, #16
 8004348:	200a      	movs	r0, #10
 800434a:	f7fe f90f 	bl	800256c <xQueueGenericCreateStatic>
 800434e:	4602      	mov	r2, r0
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <prvCheckForValidListAndQueue+0x60>)
 8004352:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <prvCheckForValidListAndQueue+0x60>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <prvCheckForValidListAndQueue+0x60>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	490b      	ldr	r1, [pc, #44]	; (8004390 <prvCheckForValidListAndQueue+0x7c>)
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fdcc 	bl	8002f00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004368:	f000 f92c 	bl	80045c4 <vPortExitCritical>
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000c80 	.word	0x20000c80
 8004378:	20000c50 	.word	0x20000c50
 800437c:	20000c64 	.word	0x20000c64
 8004380:	20000c78 	.word	0x20000c78
 8004384:	20000c7c 	.word	0x20000c7c
 8004388:	20000d2c 	.word	0x20000d2c
 800438c:	20000c8c 	.word	0x20000c8c
 8004390:	08005414 	.word	0x08005414

08004394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3b04      	subs	r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f023 0201 	bic.w	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043c4:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <pxPortInitialiseStack+0x54>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3b14      	subs	r3, #20
 80043ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b20      	subs	r3, #32
 80043da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043dc:	68fb      	ldr	r3, [r7, #12]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	080043ed 	.word	0x080043ed

080043ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <prvTaskExitError+0x4c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fe:	d009      	beq.n	8004414 <prvTaskExitError+0x28>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e7fe      	b.n	8004412 <prvTaskExitError+0x26>
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004426:	bf00      	nop
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0fc      	beq.n	8004428 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	2000000c 	.word	0x2000000c
 800443c:	00000000 	.word	0x00000000

08004440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <pxCurrentTCBConst2>)
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6808      	ldr	r0, [r1, #0]
 8004446:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800444a:	f380 8809 	msr	PSP, r0
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	f04e 0e0d 	orr.w	lr, lr, #13
 800445e:	4770      	bx	lr

08004460 <pxCurrentTCBConst2>:
 8004460:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004468:	4806      	ldr	r0, [pc, #24]	; (8004484 <prvPortStartFirstTask+0x1c>)
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f380 8808 	msr	MSP, r0
 8004472:	b662      	cpsie	i
 8004474:	b661      	cpsie	f
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	df00      	svc	0
 8004480:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004482:	bf00      	nop
 8004484:	e000ed08 	.word	0xe000ed08

08004488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <xPortStartScheduler+0xcc>)
 8004490:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <xPortStartScheduler+0xd0>)
 80044b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044b6:	4b29      	ldr	r3, [pc, #164]	; (800455c <xPortStartScheduler+0xd4>)
 80044b8:	2207      	movs	r2, #7
 80044ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044bc:	e009      	b.n	80044d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <xPortStartScheduler+0xd4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <xPortStartScheduler+0xd4>)
 80044c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d0ef      	beq.n	80044be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044de:	4b1f      	ldr	r3, [pc, #124]	; (800455c <xPortStartScheduler+0xd4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1c3 0307 	rsb	r3, r3, #7
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d009      	beq.n	80044fe <xPortStartScheduler+0x76>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	e7fe      	b.n	80044fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <xPortStartScheduler+0xd4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <xPortStartScheduler+0xd4>)
 8004506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <xPortStartScheduler+0xd4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <xPortStartScheduler+0xd4>)
 8004512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800451c:	4b10      	ldr	r3, [pc, #64]	; (8004560 <xPortStartScheduler+0xd8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <xPortStartScheduler+0xd8>)
 8004522:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004528:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <xPortStartScheduler+0xd8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <xPortStartScheduler+0xd8>)
 800452e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004534:	f000 f8b0 	bl	8004698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <xPortStartScheduler+0xdc>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800453e:	f7ff ff93 	bl	8004468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004542:	f7ff f8db 	bl	80036fc <vTaskSwitchContext>
	prvTaskExitError();
 8004546:	f7ff ff51 	bl	80043ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000e400 	.word	0xe000e400
 8004558:	20000d7c 	.word	0x20000d7c
 800455c:	20000d80 	.word	0x20000d80
 8004560:	e000ed20 	.word	0xe000ed20
 8004564:	2000000c 	.word	0x2000000c

08004568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <vPortEnterCritical+0x54>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <vPortEnterCritical+0x54>)
 8004588:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <vPortEnterCritical+0x54>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortEnterCritical+0x58>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <vPortEnterCritical+0x48>
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	e7fe      	b.n	80045ae <vPortEnterCritical+0x46>
	}
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	2000000c 	.word	0x2000000c
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <vPortExitCritical+0x48>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <vPortExitCritical+0x22>
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e7fe      	b.n	80045e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <vPortExitCritical+0x48>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	4a07      	ldr	r2, [pc, #28]	; (800460c <vPortExitCritical+0x48>)
 80045ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <vPortExitCritical+0x48>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <vPortExitCritical+0x3e>
 80045f8:	2300      	movs	r3, #0
 80045fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	2000000c 	.word	0x2000000c

08004610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004610:	f3ef 8009 	mrs	r0, PSP
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <pxCurrentTCBConst>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004620:	6010      	str	r0, [r2, #0]
 8004622:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004626:	f04f 0050 	mov.w	r0, #80	; 0x50
 800462a:	f380 8811 	msr	BASEPRI, r0
 800462e:	f7ff f865 	bl	80036fc <vTaskSwitchContext>
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8811 	msr	BASEPRI, r0
 800463a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	6808      	ldr	r0, [r1, #0]
 8004642:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004646:	f380 8809 	msr	PSP, r0
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	4770      	bx	lr

08004650 <pxCurrentTCBConst>:
 8004650:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004670:	f7fe ff86 	bl	8003580 <xTaskIncrementTick>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <SysTick_Handler+0x3c>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	2300      	movs	r3, #0
 8004684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <vPortSetupTimerInterrupt+0x30>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <vPortSetupTimerInterrupt+0x34>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <vPortSetupTimerInterrupt+0x38>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <vPortSetupTimerInterrupt+0x3c>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <vPortSetupTimerInterrupt+0x40>)
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ba:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <vPortSetupTimerInterrupt+0x30>)
 80046bc:	2207      	movs	r2, #7
 80046be:	601a      	str	r2, [r3, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	e000e010 	.word	0xe000e010
 80046cc:	e000e018 	.word	0xe000e018
 80046d0:	20000000 	.word	0x20000000
 80046d4:	10624dd3 	.word	0x10624dd3
 80046d8:	e000e014 	.word	0xe000e014

080046dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046e2:	f3ef 8305 	mrs	r3, IPSR
 80046e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d913      	bls.n	8004716 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ee:	4a15      	ldr	r2, [pc, #84]	; (8004744 <vPortValidateInterruptPriority+0x68>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <vPortValidateInterruptPriority+0x6c>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	7afa      	ldrb	r2, [r7, #11]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d209      	bcs.n	8004716 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	e7fe      	b.n	8004714 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <vPortValidateInterruptPriority+0x70>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <vPortValidateInterruptPriority+0x74>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d909      	bls.n	800473a <vPortValidateInterruptPriority+0x5e>
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	e7fe      	b.n	8004738 <vPortValidateInterruptPriority+0x5c>
	}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	e000e3f0 	.word	0xe000e3f0
 8004748:	20000d7c 	.word	0x20000d7c
 800474c:	e000ed0c 	.word	0xe000ed0c
 8004750:	20000d80 	.word	0x20000d80

08004754 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004760:	f7fe fe56 	bl	8003410 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004764:	4b57      	ldr	r3, [pc, #348]	; (80048c4 <pvPortMalloc+0x170>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800476c:	f000 f90c 	bl	8004988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004770:	4b55      	ldr	r3, [pc, #340]	; (80048c8 <pvPortMalloc+0x174>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 808c 	bne.w	8004896 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004784:	2208      	movs	r2, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	2b00      	cmp	r3, #0
 8004794:	d013      	beq.n	80047be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f023 0307 	bic.w	r3, r3, #7
 800479c:	3308      	adds	r3, #8
 800479e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <pvPortMalloc+0x6a>
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e7fe      	b.n	80047bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d068      	beq.n	8004896 <pvPortMalloc+0x142>
 80047c4:	4b41      	ldr	r3, [pc, #260]	; (80048cc <pvPortMalloc+0x178>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d863      	bhi.n	8004896 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047ce:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <pvPortMalloc+0x17c>)
 80047d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047d2:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <pvPortMalloc+0x17c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047d8:	e004      	b.n	80047e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d903      	bls.n	80047f6 <pvPortMalloc+0xa2>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f1      	bne.n	80047da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047f6:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <pvPortMalloc+0x170>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d04a      	beq.n	8004896 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2208      	movs	r2, #8
 8004806:	4413      	add	r3, r2
 8004808:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	2308      	movs	r3, #8
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	429a      	cmp	r2, r3
 8004820:	d91e      	bls.n	8004860 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <pvPortMalloc+0xf4>
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	e7fe      	b.n	8004846 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad2      	subs	r2, r2, r3
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800485a:	69b8      	ldr	r0, [r7, #24]
 800485c:	f000 f8f6 	bl	8004a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <pvPortMalloc+0x178>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	4a18      	ldr	r2, [pc, #96]	; (80048cc <pvPortMalloc+0x178>)
 800486c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <pvPortMalloc+0x178>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <pvPortMalloc+0x180>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d203      	bcs.n	8004882 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <pvPortMalloc+0x178>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <pvPortMalloc+0x180>)
 8004880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <pvPortMalloc+0x174>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	431a      	orrs	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004896:	f7fe fdc9 	bl	800342c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <pvPortMalloc+0x164>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e7fe      	b.n	80048b6 <pvPortMalloc+0x162>
	return pvReturn;
 80048b8:	69fb      	ldr	r3, [r7, #28]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	2000198c 	.word	0x2000198c
 80048c8:	20001998 	.word	0x20001998
 80048cc:	20001990 	.word	0x20001990
 80048d0:	20001984 	.word	0x20001984
 80048d4:	20001994 	.word	0x20001994

080048d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d046      	beq.n	8004978 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048ea:	2308      	movs	r3, #8
 80048ec:	425b      	negs	r3, r3
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4413      	add	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <vPortFree+0xa8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <vPortFree+0x42>
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e7fe      	b.n	8004918 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <vPortFree+0x5e>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	e7fe      	b.n	8004934 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <vPortFree+0xa8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortFree+0xa8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800495c:	f7fe fd58 	bl	8003410 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <vPortFree+0xac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4413      	add	r3, r2
 800496a:	4a06      	ldr	r2, [pc, #24]	; (8004984 <vPortFree+0xac>)
 800496c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	f000 f86c 	bl	8004a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004974:	f7fe fd5a 	bl	800342c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004978:	bf00      	nop
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20001998 	.word	0x20001998
 8004984:	20001990 	.word	0x20001990

08004988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800498e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <prvHeapInit+0xac>)
 8004996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3307      	adds	r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <prvHeapInit+0xac>)
 80049b8:	4413      	add	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <prvHeapInit+0xb0>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <prvHeapInit+0xb0>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049d4:	2208      	movs	r2, #8
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <prvHeapInit+0xb4>)
 80049e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <prvHeapInit+0xb4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <prvHeapInit+0xb4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	1ad2      	subs	r2, r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <prvHeapInit+0xb4>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <prvHeapInit+0xb8>)
 8004a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <prvHeapInit+0xbc>)
 8004a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <prvHeapInit+0xc0>)
 8004a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000d84 	.word	0x20000d84
 8004a38:	20001984 	.word	0x20001984
 8004a3c:	2000198c 	.word	0x2000198c
 8004a40:	20001994 	.word	0x20001994
 8004a44:	20001990 	.word	0x20001990
 8004a48:	20001998 	.word	0x20001998

08004a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <prvInsertBlockIntoFreeList+0xa8>)
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e002      	b.n	8004a60 <prvInsertBlockIntoFreeList+0x14>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d8f7      	bhi.n	8004a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4413      	add	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d108      	bne.n	8004a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	441a      	add	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d118      	bne.n	8004ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <prvInsertBlockIntoFreeList+0xac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d00d      	beq.n	8004aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e008      	b.n	8004adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvInsertBlockIntoFreeList+0xac>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d002      	beq.n	8004aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	20001984 	.word	0x20001984
 8004af8:	2000198c 	.word	0x2000198c

08004afc <__errno>:
 8004afc:	4b01      	ldr	r3, [pc, #4]	; (8004b04 <__errno+0x8>)
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000010 	.word	0x20000010

08004b08 <__libc_init_array>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	4e0c      	ldr	r6, [pc, #48]	; (8004b40 <__libc_init_array+0x38>)
 8004b0e:	4c0d      	ldr	r4, [pc, #52]	; (8004b44 <__libc_init_array+0x3c>)
 8004b10:	1ba4      	subs	r4, r4, r6
 8004b12:	10a4      	asrs	r4, r4, #2
 8004b14:	42a5      	cmp	r5, r4
 8004b16:	d109      	bne.n	8004b2c <__libc_init_array+0x24>
 8004b18:	f000 fc36 	bl	8005388 <_init>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	4e0a      	ldr	r6, [pc, #40]	; (8004b48 <__libc_init_array+0x40>)
 8004b20:	4c0a      	ldr	r4, [pc, #40]	; (8004b4c <__libc_init_array+0x44>)
 8004b22:	1ba4      	subs	r4, r4, r6
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	42a5      	cmp	r5, r4
 8004b28:	d105      	bne.n	8004b36 <__libc_init_array+0x2e>
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b30:	4798      	blx	r3
 8004b32:	3501      	adds	r5, #1
 8004b34:	e7ee      	b.n	8004b14 <__libc_init_array+0xc>
 8004b36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b3a:	4798      	blx	r3
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7f2      	b.n	8004b26 <__libc_init_array+0x1e>
 8004b40:	080054e0 	.word	0x080054e0
 8004b44:	080054e0 	.word	0x080054e0
 8004b48:	080054e0 	.word	0x080054e0
 8004b4c:	080054e4 	.word	0x080054e4

08004b50 <memcpy>:
 8004b50:	b510      	push	{r4, lr}
 8004b52:	1e43      	subs	r3, r0, #1
 8004b54:	440a      	add	r2, r1
 8004b56:	4291      	cmp	r1, r2
 8004b58:	d100      	bne.n	8004b5c <memcpy+0xc>
 8004b5a:	bd10      	pop	{r4, pc}
 8004b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b64:	e7f7      	b.n	8004b56 <memcpy+0x6>

08004b66 <memset>:
 8004b66:	4603      	mov	r3, r0
 8004b68:	4402      	add	r2, r0
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d100      	bne.n	8004b70 <memset+0xa>
 8004b6e:	4770      	bx	lr
 8004b70:	f803 1b01 	strb.w	r1, [r3], #1
 8004b74:	e7f9      	b.n	8004b6a <memset+0x4>
	...

08004b78 <siprintf>:
 8004b78:	b40e      	push	{r1, r2, r3}
 8004b7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b7e:	b500      	push	{lr}
 8004b80:	b09c      	sub	sp, #112	; 0x70
 8004b82:	ab1d      	add	r3, sp, #116	; 0x74
 8004b84:	9002      	str	r0, [sp, #8]
 8004b86:	9006      	str	r0, [sp, #24]
 8004b88:	9107      	str	r1, [sp, #28]
 8004b8a:	9104      	str	r1, [sp, #16]
 8004b8c:	4808      	ldr	r0, [pc, #32]	; (8004bb0 <siprintf+0x38>)
 8004b8e:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <siprintf+0x3c>)
 8004b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b94:	9105      	str	r1, [sp, #20]
 8004b96:	6800      	ldr	r0, [r0, #0]
 8004b98:	a902      	add	r1, sp, #8
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	f000 f866 	bl	8004c6c <_svfiprintf_r>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	9b02      	ldr	r3, [sp, #8]
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	b01c      	add	sp, #112	; 0x70
 8004ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bac:	b003      	add	sp, #12
 8004bae:	4770      	bx	lr
 8004bb0:	20000010 	.word	0x20000010
 8004bb4:	ffff0208 	.word	0xffff0208

08004bb8 <__ssputs_r>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	688e      	ldr	r6, [r1, #8]
 8004bbe:	4682      	mov	sl, r0
 8004bc0:	429e      	cmp	r6, r3
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	4690      	mov	r8, r2
 8004bc6:	4699      	mov	r9, r3
 8004bc8:	d837      	bhi.n	8004c3a <__ssputs_r+0x82>
 8004bca:	898a      	ldrh	r2, [r1, #12]
 8004bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bd0:	d031      	beq.n	8004c36 <__ssputs_r+0x7e>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	6825      	ldr	r5, [r4, #0]
 8004bd6:	6909      	ldr	r1, [r1, #16]
 8004bd8:	1a6f      	subs	r7, r5, r1
 8004bda:	6965      	ldr	r5, [r4, #20]
 8004bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004be4:	f109 0301 	add.w	r3, r9, #1
 8004be8:	443b      	add	r3, r7
 8004bea:	429d      	cmp	r5, r3
 8004bec:	bf38      	it	cc
 8004bee:	461d      	movcc	r5, r3
 8004bf0:	0553      	lsls	r3, r2, #21
 8004bf2:	d530      	bpl.n	8004c56 <__ssputs_r+0x9e>
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f000 fb2d 	bl	8005254 <_malloc_r>
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	b950      	cbnz	r0, 8004c14 <__ssputs_r+0x5c>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c04:	f8ca 3000 	str.w	r3, [sl]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c14:	463a      	mov	r2, r7
 8004c16:	6921      	ldr	r1, [r4, #16]
 8004c18:	f7ff ff9a 	bl	8004b50 <memcpy>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	6126      	str	r6, [r4, #16]
 8004c2a:	443e      	add	r6, r7
 8004c2c:	6026      	str	r6, [r4, #0]
 8004c2e:	464e      	mov	r6, r9
 8004c30:	6165      	str	r5, [r4, #20]
 8004c32:	1bed      	subs	r5, r5, r7
 8004c34:	60a5      	str	r5, [r4, #8]
 8004c36:	454e      	cmp	r6, r9
 8004c38:	d900      	bls.n	8004c3c <__ssputs_r+0x84>
 8004c3a:	464e      	mov	r6, r9
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	4641      	mov	r1, r8
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	f000 faa1 	bl	8005188 <memmove>
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	2000      	movs	r0, #0
 8004c4a:	1b9b      	subs	r3, r3, r6
 8004c4c:	60a3      	str	r3, [r4, #8]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	441e      	add	r6, r3
 8004c52:	6026      	str	r6, [r4, #0]
 8004c54:	e7dc      	b.n	8004c10 <__ssputs_r+0x58>
 8004c56:	462a      	mov	r2, r5
 8004c58:	f000 fb56 	bl	8005308 <_realloc_r>
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d1e2      	bne.n	8004c28 <__ssputs_r+0x70>
 8004c62:	6921      	ldr	r1, [r4, #16]
 8004c64:	4650      	mov	r0, sl
 8004c66:	f000 faa9 	bl	80051bc <_free_r>
 8004c6a:	e7c8      	b.n	8004bfe <__ssputs_r+0x46>

08004c6c <_svfiprintf_r>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	461d      	mov	r5, r3
 8004c72:	898b      	ldrh	r3, [r1, #12]
 8004c74:	b09d      	sub	sp, #116	; 0x74
 8004c76:	061f      	lsls	r7, r3, #24
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	d50f      	bpl.n	8004ca0 <_svfiprintf_r+0x34>
 8004c80:	690b      	ldr	r3, [r1, #16]
 8004c82:	b96b      	cbnz	r3, 8004ca0 <_svfiprintf_r+0x34>
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	f000 fae5 	bl	8005254 <_malloc_r>
 8004c8a:	6020      	str	r0, [r4, #0]
 8004c8c:	6120      	str	r0, [r4, #16]
 8004c8e:	b928      	cbnz	r0, 8004c9c <_svfiprintf_r+0x30>
 8004c90:	230c      	movs	r3, #12
 8004c92:	f8c8 3000 	str.w	r3, [r8]
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c9a:	e0c8      	b.n	8004e2e <_svfiprintf_r+0x1c2>
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	6163      	str	r3, [r4, #20]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004caa:	2330      	movs	r3, #48	; 0x30
 8004cac:	f04f 0b01 	mov.w	fp, #1
 8004cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb4:	9503      	str	r5, [sp, #12]
 8004cb6:	4637      	mov	r7, r6
 8004cb8:	463d      	mov	r5, r7
 8004cba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cbe:	b10b      	cbz	r3, 8004cc4 <_svfiprintf_r+0x58>
 8004cc0:	2b25      	cmp	r3, #37	; 0x25
 8004cc2:	d13e      	bne.n	8004d42 <_svfiprintf_r+0xd6>
 8004cc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cc8:	d00b      	beq.n	8004ce2 <_svfiprintf_r+0x76>
 8004cca:	4653      	mov	r3, sl
 8004ccc:	4632      	mov	r2, r6
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	f7ff ff71 	bl	8004bb8 <__ssputs_r>
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f000 80a4 	beq.w	8004e24 <_svfiprintf_r+0x1b8>
 8004cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cde:	4453      	add	r3, sl
 8004ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce2:	783b      	ldrb	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 809d 	beq.w	8004e24 <_svfiprintf_r+0x1b8>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	9307      	str	r3, [sp, #28]
 8004cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8004cfe:	462f      	mov	r7, r5
 8004d00:	2205      	movs	r2, #5
 8004d02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004d06:	4850      	ldr	r0, [pc, #320]	; (8004e48 <_svfiprintf_r+0x1dc>)
 8004d08:	f000 fa30 	bl	800516c <memchr>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	b9d0      	cbnz	r0, 8004d46 <_svfiprintf_r+0xda>
 8004d10:	06d9      	lsls	r1, r3, #27
 8004d12:	bf44      	itt	mi
 8004d14:	2220      	movmi	r2, #32
 8004d16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d1a:	071a      	lsls	r2, r3, #28
 8004d1c:	bf44      	itt	mi
 8004d1e:	222b      	movmi	r2, #43	; 0x2b
 8004d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d24:	782a      	ldrb	r2, [r5, #0]
 8004d26:	2a2a      	cmp	r2, #42	; 0x2a
 8004d28:	d015      	beq.n	8004d56 <_svfiprintf_r+0xea>
 8004d2a:	462f      	mov	r7, r5
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	250a      	movs	r5, #10
 8004d30:	9a07      	ldr	r2, [sp, #28]
 8004d32:	4639      	mov	r1, r7
 8004d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d38:	3b30      	subs	r3, #48	; 0x30
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d94d      	bls.n	8004dda <_svfiprintf_r+0x16e>
 8004d3e:	b1b8      	cbz	r0, 8004d70 <_svfiprintf_r+0x104>
 8004d40:	e00f      	b.n	8004d62 <_svfiprintf_r+0xf6>
 8004d42:	462f      	mov	r7, r5
 8004d44:	e7b8      	b.n	8004cb8 <_svfiprintf_r+0x4c>
 8004d46:	4a40      	ldr	r2, [pc, #256]	; (8004e48 <_svfiprintf_r+0x1dc>)
 8004d48:	463d      	mov	r5, r7
 8004d4a:	1a80      	subs	r0, r0, r2
 8004d4c:	fa0b f000 	lsl.w	r0, fp, r0
 8004d50:	4318      	orrs	r0, r3
 8004d52:	9004      	str	r0, [sp, #16]
 8004d54:	e7d3      	b.n	8004cfe <_svfiprintf_r+0x92>
 8004d56:	9a03      	ldr	r2, [sp, #12]
 8004d58:	1d11      	adds	r1, r2, #4
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	9103      	str	r1, [sp, #12]
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	db01      	blt.n	8004d66 <_svfiprintf_r+0xfa>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e004      	b.n	8004d70 <_svfiprintf_r+0x104>
 8004d66:	4252      	negs	r2, r2
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	9207      	str	r2, [sp, #28]
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	783b      	ldrb	r3, [r7, #0]
 8004d72:	2b2e      	cmp	r3, #46	; 0x2e
 8004d74:	d10c      	bne.n	8004d90 <_svfiprintf_r+0x124>
 8004d76:	787b      	ldrb	r3, [r7, #1]
 8004d78:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7a:	d133      	bne.n	8004de4 <_svfiprintf_r+0x178>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	3702      	adds	r7, #2
 8004d80:	1d1a      	adds	r2, r3, #4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	9203      	str	r2, [sp, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfb8      	it	lt
 8004d8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	4d2e      	ldr	r5, [pc, #184]	; (8004e4c <_svfiprintf_r+0x1e0>)
 8004d92:	2203      	movs	r2, #3
 8004d94:	7839      	ldrb	r1, [r7, #0]
 8004d96:	4628      	mov	r0, r5
 8004d98:	f000 f9e8 	bl	800516c <memchr>
 8004d9c:	b138      	cbz	r0, 8004dae <_svfiprintf_r+0x142>
 8004d9e:	2340      	movs	r3, #64	; 0x40
 8004da0:	1b40      	subs	r0, r0, r5
 8004da2:	fa03 f000 	lsl.w	r0, r3, r0
 8004da6:	9b04      	ldr	r3, [sp, #16]
 8004da8:	3701      	adds	r7, #1
 8004daa:	4303      	orrs	r3, r0
 8004dac:	9304      	str	r3, [sp, #16]
 8004dae:	7839      	ldrb	r1, [r7, #0]
 8004db0:	2206      	movs	r2, #6
 8004db2:	4827      	ldr	r0, [pc, #156]	; (8004e50 <_svfiprintf_r+0x1e4>)
 8004db4:	1c7e      	adds	r6, r7, #1
 8004db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dba:	f000 f9d7 	bl	800516c <memchr>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d038      	beq.n	8004e34 <_svfiprintf_r+0x1c8>
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <_svfiprintf_r+0x1e8>)
 8004dc4:	bb13      	cbnz	r3, 8004e0c <_svfiprintf_r+0x1a0>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	3307      	adds	r3, #7
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	3308      	adds	r3, #8
 8004dd0:	9303      	str	r3, [sp, #12]
 8004dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd4:	444b      	add	r3, r9
 8004dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd8:	e76d      	b.n	8004cb6 <_svfiprintf_r+0x4a>
 8004dda:	fb05 3202 	mla	r2, r5, r2, r3
 8004dde:	2001      	movs	r0, #1
 8004de0:	460f      	mov	r7, r1
 8004de2:	e7a6      	b.n	8004d32 <_svfiprintf_r+0xc6>
 8004de4:	2300      	movs	r3, #0
 8004de6:	250a      	movs	r5, #10
 8004de8:	4619      	mov	r1, r3
 8004dea:	3701      	adds	r7, #1
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	4638      	mov	r0, r7
 8004df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df4:	3a30      	subs	r2, #48	; 0x30
 8004df6:	2a09      	cmp	r2, #9
 8004df8:	d903      	bls.n	8004e02 <_svfiprintf_r+0x196>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0c8      	beq.n	8004d90 <_svfiprintf_r+0x124>
 8004dfe:	9105      	str	r1, [sp, #20]
 8004e00:	e7c6      	b.n	8004d90 <_svfiprintf_r+0x124>
 8004e02:	fb05 2101 	mla	r1, r5, r1, r2
 8004e06:	2301      	movs	r3, #1
 8004e08:	4607      	mov	r7, r0
 8004e0a:	e7f0      	b.n	8004dee <_svfiprintf_r+0x182>
 8004e0c:	ab03      	add	r3, sp, #12
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4622      	mov	r2, r4
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <_svfiprintf_r+0x1ec>)
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	4640      	mov	r0, r8
 8004e18:	f3af 8000 	nop.w
 8004e1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004e20:	4681      	mov	r9, r0
 8004e22:	d1d6      	bne.n	8004dd2 <_svfiprintf_r+0x166>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	065b      	lsls	r3, r3, #25
 8004e28:	f53f af35 	bmi.w	8004c96 <_svfiprintf_r+0x2a>
 8004e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e2e:	b01d      	add	sp, #116	; 0x74
 8004e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e34:	ab03      	add	r3, sp, #12
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <_svfiprintf_r+0x1ec>)
 8004e3c:	a904      	add	r1, sp, #16
 8004e3e:	4640      	mov	r0, r8
 8004e40:	f000 f882 	bl	8004f48 <_printf_i>
 8004e44:	e7ea      	b.n	8004e1c <_svfiprintf_r+0x1b0>
 8004e46:	bf00      	nop
 8004e48:	080054ac 	.word	0x080054ac
 8004e4c:	080054b2 	.word	0x080054b2
 8004e50:	080054b6 	.word	0x080054b6
 8004e54:	00000000 	.word	0x00000000
 8004e58:	08004bb9 	.word	0x08004bb9

08004e5c <_printf_common>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	4691      	mov	r9, r2
 8004e62:	461f      	mov	r7, r3
 8004e64:	688a      	ldr	r2, [r1, #8]
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4606      	mov	r6, r0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bfb8      	it	lt
 8004e6e:	4613      	movlt	r3, r2
 8004e70:	f8c9 3000 	str.w	r3, [r9]
 8004e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e78:	460c      	mov	r4, r1
 8004e7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e7e:	b112      	cbz	r2, 8004e86 <_printf_common+0x2a>
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8c9 3000 	str.w	r3, [r9]
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	0699      	lsls	r1, r3, #26
 8004e8a:	bf42      	ittt	mi
 8004e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e90:	3302      	addmi	r3, #2
 8004e92:	f8c9 3000 	strmi.w	r3, [r9]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d107      	bne.n	8004eae <_printf_common+0x52>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	dc29      	bgt.n	8004f02 <_printf_common+0xa6>
 8004eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	3300      	adds	r3, #0
 8004eb6:	bf18      	it	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	0692      	lsls	r2, r2, #26
 8004ebc:	d42e      	bmi.n	8004f1c <_printf_common+0xc0>
 8004ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	47c0      	blx	r8
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d021      	beq.n	8004f10 <_printf_common+0xb4>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	68e5      	ldr	r5, [r4, #12]
 8004ed0:	f003 0306 	and.w	r3, r3, #6
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	bf18      	it	ne
 8004ed8:	2500      	movne	r5, #0
 8004eda:	f8d9 2000 	ldr.w	r2, [r9]
 8004ede:	f04f 0900 	mov.w	r9, #0
 8004ee2:	bf08      	it	eq
 8004ee4:	1aad      	subeq	r5, r5, r2
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	bf08      	it	eq
 8004eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bfc4      	itt	gt
 8004ef4:	1a9b      	subgt	r3, r3, r2
 8004ef6:	18ed      	addgt	r5, r5, r3
 8004ef8:	341a      	adds	r4, #26
 8004efa:	454d      	cmp	r5, r9
 8004efc:	d11a      	bne.n	8004f34 <_printf_common+0xd8>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e008      	b.n	8004f14 <_printf_common+0xb8>
 8004f02:	2301      	movs	r3, #1
 8004f04:	4652      	mov	r2, sl
 8004f06:	4639      	mov	r1, r7
 8004f08:	4630      	mov	r0, r6
 8004f0a:	47c0      	blx	r8
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d103      	bne.n	8004f18 <_printf_common+0xbc>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	3501      	adds	r5, #1
 8004f1a:	e7c2      	b.n	8004ea2 <_printf_common+0x46>
 8004f1c:	2030      	movs	r0, #48	; 0x30
 8004f1e:	18e1      	adds	r1, r4, r3
 8004f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f2a:	4422      	add	r2, r4
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x62>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4622      	mov	r2, r4
 8004f38:	4639      	mov	r1, r7
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	47c0      	blx	r8
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0e6      	beq.n	8004f10 <_printf_common+0xb4>
 8004f42:	f109 0901 	add.w	r9, r9, #1
 8004f46:	e7d8      	b.n	8004efa <_printf_common+0x9e>

08004f48 <_printf_i>:
 8004f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f50:	460c      	mov	r4, r1
 8004f52:	7e09      	ldrb	r1, [r1, #24]
 8004f54:	b085      	sub	sp, #20
 8004f56:	296e      	cmp	r1, #110	; 0x6e
 8004f58:	4617      	mov	r7, r2
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	4698      	mov	r8, r3
 8004f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f60:	f000 80b3 	beq.w	80050ca <_printf_i+0x182>
 8004f64:	d822      	bhi.n	8004fac <_printf_i+0x64>
 8004f66:	2963      	cmp	r1, #99	; 0x63
 8004f68:	d036      	beq.n	8004fd8 <_printf_i+0x90>
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x3a>
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	f000 80b9 	beq.w	80050e4 <_printf_i+0x19c>
 8004f72:	2958      	cmp	r1, #88	; 0x58
 8004f74:	f000 8083 	beq.w	800507e <_printf_i+0x136>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f80:	e032      	b.n	8004fe8 <_printf_i+0xa0>
 8004f82:	2964      	cmp	r1, #100	; 0x64
 8004f84:	d001      	beq.n	8004f8a <_printf_i+0x42>
 8004f86:	2969      	cmp	r1, #105	; 0x69
 8004f88:	d1f6      	bne.n	8004f78 <_printf_i+0x30>
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	0605      	lsls	r5, r0, #24
 8004f90:	f103 0104 	add.w	r1, r3, #4
 8004f94:	d52a      	bpl.n	8004fec <_printf_i+0xa4>
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da03      	bge.n	8004fa6 <_printf_i+0x5e>
 8004f9e:	222d      	movs	r2, #45	; 0x2d
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fa6:	486f      	ldr	r0, [pc, #444]	; (8005164 <_printf_i+0x21c>)
 8004fa8:	220a      	movs	r2, #10
 8004faa:	e039      	b.n	8005020 <_printf_i+0xd8>
 8004fac:	2973      	cmp	r1, #115	; 0x73
 8004fae:	f000 809d 	beq.w	80050ec <_printf_i+0x1a4>
 8004fb2:	d808      	bhi.n	8004fc6 <_printf_i+0x7e>
 8004fb4:	296f      	cmp	r1, #111	; 0x6f
 8004fb6:	d020      	beq.n	8004ffa <_printf_i+0xb2>
 8004fb8:	2970      	cmp	r1, #112	; 0x70
 8004fba:	d1dd      	bne.n	8004f78 <_printf_i+0x30>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f043 0320 	orr.w	r3, r3, #32
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	e003      	b.n	8004fce <_printf_i+0x86>
 8004fc6:	2975      	cmp	r1, #117	; 0x75
 8004fc8:	d017      	beq.n	8004ffa <_printf_i+0xb2>
 8004fca:	2978      	cmp	r1, #120	; 0x78
 8004fcc:	d1d4      	bne.n	8004f78 <_printf_i+0x30>
 8004fce:	2378      	movs	r3, #120	; 0x78
 8004fd0:	4865      	ldr	r0, [pc, #404]	; (8005168 <_printf_i+0x220>)
 8004fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fd6:	e055      	b.n	8005084 <_printf_i+0x13c>
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fde:	1d19      	adds	r1, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6011      	str	r1, [r2, #0]
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e08c      	b.n	8005106 <_printf_i+0x1be>
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ff2:	6011      	str	r1, [r2, #0]
 8004ff4:	bf18      	it	ne
 8004ff6:	b21b      	sxthne	r3, r3
 8004ff8:	e7cf      	b.n	8004f9a <_printf_i+0x52>
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	6825      	ldr	r5, [r4, #0]
 8004ffe:	1d18      	adds	r0, r3, #4
 8005000:	6010      	str	r0, [r2, #0]
 8005002:	0628      	lsls	r0, r5, #24
 8005004:	d501      	bpl.n	800500a <_printf_i+0xc2>
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	e002      	b.n	8005010 <_printf_i+0xc8>
 800500a:	0668      	lsls	r0, r5, #25
 800500c:	d5fb      	bpl.n	8005006 <_printf_i+0xbe>
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	296f      	cmp	r1, #111	; 0x6f
 8005012:	bf14      	ite	ne
 8005014:	220a      	movne	r2, #10
 8005016:	2208      	moveq	r2, #8
 8005018:	4852      	ldr	r0, [pc, #328]	; (8005164 <_printf_i+0x21c>)
 800501a:	2100      	movs	r1, #0
 800501c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005020:	6865      	ldr	r5, [r4, #4]
 8005022:	2d00      	cmp	r5, #0
 8005024:	60a5      	str	r5, [r4, #8]
 8005026:	f2c0 8095 	blt.w	8005154 <_printf_i+0x20c>
 800502a:	6821      	ldr	r1, [r4, #0]
 800502c:	f021 0104 	bic.w	r1, r1, #4
 8005030:	6021      	str	r1, [r4, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <_printf_i+0x16a>
 8005036:	2d00      	cmp	r5, #0
 8005038:	f040 808e 	bne.w	8005158 <_printf_i+0x210>
 800503c:	4665      	mov	r5, ip
 800503e:	2a08      	cmp	r2, #8
 8005040:	d10b      	bne.n	800505a <_printf_i+0x112>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	07db      	lsls	r3, r3, #31
 8005046:	d508      	bpl.n	800505a <_printf_i+0x112>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	6862      	ldr	r2, [r4, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	bfde      	ittt	le
 8005050:	2330      	movle	r3, #48	; 0x30
 8005052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005056:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800505a:	ebac 0305 	sub.w	r3, ip, r5
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	f8cd 8000 	str.w	r8, [sp]
 8005064:	463b      	mov	r3, r7
 8005066:	aa03      	add	r2, sp, #12
 8005068:	4621      	mov	r1, r4
 800506a:	4630      	mov	r0, r6
 800506c:	f7ff fef6 	bl	8004e5c <_printf_common>
 8005070:	3001      	adds	r0, #1
 8005072:	d14d      	bne.n	8005110 <_printf_i+0x1c8>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005078:	b005      	add	sp, #20
 800507a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800507e:	4839      	ldr	r0, [pc, #228]	; (8005164 <_printf_i+0x21c>)
 8005080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	6821      	ldr	r1, [r4, #0]
 8005088:	1d1d      	adds	r5, r3, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6015      	str	r5, [r2, #0]
 800508e:	060a      	lsls	r2, r1, #24
 8005090:	d50b      	bpl.n	80050aa <_printf_i+0x162>
 8005092:	07ca      	lsls	r2, r1, #31
 8005094:	bf44      	itt	mi
 8005096:	f041 0120 	orrmi.w	r1, r1, #32
 800509a:	6021      	strmi	r1, [r4, #0]
 800509c:	b91b      	cbnz	r3, 80050a6 <_printf_i+0x15e>
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	f022 0220 	bic.w	r2, r2, #32
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	2210      	movs	r2, #16
 80050a8:	e7b7      	b.n	800501a <_printf_i+0xd2>
 80050aa:	064d      	lsls	r5, r1, #25
 80050ac:	bf48      	it	mi
 80050ae:	b29b      	uxthmi	r3, r3
 80050b0:	e7ef      	b.n	8005092 <_printf_i+0x14a>
 80050b2:	4665      	mov	r5, ip
 80050b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050b8:	fb02 3311 	mls	r3, r2, r1, r3
 80050bc:	5cc3      	ldrb	r3, [r0, r3]
 80050be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050c2:	460b      	mov	r3, r1
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d1f5      	bne.n	80050b4 <_printf_i+0x16c>
 80050c8:	e7b9      	b.n	800503e <_printf_i+0xf6>
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	1d18      	adds	r0, r3, #4
 80050d0:	6961      	ldr	r1, [r4, #20]
 80050d2:	6010      	str	r0, [r2, #0]
 80050d4:	0628      	lsls	r0, r5, #24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	d501      	bpl.n	80050de <_printf_i+0x196>
 80050da:	6019      	str	r1, [r3, #0]
 80050dc:	e002      	b.n	80050e4 <_printf_i+0x19c>
 80050de:	066a      	lsls	r2, r5, #25
 80050e0:	d5fb      	bpl.n	80050da <_printf_i+0x192>
 80050e2:	8019      	strh	r1, [r3, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	4665      	mov	r5, ip
 80050e8:	6123      	str	r3, [r4, #16]
 80050ea:	e7b9      	b.n	8005060 <_printf_i+0x118>
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	1d19      	adds	r1, r3, #4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	681d      	ldr	r5, [r3, #0]
 80050f4:	6862      	ldr	r2, [r4, #4]
 80050f6:	2100      	movs	r1, #0
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f837 	bl	800516c <memchr>
 80050fe:	b108      	cbz	r0, 8005104 <_printf_i+0x1bc>
 8005100:	1b40      	subs	r0, r0, r5
 8005102:	6060      	str	r0, [r4, #4]
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	2300      	movs	r3, #0
 800510a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510e:	e7a7      	b.n	8005060 <_printf_i+0x118>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	462a      	mov	r2, r5
 8005114:	4639      	mov	r1, r7
 8005116:	4630      	mov	r0, r6
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d0aa      	beq.n	8005074 <_printf_i+0x12c>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	079b      	lsls	r3, r3, #30
 8005122:	d413      	bmi.n	800514c <_printf_i+0x204>
 8005124:	68e0      	ldr	r0, [r4, #12]
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	4298      	cmp	r0, r3
 800512a:	bfb8      	it	lt
 800512c:	4618      	movlt	r0, r3
 800512e:	e7a3      	b.n	8005078 <_printf_i+0x130>
 8005130:	2301      	movs	r3, #1
 8005132:	464a      	mov	r2, r9
 8005134:	4639      	mov	r1, r7
 8005136:	4630      	mov	r0, r6
 8005138:	47c0      	blx	r8
 800513a:	3001      	adds	r0, #1
 800513c:	d09a      	beq.n	8005074 <_printf_i+0x12c>
 800513e:	3501      	adds	r5, #1
 8005140:	68e3      	ldr	r3, [r4, #12]
 8005142:	9a03      	ldr	r2, [sp, #12]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	42ab      	cmp	r3, r5
 8005148:	dcf2      	bgt.n	8005130 <_printf_i+0x1e8>
 800514a:	e7eb      	b.n	8005124 <_printf_i+0x1dc>
 800514c:	2500      	movs	r5, #0
 800514e:	f104 0919 	add.w	r9, r4, #25
 8005152:	e7f5      	b.n	8005140 <_printf_i+0x1f8>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ac      	bne.n	80050b2 <_printf_i+0x16a>
 8005158:	7803      	ldrb	r3, [r0, #0]
 800515a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800515e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005162:	e76c      	b.n	800503e <_printf_i+0xf6>
 8005164:	080054bd 	.word	0x080054bd
 8005168:	080054ce 	.word	0x080054ce

0800516c <memchr>:
 800516c:	b510      	push	{r4, lr}
 800516e:	b2c9      	uxtb	r1, r1
 8005170:	4402      	add	r2, r0
 8005172:	4290      	cmp	r0, r2
 8005174:	4603      	mov	r3, r0
 8005176:	d101      	bne.n	800517c <memchr+0x10>
 8005178:	2300      	movs	r3, #0
 800517a:	e003      	b.n	8005184 <memchr+0x18>
 800517c:	781c      	ldrb	r4, [r3, #0]
 800517e:	3001      	adds	r0, #1
 8005180:	428c      	cmp	r4, r1
 8005182:	d1f6      	bne.n	8005172 <memchr+0x6>
 8005184:	4618      	mov	r0, r3
 8005186:	bd10      	pop	{r4, pc}

08005188 <memmove>:
 8005188:	4288      	cmp	r0, r1
 800518a:	b510      	push	{r4, lr}
 800518c:	eb01 0302 	add.w	r3, r1, r2
 8005190:	d807      	bhi.n	80051a2 <memmove+0x1a>
 8005192:	1e42      	subs	r2, r0, #1
 8005194:	4299      	cmp	r1, r3
 8005196:	d00a      	beq.n	80051ae <memmove+0x26>
 8005198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051a0:	e7f8      	b.n	8005194 <memmove+0xc>
 80051a2:	4283      	cmp	r3, r0
 80051a4:	d9f5      	bls.n	8005192 <memmove+0xa>
 80051a6:	1881      	adds	r1, r0, r2
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	42d3      	cmn	r3, r2
 80051ac:	d100      	bne.n	80051b0 <memmove+0x28>
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051b8:	e7f7      	b.n	80051aa <memmove+0x22>
	...

080051bc <_free_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4605      	mov	r5, r0
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d043      	beq.n	800524c <_free_r+0x90>
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f0c      	subs	r4, r1, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfb8      	it	lt
 80051ce:	18e4      	addlt	r4, r4, r3
 80051d0:	f000 f8d0 	bl	8005374 <__malloc_lock>
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <_free_r+0x94>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	4610      	mov	r0, r2
 80051da:	b933      	cbnz	r3, 80051ea <_free_r+0x2e>
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6014      	str	r4, [r2, #0]
 80051e0:	4628      	mov	r0, r5
 80051e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e6:	f000 b8c6 	b.w	8005376 <__malloc_unlock>
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	d90b      	bls.n	8005206 <_free_r+0x4a>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1862      	adds	r2, r4, r1
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bf01      	itttt	eq
 80051f6:	681a      	ldreq	r2, [r3, #0]
 80051f8:	685b      	ldreq	r3, [r3, #4]
 80051fa:	1852      	addeq	r2, r2, r1
 80051fc:	6022      	streq	r2, [r4, #0]
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	6004      	str	r4, [r0, #0]
 8005202:	e7ed      	b.n	80051e0 <_free_r+0x24>
 8005204:	4613      	mov	r3, r2
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	b10a      	cbz	r2, 800520e <_free_r+0x52>
 800520a:	42a2      	cmp	r2, r4
 800520c:	d9fa      	bls.n	8005204 <_free_r+0x48>
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	1858      	adds	r0, r3, r1
 8005212:	42a0      	cmp	r0, r4
 8005214:	d10b      	bne.n	800522e <_free_r+0x72>
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	4401      	add	r1, r0
 800521a:	1858      	adds	r0, r3, r1
 800521c:	4282      	cmp	r2, r0
 800521e:	6019      	str	r1, [r3, #0]
 8005220:	d1de      	bne.n	80051e0 <_free_r+0x24>
 8005222:	6810      	ldr	r0, [r2, #0]
 8005224:	6852      	ldr	r2, [r2, #4]
 8005226:	4401      	add	r1, r0
 8005228:	6019      	str	r1, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	e7d8      	b.n	80051e0 <_free_r+0x24>
 800522e:	d902      	bls.n	8005236 <_free_r+0x7a>
 8005230:	230c      	movs	r3, #12
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	e7d4      	b.n	80051e0 <_free_r+0x24>
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	1821      	adds	r1, r4, r0
 800523a:	428a      	cmp	r2, r1
 800523c:	bf01      	itttt	eq
 800523e:	6811      	ldreq	r1, [r2, #0]
 8005240:	6852      	ldreq	r2, [r2, #4]
 8005242:	1809      	addeq	r1, r1, r0
 8005244:	6021      	streq	r1, [r4, #0]
 8005246:	6062      	str	r2, [r4, #4]
 8005248:	605c      	str	r4, [r3, #4]
 800524a:	e7c9      	b.n	80051e0 <_free_r+0x24>
 800524c:	bd38      	pop	{r3, r4, r5, pc}
 800524e:	bf00      	nop
 8005250:	2000199c 	.word	0x2000199c

08005254 <_malloc_r>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	1ccd      	adds	r5, r1, #3
 8005258:	f025 0503 	bic.w	r5, r5, #3
 800525c:	3508      	adds	r5, #8
 800525e:	2d0c      	cmp	r5, #12
 8005260:	bf38      	it	cc
 8005262:	250c      	movcc	r5, #12
 8005264:	2d00      	cmp	r5, #0
 8005266:	4606      	mov	r6, r0
 8005268:	db01      	blt.n	800526e <_malloc_r+0x1a>
 800526a:	42a9      	cmp	r1, r5
 800526c:	d903      	bls.n	8005276 <_malloc_r+0x22>
 800526e:	230c      	movs	r3, #12
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	2000      	movs	r0, #0
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	f000 f87d 	bl	8005374 <__malloc_lock>
 800527a:	4a21      	ldr	r2, [pc, #132]	; (8005300 <_malloc_r+0xac>)
 800527c:	6814      	ldr	r4, [r2, #0]
 800527e:	4621      	mov	r1, r4
 8005280:	b991      	cbnz	r1, 80052a8 <_malloc_r+0x54>
 8005282:	4c20      	ldr	r4, [pc, #128]	; (8005304 <_malloc_r+0xb0>)
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	b91b      	cbnz	r3, 8005290 <_malloc_r+0x3c>
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f863 	bl	8005354 <_sbrk_r>
 800528e:	6020      	str	r0, [r4, #0]
 8005290:	4629      	mov	r1, r5
 8005292:	4630      	mov	r0, r6
 8005294:	f000 f85e 	bl	8005354 <_sbrk_r>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d124      	bne.n	80052e6 <_malloc_r+0x92>
 800529c:	230c      	movs	r3, #12
 800529e:	4630      	mov	r0, r6
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	f000 f868 	bl	8005376 <__malloc_unlock>
 80052a6:	e7e4      	b.n	8005272 <_malloc_r+0x1e>
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	1b5b      	subs	r3, r3, r5
 80052ac:	d418      	bmi.n	80052e0 <_malloc_r+0x8c>
 80052ae:	2b0b      	cmp	r3, #11
 80052b0:	d90f      	bls.n	80052d2 <_malloc_r+0x7e>
 80052b2:	600b      	str	r3, [r1, #0]
 80052b4:	18cc      	adds	r4, r1, r3
 80052b6:	50cd      	str	r5, [r1, r3]
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 f85c 	bl	8005376 <__malloc_unlock>
 80052be:	f104 000b 	add.w	r0, r4, #11
 80052c2:	1d23      	adds	r3, r4, #4
 80052c4:	f020 0007 	bic.w	r0, r0, #7
 80052c8:	1ac3      	subs	r3, r0, r3
 80052ca:	d0d3      	beq.n	8005274 <_malloc_r+0x20>
 80052cc:	425a      	negs	r2, r3
 80052ce:	50e2      	str	r2, [r4, r3]
 80052d0:	e7d0      	b.n	8005274 <_malloc_r+0x20>
 80052d2:	684b      	ldr	r3, [r1, #4]
 80052d4:	428c      	cmp	r4, r1
 80052d6:	bf16      	itet	ne
 80052d8:	6063      	strne	r3, [r4, #4]
 80052da:	6013      	streq	r3, [r2, #0]
 80052dc:	460c      	movne	r4, r1
 80052de:	e7eb      	b.n	80052b8 <_malloc_r+0x64>
 80052e0:	460c      	mov	r4, r1
 80052e2:	6849      	ldr	r1, [r1, #4]
 80052e4:	e7cc      	b.n	8005280 <_malloc_r+0x2c>
 80052e6:	1cc4      	adds	r4, r0, #3
 80052e8:	f024 0403 	bic.w	r4, r4, #3
 80052ec:	42a0      	cmp	r0, r4
 80052ee:	d005      	beq.n	80052fc <_malloc_r+0xa8>
 80052f0:	1a21      	subs	r1, r4, r0
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f82e 	bl	8005354 <_sbrk_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d0cf      	beq.n	800529c <_malloc_r+0x48>
 80052fc:	6025      	str	r5, [r4, #0]
 80052fe:	e7db      	b.n	80052b8 <_malloc_r+0x64>
 8005300:	2000199c 	.word	0x2000199c
 8005304:	200019a0 	.word	0x200019a0

08005308 <_realloc_r>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	4607      	mov	r7, r0
 800530c:	4614      	mov	r4, r2
 800530e:	460e      	mov	r6, r1
 8005310:	b921      	cbnz	r1, 800531c <_realloc_r+0x14>
 8005312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005316:	4611      	mov	r1, r2
 8005318:	f7ff bf9c 	b.w	8005254 <_malloc_r>
 800531c:	b922      	cbnz	r2, 8005328 <_realloc_r+0x20>
 800531e:	f7ff ff4d 	bl	80051bc <_free_r>
 8005322:	4625      	mov	r5, r4
 8005324:	4628      	mov	r0, r5
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005328:	f000 f826 	bl	8005378 <_malloc_usable_size_r>
 800532c:	42a0      	cmp	r0, r4
 800532e:	d20f      	bcs.n	8005350 <_realloc_r+0x48>
 8005330:	4621      	mov	r1, r4
 8005332:	4638      	mov	r0, r7
 8005334:	f7ff ff8e 	bl	8005254 <_malloc_r>
 8005338:	4605      	mov	r5, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d0f2      	beq.n	8005324 <_realloc_r+0x1c>
 800533e:	4631      	mov	r1, r6
 8005340:	4622      	mov	r2, r4
 8005342:	f7ff fc05 	bl	8004b50 <memcpy>
 8005346:	4631      	mov	r1, r6
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff37 	bl	80051bc <_free_r>
 800534e:	e7e9      	b.n	8005324 <_realloc_r+0x1c>
 8005350:	4635      	mov	r5, r6
 8005352:	e7e7      	b.n	8005324 <_realloc_r+0x1c>

08005354 <_sbrk_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	2300      	movs	r3, #0
 8005358:	4c05      	ldr	r4, [pc, #20]	; (8005370 <_sbrk_r+0x1c>)
 800535a:	4605      	mov	r5, r0
 800535c:	4608      	mov	r0, r1
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	f7fb f9a2 	bl	80006a8 <_sbrk>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_sbrk_r+0x1a>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	b103      	cbz	r3, 800536e <_sbrk_r+0x1a>
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20001a80 	.word	0x20001a80

08005374 <__malloc_lock>:
 8005374:	4770      	bx	lr

08005376 <__malloc_unlock>:
 8005376:	4770      	bx	lr

08005378 <_malloc_usable_size_r>:
 8005378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537c:	1f18      	subs	r0, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	bfbc      	itt	lt
 8005382:	580b      	ldrlt	r3, [r1, r0]
 8005384:	18c0      	addlt	r0, r0, r3
 8005386:	4770      	bx	lr

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
